/*
 * Deel REST API
 * API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CreatePeopleTimeoff;
import com.konfigthis.client.model.EmployeeTimeoffsContainer;
import com.konfigthis.client.model.EmployeeTimeoffsCreationContainer;
import com.konfigthis.client.model.EmployeeTimeoffsEntitlementsContainer;
import com.konfigthis.client.model.EmployeeTimeoffsPoliciesContainer;
import java.io.File;
import com.konfigthis.client.model.GenericResultDeleted;
import com.konfigthis.client.model.GenericResultUpdated;
import com.konfigthis.client.model.HiringStatusEnum;
import com.konfigthis.client.model.HrisCompensation;
import com.konfigthis.client.model.HrisDirectEmployee;
import com.konfigthis.client.model.HrisDirectEmployeeContainer;
import com.konfigthis.client.model.HrisDirectEmployeeDetails;
import com.konfigthis.client.model.HrisDirectEmployeeVacationInfo;
import com.konfigthis.client.model.HrisTeamInformation;
import com.konfigthis.client.model.InternalPeopleContainer;
import com.konfigthis.client.model.PeopleByIdContainer;
import com.konfigthis.client.model.PeopleContainer;
import com.konfigthis.client.model.PeopleMe;
import com.konfigthis.client.model.PeopleSortByEnum;
import com.konfigthis.client.model.PeopleTimeOffContainer;
import com.konfigthis.client.model.SortDirEnum;
import com.konfigthis.client.model.TimeoffReviewInternal;
import com.konfigthis.client.model.TimeoffToReviewInternalContainer;
import com.konfigthis.client.model.UpdateWorkerDepartment;
import com.konfigthis.client.model.UpdateWorkerDepartmentContainer;
import com.konfigthis.client.model.UpdateWorkerWorkingLocation;
import com.konfigthis.client.model.UpdateWorkerWorkingLocationContainer;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PeopleApi
 */
@Disabled
public class PeopleApiTest {

    private static PeopleApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new PeopleApi(apiClient);
    }

    /**
     * Add a time off request
     *
     * Add a time off request for a worker. New requests are auto-approved.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTimeOffRequestTest() throws ApiException {
        String type = null;
        String startDate = null;
        String endDate = null;
        String reason = null;
        String workerId = null;
        File attachments = null;
        EmployeeTimeoffsCreationContainer response = api.addTimeOffRequest(type, startDate, endDate, reason, workerId)
                .attachments(attachments)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a new Hris direct employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDirectEmployeeTest() throws ApiException {
        HrisDirectEmployeeDetails employeeDetails = null;
        HrisTeamInformation teamInformation = null;
        Object jobInformation = null;
        HrisCompensation compensation = null;
        Object contract = null;
        HrisDirectEmployeeVacationInfo vacationInfo = null;
        HrisDirectEmployeeContainer response = api.createDirectEmployee(employeeDetails, teamInformation, jobInformation, compensation, contract)
                .vacationInfo(vacationInfo)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a time off request
     *
     * Delete a time off request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTimeOffRequestTest() throws ApiException {
        String timeoffId = null;
        String workerId = null;
        GenericResultDeleted response = api.deleteTimeOffRequest(timeoffId, workerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Edit a time off request
     *
     * Edit a time off request for a worker.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void editTimeOffRequestTest() throws ApiException {
        String timeoffId = null;
        String workerId = null;
        String type = null;
        String startDate = null;
        String endDate = null;
        String reason = null;
        File attachments = null;
        EmployeeTimeoffsCreationContainer response = api.editTimeOffRequest(timeoffId, workerId)
                .type(type)
                .startDate(startDate)
                .endDate(endDate)
                .reason(reason)
                .attachments(attachments)
                .execute();
        // TODO: test validations
    }

    /**
     * Get my current profile
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrentProfileTest() throws ApiException {
        PeopleMe response = api.getCurrentProfile()
                .execute();
        // TODO: test validations
    }

    /**
     * Get internal people list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getListTest() throws ApiException {
        Double offset = null;
        Double limit = null;
        InternalPeopleContainer response = api.getList()
                .offset(offset)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * List of people
     *
     * Retrieve a list of People in your organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getList_0Test() throws ApiException {
        Double offset = null;
        Double limit = null;
        String search = null;
        PeopleSortByEnum sortBy = null;
        SortDirEnum sortOrder = null;
        HiringStatusEnum hiringStatuses = null;
        PeopleContainer response = api.getList_0()
                .offset(offset)
                .limit(limit)
                .search(search)
                .sortBy(sortBy)
                .sortOrder(sortOrder)
                .hiringStatuses(hiringStatuses)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a single person
     *
     * Retrieve a single person in your organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPersonTest() throws ApiException {
        String workerId = null;
        PeopleByIdContainer response = api.getPerson(workerId)
                .execute();
        // TODO: test validations
    }

    /**
     * List of time off entitlements
     *
     * Retrieve a list of time off entitlements for a worker.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTimeOffEntitlementsTest() throws ApiException {
        String workerId = null;
        EmployeeTimeoffsEntitlementsContainer response = api.listTimeOffEntitlements(workerId)
                .execute();
        // TODO: test validations
    }

    /**
     * List of time off policies
     *
     * Retrieve a list of time off policies for a worker.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTimeOffPoliciesTest() throws ApiException {
        String workerId = null;
        EmployeeTimeoffsPoliciesContainer response = api.listTimeOffPolicies(workerId)
                .execute();
        // TODO: test validations
    }

    /**
     * List of time off entries
     *
     * List of time offs by worker id. Worker id can be retreived using /people endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTimeOffsByWorkerIdTest() throws ApiException {
        String workerId = null;
        EmployeeTimeoffsContainer response = api.listTimeOffsByWorkerId(workerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Review a time off request
     *
     * Approve or decline a time off request. New requests are auto-approved. Hence they don&#39;t need to be manually approved.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reviewTimeOffTest() throws ApiException {
        TimeoffReviewInternal data = null;
        String timeoffId = null;
        String workerId = null;
        EmployeeTimeoffsContainer response = api.reviewTimeOff(data, timeoffId, workerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update department
     *
     * Update worker department.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDepartmentTest() throws ApiException {
        UpdateWorkerDepartment data = null;
        String workerId = null;
        GenericResultUpdated response = api.updateDepartment(data, workerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update working location
     *
     * Update worker working location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWorkingLocationTest() throws ApiException {
        UpdateWorkerWorkingLocation data = null;
        String workerId = null;
        GenericResultUpdated response = api.updateWorkingLocation(data, workerId)
                .execute();
        // TODO: test validations
    }

}
