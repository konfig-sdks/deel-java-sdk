/*
 * Deel REST API
 * API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ContractTypeEnum;
import com.konfigthis.client.model.GenericResultCreated;
import com.konfigthis.client.model.GenericResultDeleted;
import com.konfigthis.client.model.GenericResultUpdated;
import com.konfigthis.client.model.InvoiceAdjustmentCreatedContainer;
import java.time.LocalDate;
import com.konfigthis.client.model.TimesheetContainer;
import com.konfigthis.client.model.TimesheetListContainer;
import com.konfigthis.client.model.TimesheetReviewToCreate;
import com.konfigthis.client.model.TimesheetReviewToCreateContainer;
import com.konfigthis.client.model.TimesheetReviewsToCreate;
import com.konfigthis.client.model.TimesheetReviewsToCreateContainer;
import com.konfigthis.client.model.TimesheetSharedProperties;
import com.konfigthis.client.model.TimesheetStatusEnum;
import com.konfigthis.client.model.TimesheetToCreateContainer;
import com.konfigthis.client.model.TimesheetToCreateWithFile;
import com.konfigthis.client.model.TimesheetToUpdate;
import com.konfigthis.client.model.TimesheetToUpdateContainer;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TimesheetsApi
 */
@Disabled
public class TimesheetsApiTest {

    private static TimesheetsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TimesheetsApi(apiClient);
    }

    /**
     * Delete a timesheet entry
     *
     * Delete a single timesheet entry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEntryTest() throws ApiException {
        Double timesheetId = null;
        String reason = null;
        GenericResultDeleted response = api.deleteEntry(timesheetId)
                .reason(reason)
                .execute();
        // TODO: test validations
    }

    /**
     * List of timesheets
     *
     * Retrieve a list of timesheets in your Deel account. You can filter the list by providing additional paramters e.g. contract_id, contract_type etc.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getListTest() throws ApiException {
        String contractId = null;
        List<ContractTypeEnum> contractTypes = null;
        List<TimesheetStatusEnum> statuses = null;
        Double reporterId = null;
        LocalDate dateFrom = null;
        LocalDate dateTo = null;
        Double limit = null;
        Double offset = null;
        TimesheetListContainer response = api.getList()
                .contractId(contractId)
                .contractTypes(contractTypes)
                .statuses(statuses)
                .reporterId(reporterId)
                .dateFrom(dateFrom)
                .dateTo(dateTo)
                .limit(limit)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a single timesheet entry
     *
     * Retrieve a single timesheet entry by Id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSingleEntryTest() throws ApiException {
        Double timesheetId = null;
        TimesheetContainer response = api.getSingleEntry(timesheetId)
                .execute();
        // TODO: test validations
    }

    /**
     * List of timesheets by contract
     *
     * Retrieve a list of timesheets found for a contract.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listByContractTest() throws ApiException {
        String contractId = null;
        List<ContractTypeEnum> contractTypes = null;
        List<TimesheetStatusEnum> statuses = null;
        Double reporterId = null;
        LocalDate dateFrom = null;
        LocalDate dateTo = null;
        Double limit = null;
        Double offset = null;
        TimesheetListContainer response = api.listByContract(contractId)
                .contractTypes(contractTypes)
                .statuses(statuses)
                .reporterId(reporterId)
                .dateFrom(dateFrom)
                .dateTo(dateTo)
                .limit(limit)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Review multiple timesheets
     *
     * Review a batch of timesheets to approve or reject submitted work.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reviewMultipleTest() throws ApiException {
        TimesheetReviewsToCreate data = null;
        GenericResultCreated response = api.reviewMultiple(data)
                .execute();
        // TODO: test validations
    }

    /**
     * Review a single timesheet
     *
     * Review a timesheet to approve or decline submitted work.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reviewSingleTimesheetTest() throws ApiException {
        TimesheetReviewToCreate data = null;
        Double timesheetId = null;
        GenericResultCreated response = api.reviewSingleTimesheet(data, timesheetId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a timesheet entry
     *
     * Submit work for a contractor.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitWorkForContractorTest() throws ApiException {
        TimesheetSharedProperties data = null;
        InvoiceAdjustmentCreatedContainer response = api.submitWorkForContractor(data)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a timesheet entry
     *
     * Update a single timesheet entry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEntryTest() throws ApiException {
        TimesheetToUpdate data = null;
        Double timesheetId = null;
        GenericResultUpdated response = api.updateEntry(data, timesheetId)
                .execute();
        // TODO: test validations
    }

}
