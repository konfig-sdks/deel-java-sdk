/*
 * Deel REST API
 * API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.GenericResultCreated;
import com.konfigthis.client.model.GenericResultDeleted;
import com.konfigthis.client.model.MilestoneContainer;
import com.konfigthis.client.model.MilestoneListContainer;
import com.konfigthis.client.model.MilestoneProperties;
import com.konfigthis.client.model.MilestoneReviewToCreate;
import com.konfigthis.client.model.MilestoneReviewToCreateContainer;
import com.konfigthis.client.model.MilestoneReviewsToCreate;
import com.konfigthis.client.model.MilestoneReviewsToCreateContainer;
import com.konfigthis.client.model.MilestoneToCreateContainer;
import com.konfigthis.client.model.MilestoneToCreateFormWithFile;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MilestonesApi
 */
@Disabled
public class MilestonesApiTest {

    private static MilestonesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new MilestonesApi(apiClient);
    }

    /**
     * Create a milestone
     *
     * Add a new milestone to contract.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewMilestoneTest() throws ApiException {
        MilestoneProperties data = null;
        String contractId = null;
        GenericResultCreated response = api.createNewMilestone(data, contractId)
                .execute();
        // TODO: test validations
    }

    /**
     * Review a single milestone
     *
     * Review a milestone to approve or decline submitted work.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createReviewTest() throws ApiException {
        MilestoneReviewToCreate data = null;
        String contractId = null;
        String milestoneId = null;
        GenericResultCreated response = api.createReview(data, contractId, milestoneId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a milestone
     *
     * Delete a single milestone from a contract.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSingleMilestoneTest() throws ApiException {
        String contractId = null;
        String milestoneId = null;
        GenericResultDeleted response = api.deleteSingleMilestone(contractId, milestoneId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a single milestone
     *
     * Retrieve a single milestone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSingleMilestoneTest() throws ApiException {
        String contractId = null;
        String milestoneId = null;
        MilestoneContainer response = api.getSingleMilestone(contractId, milestoneId)
                .execute();
        // TODO: test validations
    }

    /**
     * List of milestones by contract
     *
     * Retrieve a list of milestones found for a contract.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listByContractTest() throws ApiException {
        String contractId = null;
        MilestoneListContainer response = api.listByContract(contractId)
                .execute();
        // TODO: test validations
    }

    /**
     * Review multiple milestones
     *
     * Review a batch of milestones to approve or reject submitted work.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reviewMultipleTest() throws ApiException {
        MilestoneReviewsToCreate data = null;
        String contractId = null;
        GenericResultCreated response = api.reviewMultiple(data, contractId)
                .execute();
        // TODO: test validations
    }

}
