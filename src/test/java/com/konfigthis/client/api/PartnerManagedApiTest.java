/*
 * Deel REST API
 * API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AdditionalEORInfoContainer;
import com.konfigthis.client.model.BankAccountAddedContainer;
import com.konfigthis.client.model.BankAccountGuideContainer;
import com.konfigthis.client.model.BankAccountToAddContainer;
import com.konfigthis.client.model.BankAccountToAddInner;
import com.konfigthis.client.model.EmployeeAgreementDownloadContainer;
import com.konfigthis.client.model.EmployeeContractSignatureToCreate;
import com.konfigthis.client.model.EmployeeContractSignatureToCreateContainer;
import com.konfigthis.client.model.EmployeePayslipsListContainer;
import com.konfigthis.client.model.EmployeeTaxDocumentsListContainer;
import java.io.File;
import com.konfigthis.client.model.GenericResultCreated;
import com.konfigthis.client.model.GenericResultUpdated;
import com.konfigthis.client.model.GetEmployeeComplianceDocumentTemplateDownloadLinkContainer;
import com.konfigthis.client.model.GetEmployeeComplianceDocumentsContainer;
import com.konfigthis.client.model.HrVerificationLettersAndDocumentsListContainer;
import com.konfigthis.client.model.LetterRequest;
import com.konfigthis.client.model.RequestCustomVerificationLetterContainer;
import com.konfigthis.client.model.RequestCustomVerificationLetterWithFile;
import com.konfigthis.client.model.UploadEmployeeComplianceDocumentContainer;
import com.konfigthis.client.model.UploadEmployeeComplianceDocumentFileContainer;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PartnerManagedApi
 */
@Disabled
public class PartnerManagedApiTest {

    private static PartnerManagedApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new PartnerManagedApi(apiClient);
    }

    /**
     * Add additional information
     *
     * Add additional information for an EOR employee.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addAdditionalInformationForEorEmployeeTest() throws ApiException {
        Object data = null;
        String employeeId = null;
        String contractId = null;
        GenericResultUpdated response = api.addAdditionalInformationForEorEmployee(data, employeeId, contractId)
                .execute();
        // TODO: test validations
    }

    /**
     * Add bank account
     *
     * Add bank account for an EOR employee.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addBankAccountForEorEmployeeTest() throws ApiException {
        List<BankAccountToAddInner> data = null;
        String employeeId = null;
        BankAccountAddedContainer response = api.addBankAccountForEorEmployee(data, employeeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Download employee compliance document template
     *
     * Get the download link for an employee compliance document template, if it exists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadComplianceDocumentTemplateTest() throws ApiException {
        String employeeId = null;
        Double documentId = null;
        GetEmployeeComplianceDocumentTemplateDownloadLinkContainer response = api.downloadComplianceDocumentTemplate(employeeId, documentId)
                .execute();
        // TODO: test validations
    }

    /**
     * Download employee agreement PDF
     *
     * Get link to download the employee agreement PDF.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadEmployeeAgreementPdfTest() throws ApiException {
        String employeeId = null;
        String contractId = null;
        EmployeeAgreementDownloadContainer response = api.downloadEmployeeAgreementPdf(employeeId, contractId)
                .execute();
        // TODO: test validations
    }

    /**
     * Download HR verification letters and documents
     *
     * Retrieve URL to download HR verification letters and documents.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadHrVerificationLettersAndDocumentsTest() throws ApiException {
        String employeeId = null;
        String contractId = null;
        Double documentId = null;
        EmployeeAgreementDownloadContainer response = api.downloadHrVerificationLettersAndDocuments(employeeId, contractId, documentId)
                .execute();
        // TODO: test validations
    }

    /**
     * Bank account form
     *
     * Retrieve bank account form guide for an EOR employee. This data can be used to add a new bank account for an employee.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBankGuideForEorEmployeeTest() throws ApiException {
        String employeeId = null;
        BankAccountGuideContainer response = api.getBankGuideForEorEmployee(employeeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Preview employee agreement
     *
     * Retrieve an EOR Employee Agreement content in HTML.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployeeAgreementHtmlTest() throws ApiException {
        String employeeId = null;
        String contractId = null;
        String response = api.getEmployeeAgreementHtml(employeeId, contractId)
                .execute();
        // TODO: test validations
    }

    /**
     * List of employee compliance documents
     *
     * Get a list of employee compliance documents.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEmployeeComplianceDocumentsTest() throws ApiException {
        String employeeId = null;
        GetEmployeeComplianceDocumentsContainer response = api.listEmployeeComplianceDocuments(employeeId)
                .execute();
        // TODO: test validations
    }

    /**
     * List HR verification letters and documents
     *
     * List all HR verification letters and documents available.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listHrVerificationLettersAndDocumentsTest() throws ApiException {
        String employeeId = null;
        String contractId = null;
        HrVerificationLettersAndDocumentsListContainer response = api.listHrVerificationLettersAndDocuments(employeeId, contractId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get list of payslips for an EOR employee
     *
     * Get list of payslips for an EOR employee.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPayslipsForEorEmployeeTest() throws ApiException {
        String employeeId = null;
        EmployeePayslipsListContainer response = api.listPayslipsForEorEmployee(employeeId)
                .execute();
        // TODO: test validations
    }

    /**
     * List of tax documents for an employee
     *
     * Get list of tax documents for an employee.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTaxDocumentsForEmployeeTest() throws ApiException {
        String employeeId = null;
        EmployeeTaxDocumentsListContainer response = api.listTaxDocumentsForEmployee(employeeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Modify bank account for an EOR employee
     *
     * Modify bank account for an EOR employee.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyBankAccountForEorEmployeeTest() throws ApiException {
        List<BankAccountToAddInner> data = null;
        String employeeId = null;
        String bankId = null;
        BankAccountAddedContainer response = api.modifyBankAccountForEorEmployee(data, employeeId, bankId)
                .execute();
        // TODO: test validations
    }

    /**
     * Preview job offer letter
     *
     * Retrieve an EOR job offer letter in HTML. This endpoint does not support IC and Global Payroll contract types.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void previewJobOfferLetterTest() throws ApiException {
        String employeeId = null;
        String contractId = null;
        String response = api.previewJobOfferLetter(employeeId, contractId)
                .execute();
        // TODO: test validations
    }

    /**
     * Request custom verification letter
     *
     * Request employment verification letters, visa support, bank verification and more.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestCustomVerificationLetterTest() throws ApiException {
        LetterRequest data = null;
        String employeeId = null;
        String contractId = null;
        GenericResultCreated response = api.requestCustomVerificationLetter(data, employeeId, contractId)
                .execute();
        // TODO: test validations
    }

    /**
     * Sign a contract
     *
     * Sign a contract as a employee.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void signContractTest() throws ApiException {
        EmployeeContractSignatureToCreate data = null;
        String employeeId = null;
        String contractId = null;
        GenericResultCreated response = api.signContract(data, employeeId, contractId)
                .execute();
        // TODO: test validations
    }

    /**
     * Upload employee compliance document
     *
     * Upload an employee compliance document.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadComplianceDocumentTest() throws ApiException {
        File _file = null;
        String employeeId = null;
        Double documentId = null;
        UploadEmployeeComplianceDocumentContainer response = api.uploadComplianceDocument(_file, employeeId, documentId)
                .execute();
        // TODO: test validations
    }

}
