/*
 * Deel REST API
 * API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CreateClientUser;
import com.konfigthis.client.model.CreateClientUserName;
import com.konfigthis.client.model.Email;
import com.konfigthis.client.model.EnterpriseUser;
import com.konfigthis.client.model.Name;
import com.konfigthis.client.model.PatchOperation;
import com.konfigthis.client.model.SearchRequest;
import com.konfigthis.client.model.User;
import com.konfigthis.client.model.UserExtension;
import com.konfigthis.client.model.UserMeta;
import com.konfigthis.client.model.UserPatch;
import com.konfigthis.client.model.UserResponse;
import com.konfigthis.client.model.UserSearchResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
@Disabled
public class UserApiTest {

    private static UserApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new UserApi(apiClient);
    }

    /**
     * Create a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        List<String> schemas = null;
        String userName = null;
        CreateClientUserName name = null;
        String userType = null;
        UserResponse response = api.createUser(schemas, userName, name, userType)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        String id = null;
        Object response = api.deleteUser(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a single User
     *
     * Retrieve a single user by id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String id = null;
        UserResponse response = api.getById(id)
                .execute();
        // TODO: test validations
    }

    /**
     * List users
     *
     * Retrieve a list of users in Deel HR.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDeelUsersTest() throws ApiException {
        String filter = null;
        Integer startIndex = null;
        Integer count = null;
        UserSearchResponse response = api.listDeelUsers()
                .filter(filter)
                .startIndex(startIndex)
                .count(count)
                .execute();
        // TODO: test validations
    }

    /**
     * Partially update/patch a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void partiallyUpdateUserTest() throws ApiException {
        List<PatchOperation> operations = null;
        List<String> schemas = null;
        String id = null;
        UserResponse response = api.partiallyUpdateUser(operations, schemas, id)
                .execute();
        // TODO: test validations
    }

    /**
     * Search or list users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchOrListTest() throws ApiException {
        Integer count = null;
        String filter = null;
        List<String> schemas = null;
        Integer startIndex = null;
        UserSearchResponse response = api.searchOrList()
                .count(count)
                .filter(filter)
                .schemas(schemas)
                .startIndex(startIndex)
                .execute();
        // TODO: test validations
    }

    /**
     * Fully update/replace a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserByIdTest() throws ApiException {
        List<Email> emails = null;
        Name name = null;
        List<String> schemas = null;
        String userName = null;
        UserMeta meta = null;
        String id = null;
        String title = null;
        Boolean active = null;
        String userType = null;
        String id = null;
        EnterpriseUser urnColonIetfColonParamsColonScimColonSchemasColonExtensionColonEnterpriseColon20ColonUser = null;
        UserExtension urnColonIetfColonParamsColonScimColonSchemasColonExtensionColon20ColonUser = null;
        UserResponse response = api.updateUserById(emails, name, schemas, userName, meta, id)
                .title(title)
                .active(active)
                .userType(userType)
                .id(id)
                .urnColonIetfColonParamsColonScimColonSchemasColonExtensionColonEnterpriseColon20ColonUser(urnColonIetfColonParamsColonScimColonSchemasColonExtensionColonEnterpriseColon20ColonUser)
                .urnColonIetfColonParamsColonScimColonSchemasColonExtensionColon20ColonUser(urnColonIetfColonParamsColonScimColonSchemasColonExtensionColon20ColonUser)
                .execute();
        // TODO: test validations
    }

}
