/*
 * Deel REST API
 * API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AddWorkerBankAccountContainer;
import com.konfigthis.client.model.BankAccountGuideContainer;
import com.konfigthis.client.model.BankAccountUpdatedContainer;
import com.konfigthis.client.model.GPContractCreatedContainer;
import com.konfigthis.client.model.GPContractToCreate;
import com.konfigthis.client.model.GPContractToCreateContainer;
import com.konfigthis.client.model.GPEmployeeAddressToUpdateContainer;
import com.konfigthis.client.model.GPEmployeeAddressUpdateData;
import com.konfigthis.client.model.GPEmployeeAddressUpdatedContainer;
import com.konfigthis.client.model.GPEmployeeCompensationToUpdateContainer;
import com.konfigthis.client.model.GPEmployeeCompensationUpdateData;
import com.konfigthis.client.model.GPEmployeeCompensationUpdatedContainer;
import com.konfigthis.client.model.GPEmployeeInformationToUpdateContainer;
import com.konfigthis.client.model.GPEmployeeInformationUpdateData;
import com.konfigthis.client.model.GPEmployeeInformationUpdatedContainer;
import com.konfigthis.client.model.GPEmployeePTOToUpdateContainer;
import com.konfigthis.client.model.GPEmployeePTOUpdateData;
import com.konfigthis.client.model.GPPayrollEventReportContainer;
import com.konfigthis.client.model.GPPayslipDownloadUrlContainer;
import com.konfigthis.client.model.GPPayslipsListContainer;
import com.konfigthis.client.model.GenericResultUpdated;
import com.konfigthis.client.model.GlobalPayrollG2NReportContainer;
import java.time.LocalDate;
import java.util.UUID;
import com.konfigthis.client.model.WorkerBankAccountToAdd;
import com.konfigthis.client.model.WorkerBankAccountsInfoContainer;
import com.konfigthis.client.model.WorkerTerminationBody;
import com.konfigthis.client.model.WorkerTerminationBodyContainer;
import com.konfigthis.client.model.WorkerTerminationContainer;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GlobalPayrollApi
 */
@Disabled
public class GlobalPayrollApiTest {

    private static GlobalPayrollApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new GlobalPayrollApi(apiClient);
    }

    /**
     * Add bank account
     *
     * Add a new bank account for an employee.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addBankAccountTest() throws ApiException {
        WorkerBankAccountToAdd data = null;
        String workerId = null;
        BankAccountUpdatedContainer response = api.addBankAccount(data, workerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a contract
     *
     * Create a Global Payroll contract.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createContractGpTest() throws ApiException {
        GPContractToCreate data = null;
        GPContractCreatedContainer response = api.createContractGp(data)
                .execute();
        // TODO: test validations
    }

    /**
     * Download gross-to-net report
     *
     * Download global payroll reports detailing gross-to-net calculations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadGrossToNetGpReportTest() throws ApiException {
        UUID gpReportId = null;
        String response = api.downloadGrossToNetGpReport(gpReportId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve bank accounts
     *
     * Retrieve all bank accounts for an employee.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBankAccountsTest() throws ApiException {
        String workerId = null;
        WorkerBankAccountsInfoContainer response = api.getBankAccounts(workerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve bank guide
     *
     * Retrieve the bank form guide for employee.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBankGuideTest() throws ApiException {
        String workerId = null;
        BankAccountGuideContainer response = api.getBankGuide(workerId)
                .execute();
        // TODO: test validations
    }

    /**
     * List gross-to-net report
     *
     * Get list of global payroll reports detailing gross-to-net calculations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGrossToNetGpReportTest() throws ApiException {
        UUID gpReportId = null;
        GlobalPayrollG2NReportContainer response = api.getGrossToNetGpReport(gpReportId)
                .execute();
        // TODO: test validations
    }

    /**
     * Download payslip PDF
     *
     * Get download url for GP payslip.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayslipDownloadUrlTest() throws ApiException {
        String workerId = null;
        String payslipId = null;
        GPPayslipDownloadUrlContainer response = api.getPayslipDownloadUrl(workerId, payslipId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve employee payslips
     *
     * Get of payslips for an employee.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayslipsTest() throws ApiException {
        String workerId = null;
        GPPayslipsListContainer response = api.getPayslips(workerId)
                .execute();
        // TODO: test validations
    }

    /**
     * List payroll events by legal entity
     *
     * Get list of global payroll events by legal entities.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPayrollEventsByLegalEntityTest() throws ApiException {
        UUID legalEntityId = null;
        LocalDate startDate = null;
        GPPayrollEventReportContainer response = api.listPayrollEventsByLegalEntity(legalEntityId)
                .startDate(startDate)
                .execute();
        // TODO: test validations
    }

    /**
     * Modify bank account
     *
     * Modify bank account for an employee.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyBankAccountTest() throws ApiException {
        WorkerBankAccountToAdd data = null;
        String workerId = null;
        String bankId = null;
        BankAccountUpdatedContainer response = api.modifyBankAccount(data, workerId, bankId)
                .execute();
        // TODO: test validations
    }

    /**
     * Request termination
     *
     * Request a termination for a global payroll employee. A successful call starts the termination process and does not confirm termination.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestTerminationProcessTest() throws ApiException {
        WorkerTerminationBody data = null;
        String workerId = null;
        WorkerTerminationContainer response = api.requestTerminationProcess(data, workerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update compensation
     *
     * Update the compensation of a Global Payroll employee. Returns the full compensation history including the update.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCompensationHistoryTest() throws ApiException {
        GPEmployeeCompensationUpdateData data = null;
        String workerId = null;
        GPEmployeeCompensationUpdatedContainer response = api.updateCompensationHistory(data, workerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update employee information
     *
     * Update Global Payroll employee information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEmployeeInformationTest() throws ApiException {
        GPEmployeeInformationUpdateData data = null;
        String workerId = null;
        GPEmployeeInformationUpdatedContainer response = api.updateEmployeeInformation(data, workerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update PTO policy
     *
     * Update the PTO policy of a Global Payroll employee.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePtoPolicyTest() throws ApiException {
        GPEmployeePTOUpdateData data = null;
        String workerId = null;
        GenericResultUpdated response = api.updatePtoPolicy(data, workerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update address
     *
     * Update the address of a Global Payroll employee.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWorkerAddressTest() throws ApiException {
        GPEmployeeAddressUpdateData data = null;
        String workerId = null;
        GPEmployeeAddressUpdatedContainer response = api.updateWorkerAddress(data, workerId)
                .execute();
        // TODO: test validations
    }

}
