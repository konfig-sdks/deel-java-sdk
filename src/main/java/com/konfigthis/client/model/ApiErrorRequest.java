/*
 * Deel REST API
 * API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ApiErrorRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ApiErrorRequest {
  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private String method;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Double status;

  public static final String SERIALIZED_NAME_API_REQ_ID = "api_req_id";
  @SerializedName(SERIALIZED_NAME_API_REQ_ID)
  private String apiReqId;

  public static final String SERIALIZED_NAME_DOCS = "docs";
  @SerializedName(SERIALIZED_NAME_DOCS)
  private String docs;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private Double code;

  public ApiErrorRequest() {
  }

  public ApiErrorRequest method(String method) {
    
    
    
    
    this.method = method;
    return this;
  }

   /**
   * The HTTP method of the failed request
   * @return method
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "POST", value = "The HTTP method of the failed request")

  public String getMethod() {
    return method;
  }


  public void setMethod(String method) {
    
    
    
    this.method = method;
  }


  public ApiErrorRequest url(String url) {
    
    
    
    
    this.url = url;
    return this;
  }

   /**
   * The relative URL of the failed request
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "/rest/v2/example", value = "The relative URL of the failed request")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    
    
    
    this.url = url;
  }


  public ApiErrorRequest status(Double status) {
    
    
    
    
    this.status = status;
    return this;
  }

  public ApiErrorRequest status(Integer status) {
    
    
    
    
    this.status = status.doubleValue();
    return this;
  }

   /**
   * The status code of the response
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "400", value = "The status code of the response")

  public Double getStatus() {
    return status;
  }


  public void setStatus(Double status) {
    
    
    
    this.status = status;
  }


  public ApiErrorRequest apiReqId(String apiReqId) {
    
    
    
    
    this.apiReqId = apiReqId;
    return this;
  }

   /**
   * The request ID of the failed request
   * @return apiReqId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "00000000-0000-0000-0000-000000000000", value = "The request ID of the failed request")

  public String getApiReqId() {
    return apiReqId;
  }


  public void setApiReqId(String apiReqId) {
    
    
    
    this.apiReqId = apiReqId;
  }


  public ApiErrorRequest docs(String docs) {
    
    
    
    
    this.docs = docs;
    return this;
  }

   /**
   * A link to the official documentation for the requested endpoint resource
   * @return docs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://developer.deel.com/reference/example", value = "A link to the official documentation for the requested endpoint resource")

  public String getDocs() {
    return docs;
  }


  public void setDocs(String docs) {
    
    
    
    this.docs = docs;
  }


  public ApiErrorRequest source(String source) {
    
    
    
    
    this.source = source;
    return this;
  }

   /**
   * The source handler which produced the returned error
   * @return source
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "AJV", value = "The source handler which produced the returned error")

  public String getSource() {
    return source;
  }


  public void setSource(String source) {
    
    
    
    this.source = source;
  }


  public ApiErrorRequest code(Double code) {
    
    
    
    
    this.code = code;
    return this;
  }

  public ApiErrorRequest code(Integer code) {
    
    
    
    
    this.code = code.doubleValue();
    return this;
  }

   /**
   * The code of the source handler which produced the returned error
   * @return code
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3", value = "The code of the source handler which produced the returned error")

  public Double getCode() {
    return code;
  }


  public void setCode(Double code) {
    
    
    
    this.code = code;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ApiErrorRequest instance itself
   */
  public ApiErrorRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiErrorRequest apiErrorRequest = (ApiErrorRequest) o;
    return Objects.equals(this.method, apiErrorRequest.method) &&
        Objects.equals(this.url, apiErrorRequest.url) &&
        Objects.equals(this.status, apiErrorRequest.status) &&
        Objects.equals(this.apiReqId, apiErrorRequest.apiReqId) &&
        Objects.equals(this.docs, apiErrorRequest.docs) &&
        Objects.equals(this.source, apiErrorRequest.source) &&
        Objects.equals(this.code, apiErrorRequest.code)&&
        Objects.equals(this.additionalProperties, apiErrorRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(method, url, status, apiReqId, docs, source, code, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiErrorRequest {\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    apiReqId: ").append(toIndentedString(apiReqId)).append("\n");
    sb.append("    docs: ").append(toIndentedString(docs)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("method");
    openapiFields.add("url");
    openapiFields.add("status");
    openapiFields.add("api_req_id");
    openapiFields.add("docs");
    openapiFields.add("source");
    openapiFields.add("code");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ApiErrorRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ApiErrorRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiErrorRequest is not found in the empty JSON string", ApiErrorRequest.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) && !jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("api_req_id") != null && !jsonObj.get("api_req_id").isJsonNull()) && !jsonObj.get("api_req_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api_req_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api_req_id").toString()));
      }
      if ((jsonObj.get("docs") != null && !jsonObj.get("docs").isJsonNull()) && !jsonObj.get("docs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `docs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("docs").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiErrorRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiErrorRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiErrorRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiErrorRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiErrorRequest>() {
           @Override
           public void write(JsonWriter out, ApiErrorRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiErrorRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ApiErrorRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApiErrorRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApiErrorRequest
  * @throws IOException if the JSON string is invalid with respect to ApiErrorRequest
  */
  public static ApiErrorRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiErrorRequest.class);
  }

 /**
  * Convert an instance of ApiErrorRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

