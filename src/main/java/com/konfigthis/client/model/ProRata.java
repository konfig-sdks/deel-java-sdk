/*
 * Deel REST API
 * API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.WeekDaysEnum;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Details of the pro rata for the first payment
 */
@ApiModel(description = "Details of the pro rata for the first payment")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ProRata {
  /**
   * Either works days or calendar days
   */
  @JsonAdapter(CalculationTypeEnum.Adapter.class)
 public enum CalculationTypeEnum {
    CUSTOM_AMOUNT("CUSTOM_AMOUNT"),
    
    WORK_DAYS("WORK_DAYS"),
    
    CALENDAR_DAYS("CALENDAR_DAYS"),
    
    FULL_AMOUNT("FULL_AMOUNT");

    private String value;

    CalculationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CalculationTypeEnum fromValue(String value) {
      for (CalculationTypeEnum b : CalculationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CalculationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CalculationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CalculationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CalculationTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CALCULATION_TYPE = "calculation_type";
  @SerializedName(SERIALIZED_NAME_CALCULATION_TYPE)
  private CalculationTypeEnum calculationType;

  public static final String SERIALIZED_NAME_RATE = "rate";
  @SerializedName(SERIALIZED_NAME_RATE)
  private Double rate;

  public static final String SERIALIZED_NAME_DAILY_RATE = "daily_rate";
  @SerializedName(SERIALIZED_NAME_DAILY_RATE)
  private Double dailyRate;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Double total;

  public static final String SERIALIZED_NAME_CYCLE_WORK_DAYS = "cycle_work_days";
  @SerializedName(SERIALIZED_NAME_CYCLE_WORK_DAYS)
  private Double cycleWorkDays;

  public static final String SERIALIZED_NAME_WORK_WEEK_START = "work_week_start";
  @SerializedName(SERIALIZED_NAME_WORK_WEEK_START)
  private WeekDaysEnum workWeekStart;

  public static final String SERIALIZED_NAME_WORK_WEEK_END = "work_week_end";
  @SerializedName(SERIALIZED_NAME_WORK_WEEK_END)
  private WeekDaysEnum workWeekEnd;

  public static final String SERIALIZED_NAME_CYCLE_START = "cycle_start";
  @SerializedName(SERIALIZED_NAME_CYCLE_START)
  private LocalDate cycleStart;

  public static final String SERIALIZED_NAME_CYCLE_END = "cycle_end";
  @SerializedName(SERIALIZED_NAME_CYCLE_END)
  private LocalDate cycleEnd;

  public ProRata() {
  }

  public ProRata calculationType(CalculationTypeEnum calculationType) {
    
    
    
    
    this.calculationType = calculationType;
    return this;
  }

   /**
   * Either works days or calendar days
   * @return calculationType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Either works days or calendar days")

  public CalculationTypeEnum getCalculationType() {
    return calculationType;
  }


  public void setCalculationType(CalculationTypeEnum calculationType) {
    
    
    
    this.calculationType = calculationType;
  }


  public ProRata rate(Double rate) {
    if (rate != null && rate < 0) {
      throw new IllegalArgumentException("Invalid value for rate. Must be greater than or equal to 0.");
    }
    
    
    
    this.rate = rate;
    return this;
  }

  public ProRata rate(Integer rate) {
    if (rate != null && rate < 0) {
      throw new IllegalArgumentException("Invalid value for rate. Must be greater than or equal to 0.");
    }
    
    
    
    this.rate = rate.doubleValue();
    return this;
  }

   /**
   * Rate to be paid.
   * minimum: 0
   * @return rate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2500", value = "Rate to be paid.")

  public Double getRate() {
    return rate;
  }


  public void setRate(Double rate) {
    if (rate != null && rate < 0) {
      throw new IllegalArgumentException("Invalid value for rate. Must be greater than or equal to 0.");
    }
    
    
    this.rate = rate;
  }


  public ProRata dailyRate(Double dailyRate) {
    if (dailyRate != null && dailyRate < 0) {
      throw new IllegalArgumentException("Invalid value for dailyRate. Must be greater than or equal to 0.");
    }
    
    
    
    this.dailyRate = dailyRate;
    return this;
  }

  public ProRata dailyRate(Integer dailyRate) {
    if (dailyRate != null && dailyRate < 0) {
      throw new IllegalArgumentException("Invalid value for dailyRate. Must be greater than or equal to 0.");
    }
    
    
    
    this.dailyRate = dailyRate.doubleValue();
    return this;
  }

   /**
   * Daily rate to be paid.
   * minimum: 0
   * @return dailyRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2500", value = "Daily rate to be paid.")

  public Double getDailyRate() {
    return dailyRate;
  }


  public void setDailyRate(Double dailyRate) {
    if (dailyRate != null && dailyRate < 0) {
      throw new IllegalArgumentException("Invalid value for dailyRate. Must be greater than or equal to 0.");
    }
    
    
    this.dailyRate = dailyRate;
  }


  public ProRata total(Double total) {
    if (total != null && total < 0) {
      throw new IllegalArgumentException("Invalid value for total. Must be greater than or equal to 0.");
    }
    
    
    
    this.total = total;
    return this;
  }

  public ProRata total(Integer total) {
    if (total != null && total < 0) {
      throw new IllegalArgumentException("Invalid value for total. Must be greater than or equal to 0.");
    }
    
    
    
    this.total = total.doubleValue();
    return this;
  }

   /**
   * Total to be paid.
   * minimum: 0
   * @return total
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2500", value = "Total to be paid.")

  public Double getTotal() {
    return total;
  }


  public void setTotal(Double total) {
    if (total != null && total < 0) {
      throw new IllegalArgumentException("Invalid value for total. Must be greater than or equal to 0.");
    }
    
    
    this.total = total;
  }


  public ProRata cycleWorkDays(Double cycleWorkDays) {
    if (cycleWorkDays != null && cycleWorkDays < 0) {
      throw new IllegalArgumentException("Invalid value for cycleWorkDays. Must be greater than or equal to 0.");
    }
    
    
    
    this.cycleWorkDays = cycleWorkDays;
    return this;
  }

  public ProRata cycleWorkDays(Integer cycleWorkDays) {
    if (cycleWorkDays != null && cycleWorkDays < 0) {
      throw new IllegalArgumentException("Invalid value for cycleWorkDays. Must be greater than or equal to 0.");
    }
    
    
    
    this.cycleWorkDays = cycleWorkDays.doubleValue();
    return this;
  }

   /**
   * Total days to be work.
   * minimum: 0
   * @return cycleWorkDays
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "11", value = "Total days to be work.")

  public Double getCycleWorkDays() {
    return cycleWorkDays;
  }


  public void setCycleWorkDays(Double cycleWorkDays) {
    if (cycleWorkDays != null && cycleWorkDays < 0) {
      throw new IllegalArgumentException("Invalid value for cycleWorkDays. Must be greater than or equal to 0.");
    }
    
    
    this.cycleWorkDays = cycleWorkDays;
  }


  public ProRata workWeekStart(WeekDaysEnum workWeekStart) {
    
    
    
    
    this.workWeekStart = workWeekStart;
    return this;
  }

   /**
   * Get workWeekStart
   * @return workWeekStart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public WeekDaysEnum getWorkWeekStart() {
    return workWeekStart;
  }


  public void setWorkWeekStart(WeekDaysEnum workWeekStart) {
    
    
    
    this.workWeekStart = workWeekStart;
  }


  public ProRata workWeekEnd(WeekDaysEnum workWeekEnd) {
    
    
    
    
    this.workWeekEnd = workWeekEnd;
    return this;
  }

   /**
   * Get workWeekEnd
   * @return workWeekEnd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public WeekDaysEnum getWorkWeekEnd() {
    return workWeekEnd;
  }


  public void setWorkWeekEnd(WeekDaysEnum workWeekEnd) {
    
    
    
    this.workWeekEnd = workWeekEnd;
  }


  public ProRata cycleStart(LocalDate cycleStart) {
    
    
    
    
    this.cycleStart = cycleStart;
    return this;
  }

   /**
   * Short date in format ISO-8601 (YYYY-MM-DD). For example: 2022-12-31.
   * @return cycleStart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Short date in format ISO-8601 (YYYY-MM-DD). For example: 2022-12-31.")

  public LocalDate getCycleStart() {
    return cycleStart;
  }


  public void setCycleStart(LocalDate cycleStart) {
    
    
    
    this.cycleStart = cycleStart;
  }


  public ProRata cycleEnd(LocalDate cycleEnd) {
    
    
    
    
    this.cycleEnd = cycleEnd;
    return this;
  }

   /**
   * Short date in format ISO-8601 (YYYY-MM-DD). For example: 2022-12-31.
   * @return cycleEnd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Short date in format ISO-8601 (YYYY-MM-DD). For example: 2022-12-31.")

  public LocalDate getCycleEnd() {
    return cycleEnd;
  }


  public void setCycleEnd(LocalDate cycleEnd) {
    
    
    
    this.cycleEnd = cycleEnd;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ProRata instance itself
   */
  public ProRata putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProRata proRata = (ProRata) o;
    return Objects.equals(this.calculationType, proRata.calculationType) &&
        Objects.equals(this.rate, proRata.rate) &&
        Objects.equals(this.dailyRate, proRata.dailyRate) &&
        Objects.equals(this.total, proRata.total) &&
        Objects.equals(this.cycleWorkDays, proRata.cycleWorkDays) &&
        Objects.equals(this.workWeekStart, proRata.workWeekStart) &&
        Objects.equals(this.workWeekEnd, proRata.workWeekEnd) &&
        Objects.equals(this.cycleStart, proRata.cycleStart) &&
        Objects.equals(this.cycleEnd, proRata.cycleEnd)&&
        Objects.equals(this.additionalProperties, proRata.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(calculationType, rate, dailyRate, total, cycleWorkDays, workWeekStart, workWeekEnd, cycleStart, cycleEnd, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProRata {\n");
    sb.append("    calculationType: ").append(toIndentedString(calculationType)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    dailyRate: ").append(toIndentedString(dailyRate)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    cycleWorkDays: ").append(toIndentedString(cycleWorkDays)).append("\n");
    sb.append("    workWeekStart: ").append(toIndentedString(workWeekStart)).append("\n");
    sb.append("    workWeekEnd: ").append(toIndentedString(workWeekEnd)).append("\n");
    sb.append("    cycleStart: ").append(toIndentedString(cycleStart)).append("\n");
    sb.append("    cycleEnd: ").append(toIndentedString(cycleEnd)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("calculation_type");
    openapiFields.add("rate");
    openapiFields.add("daily_rate");
    openapiFields.add("total");
    openapiFields.add("cycle_work_days");
    openapiFields.add("work_week_start");
    openapiFields.add("work_week_end");
    openapiFields.add("cycle_start");
    openapiFields.add("cycle_end");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ProRata
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ProRata.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProRata is not found in the empty JSON string", ProRata.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("calculation_type") != null && !jsonObj.get("calculation_type").isJsonNull()) && !jsonObj.get("calculation_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `calculation_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("calculation_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProRata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProRata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProRata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProRata.class));

       return (TypeAdapter<T>) new TypeAdapter<ProRata>() {
           @Override
           public void write(JsonWriter out, ProRata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ProRata read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ProRata instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProRata given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProRata
  * @throws IOException if the JSON string is invalid with respect to ProRata
  */
  public static ProRata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProRata.class);
  }

 /**
  * Convert an instance of ProRata to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

