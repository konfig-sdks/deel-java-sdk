/*
 * Deel REST API
 * API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EorEmployeeCostCalculationResponseAdditionalData;
import com.konfigthis.client.model.EorEmployeeCostCalculationResponseBenefitsDataInner;
import com.konfigthis.client.model.EorEmployeeCostCalculationResponseCostsInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EorEmployeeCostCalculationResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EorEmployeeCostCalculationResponse {
  public static final String SERIALIZED_NAME_SALARY = "salary";
  @SerializedName(SERIALIZED_NAME_SALARY)
  private String salary;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "country_code";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_FREQUENCY = "frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  private String frequency;

  public static final String SERIALIZED_NAME_DEEL_FEE = "deel_fee";
  @SerializedName(SERIALIZED_NAME_DEEL_FEE)
  private String deelFee;

  public static final String SERIALIZED_NAME_SEVERANCE_ACCRUAL = "severance_accrual";
  @SerializedName(SERIALIZED_NAME_SEVERANCE_ACCRUAL)
  private String severanceAccrual;

  public static final String SERIALIZED_NAME_TOTAL_COSTS = "total_costs";
  @SerializedName(SERIALIZED_NAME_TOTAL_COSTS)
  private String totalCosts;

  public static final String SERIALIZED_NAME_EMPLOYER_COSTS = "employer_costs";
  @SerializedName(SERIALIZED_NAME_EMPLOYER_COSTS)
  private String employerCosts;

  public static final String SERIALIZED_NAME_COSTS = "costs";
  @SerializedName(SERIALIZED_NAME_COSTS)
  private List<EorEmployeeCostCalculationResponseCostsInner> costs = null;

  public static final String SERIALIZED_NAME_ADDITIONAL_DATA = "additional_data";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_DATA)
  private EorEmployeeCostCalculationResponseAdditionalData additionalData;

  public static final String SERIALIZED_NAME_BENEFITS_DATA = "benefits_data";
  @SerializedName(SERIALIZED_NAME_BENEFITS_DATA)
  private List<EorEmployeeCostCalculationResponseBenefitsDataInner> benefitsData = null;

  public EorEmployeeCostCalculationResponse() {
  }

  public EorEmployeeCostCalculationResponse salary(String salary) {
    
    
    
    
    this.salary = salary;
    return this;
  }

   /**
   * The gross annual salary of the employee.
   * @return salary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5000", value = "The gross annual salary of the employee.")

  public String getSalary() {
    return salary;
  }


  public void setSalary(String salary) {
    
    
    
    this.salary = salary;
  }


  public EorEmployeeCostCalculationResponse currency(String currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * The currency of the employee salary.
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "EUR", value = "The currency of the employee salary.")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    
    
    
    this.currency = currency;
  }


  public EorEmployeeCostCalculationResponse country(String country) {
    
    
    
    
    this.country = country;
    return this;
  }

   /**
   * The country of employment.
   * @return country
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Germany", value = "The country of employment.")

  public String getCountry() {
    return country;
  }


  public void setCountry(String country) {
    
    
    
    this.country = country;
  }


  public EorEmployeeCostCalculationResponse countryCode(String countryCode) {
    
    
    
    
    this.countryCode = countryCode;
    return this;
  }

   /**
   * The country code for the country of employment.
   * @return countryCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "DE", value = "The country code for the country of employment.")

  public String getCountryCode() {
    return countryCode;
  }


  public void setCountryCode(String countryCode) {
    
    
    
    this.countryCode = countryCode;
  }


  public EorEmployeeCostCalculationResponse frequency(String frequency) {
    
    
    
    
    this.frequency = frequency;
    return this;
  }

   /**
   * The frequency that the salary is paid out to the employee.
   * @return frequency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Monthly", value = "The frequency that the salary is paid out to the employee.")

  public String getFrequency() {
    return frequency;
  }


  public void setFrequency(String frequency) {
    
    
    
    this.frequency = frequency;
  }


  public EorEmployeeCostCalculationResponse deelFee(String deelFee) {
    
    
    
    
    this.deelFee = deelFee;
    return this;
  }

   /**
   * The monthly Deel fee.
   * @return deelFee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "500", value = "The monthly Deel fee.")

  public String getDeelFee() {
    return deelFee;
  }


  public void setDeelFee(String deelFee) {
    
    
    
    this.deelFee = deelFee;
  }


  public EorEmployeeCostCalculationResponse severanceAccrual(String severanceAccrual) {
    
    
    
    
    this.severanceAccrual = severanceAccrual;
    return this;
  }

   /**
   * Monthly funds to cover future potential severance payments to the employee.
   * @return severanceAccrual
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1000", value = "Monthly funds to cover future potential severance payments to the employee.")

  public String getSeveranceAccrual() {
    return severanceAccrual;
  }


  public void setSeveranceAccrual(String severanceAccrual) {
    
    
    
    this.severanceAccrual = severanceAccrual;
  }


  public EorEmployeeCostCalculationResponse totalCosts(String totalCosts) {
    
    
    
    
    this.totalCosts = totalCosts;
    return this;
  }

   /**
   * Total monthly cost including salary, Deel fee, severance accrual and employer costs.
   * @return totalCosts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "10000", value = "Total monthly cost including salary, Deel fee, severance accrual and employer costs.")

  public String getTotalCosts() {
    return totalCosts;
  }


  public void setTotalCosts(String totalCosts) {
    
    
    
    this.totalCosts = totalCosts;
  }


  public EorEmployeeCostCalculationResponse employerCosts(String employerCosts) {
    
    
    
    
    this.employerCosts = employerCosts;
    return this;
  }

   /**
   * Total monthly employer costs. Does not include Deel fee, salary and severance accrual.
   * @return employerCosts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1000", value = "Total monthly employer costs. Does not include Deel fee, salary and severance accrual.")

  public String getEmployerCosts() {
    return employerCosts;
  }


  public void setEmployerCosts(String employerCosts) {
    
    
    
    this.employerCosts = employerCosts;
  }


  public EorEmployeeCostCalculationResponse costs(List<EorEmployeeCostCalculationResponseCostsInner> costs) {
    
    
    
    
    this.costs = costs;
    return this;
  }

  public EorEmployeeCostCalculationResponse addCostsItem(EorEmployeeCostCalculationResponseCostsInner costsItem) {
    if (this.costs == null) {
      this.costs = new ArrayList<>();
    }
    this.costs.add(costsItem);
    return this;
  }

   /**
   * The various costs associated with employment in the specified country.
   * @return costs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The various costs associated with employment in the specified country.")

  public List<EorEmployeeCostCalculationResponseCostsInner> getCosts() {
    return costs;
  }


  public void setCosts(List<EorEmployeeCostCalculationResponseCostsInner> costs) {
    
    
    
    this.costs = costs;
  }


  public EorEmployeeCostCalculationResponse additionalData(EorEmployeeCostCalculationResponseAdditionalData additionalData) {
    
    
    
    
    this.additionalData = additionalData;
    return this;
  }

   /**
   * Get additionalData
   * @return additionalData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EorEmployeeCostCalculationResponseAdditionalData getAdditionalData() {
    return additionalData;
  }


  public void setAdditionalData(EorEmployeeCostCalculationResponseAdditionalData additionalData) {
    
    
    
    this.additionalData = additionalData;
  }


  public EorEmployeeCostCalculationResponse benefitsData(List<EorEmployeeCostCalculationResponseBenefitsDataInner> benefitsData) {
    
    
    
    
    this.benefitsData = benefitsData;
    return this;
  }

  public EorEmployeeCostCalculationResponse addBenefitsDataItem(EorEmployeeCostCalculationResponseBenefitsDataInner benefitsDataItem) {
    if (this.benefitsData == null) {
      this.benefitsData = new ArrayList<>();
    }
    this.benefitsData.add(benefitsDataItem);
    return this;
  }

   /**
   * The various benefits costs involved in the calculation, if any.
   * @return benefitsData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The various benefits costs involved in the calculation, if any.")

  public List<EorEmployeeCostCalculationResponseBenefitsDataInner> getBenefitsData() {
    return benefitsData;
  }


  public void setBenefitsData(List<EorEmployeeCostCalculationResponseBenefitsDataInner> benefitsData) {
    
    
    
    this.benefitsData = benefitsData;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EorEmployeeCostCalculationResponse instance itself
   */
  public EorEmployeeCostCalculationResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EorEmployeeCostCalculationResponse eorEmployeeCostCalculationResponse = (EorEmployeeCostCalculationResponse) o;
    return Objects.equals(this.salary, eorEmployeeCostCalculationResponse.salary) &&
        Objects.equals(this.currency, eorEmployeeCostCalculationResponse.currency) &&
        Objects.equals(this.country, eorEmployeeCostCalculationResponse.country) &&
        Objects.equals(this.countryCode, eorEmployeeCostCalculationResponse.countryCode) &&
        Objects.equals(this.frequency, eorEmployeeCostCalculationResponse.frequency) &&
        Objects.equals(this.deelFee, eorEmployeeCostCalculationResponse.deelFee) &&
        Objects.equals(this.severanceAccrual, eorEmployeeCostCalculationResponse.severanceAccrual) &&
        Objects.equals(this.totalCosts, eorEmployeeCostCalculationResponse.totalCosts) &&
        Objects.equals(this.employerCosts, eorEmployeeCostCalculationResponse.employerCosts) &&
        Objects.equals(this.costs, eorEmployeeCostCalculationResponse.costs) &&
        Objects.equals(this.additionalData, eorEmployeeCostCalculationResponse.additionalData) &&
        Objects.equals(this.benefitsData, eorEmployeeCostCalculationResponse.benefitsData)&&
        Objects.equals(this.additionalProperties, eorEmployeeCostCalculationResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(salary, currency, country, countryCode, frequency, deelFee, severanceAccrual, totalCosts, employerCosts, costs, additionalData, benefitsData, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EorEmployeeCostCalculationResponse {\n");
    sb.append("    salary: ").append(toIndentedString(salary)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    deelFee: ").append(toIndentedString(deelFee)).append("\n");
    sb.append("    severanceAccrual: ").append(toIndentedString(severanceAccrual)).append("\n");
    sb.append("    totalCosts: ").append(toIndentedString(totalCosts)).append("\n");
    sb.append("    employerCosts: ").append(toIndentedString(employerCosts)).append("\n");
    sb.append("    costs: ").append(toIndentedString(costs)).append("\n");
    sb.append("    additionalData: ").append(toIndentedString(additionalData)).append("\n");
    sb.append("    benefitsData: ").append(toIndentedString(benefitsData)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("salary");
    openapiFields.add("currency");
    openapiFields.add("country");
    openapiFields.add("country_code");
    openapiFields.add("frequency");
    openapiFields.add("deel_fee");
    openapiFields.add("severance_accrual");
    openapiFields.add("total_costs");
    openapiFields.add("employer_costs");
    openapiFields.add("costs");
    openapiFields.add("additional_data");
    openapiFields.add("benefits_data");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EorEmployeeCostCalculationResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EorEmployeeCostCalculationResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EorEmployeeCostCalculationResponse is not found in the empty JSON string", EorEmployeeCostCalculationResponse.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("salary") != null && !jsonObj.get("salary").isJsonNull()) && !jsonObj.get("salary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `salary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("salary").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("country_code") != null && !jsonObj.get("country_code").isJsonNull()) && !jsonObj.get("country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_code").toString()));
      }
      if ((jsonObj.get("frequency") != null && !jsonObj.get("frequency").isJsonNull()) && !jsonObj.get("frequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frequency").toString()));
      }
      if ((jsonObj.get("deel_fee") != null && !jsonObj.get("deel_fee").isJsonNull()) && !jsonObj.get("deel_fee").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deel_fee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deel_fee").toString()));
      }
      if ((jsonObj.get("severance_accrual") != null && !jsonObj.get("severance_accrual").isJsonNull()) && !jsonObj.get("severance_accrual").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severance_accrual` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severance_accrual").toString()));
      }
      if ((jsonObj.get("total_costs") != null && !jsonObj.get("total_costs").isJsonNull()) && !jsonObj.get("total_costs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `total_costs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total_costs").toString()));
      }
      if ((jsonObj.get("employer_costs") != null && !jsonObj.get("employer_costs").isJsonNull()) && !jsonObj.get("employer_costs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employer_costs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employer_costs").toString()));
      }
      if (jsonObj.get("costs") != null && !jsonObj.get("costs").isJsonNull()) {
        JsonArray jsonArraycosts = jsonObj.getAsJsonArray("costs");
        if (jsonArraycosts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("costs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `costs` to be an array in the JSON string but got `%s`", jsonObj.get("costs").toString()));
          }

          // validate the optional field `costs` (array)
          for (int i = 0; i < jsonArraycosts.size(); i++) {
            EorEmployeeCostCalculationResponseCostsInner.validateJsonObject(jsonArraycosts.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `additional_data`
      if (jsonObj.get("additional_data") != null && !jsonObj.get("additional_data").isJsonNull()) {
        EorEmployeeCostCalculationResponseAdditionalData.validateJsonObject(jsonObj.getAsJsonObject("additional_data"));
      }
      if (jsonObj.get("benefits_data") != null && !jsonObj.get("benefits_data").isJsonNull()) {
        JsonArray jsonArraybenefitsData = jsonObj.getAsJsonArray("benefits_data");
        if (jsonArraybenefitsData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("benefits_data").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `benefits_data` to be an array in the JSON string but got `%s`", jsonObj.get("benefits_data").toString()));
          }

          // validate the optional field `benefits_data` (array)
          for (int i = 0; i < jsonArraybenefitsData.size(); i++) {
            EorEmployeeCostCalculationResponseBenefitsDataInner.validateJsonObject(jsonArraybenefitsData.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EorEmployeeCostCalculationResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EorEmployeeCostCalculationResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EorEmployeeCostCalculationResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EorEmployeeCostCalculationResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<EorEmployeeCostCalculationResponse>() {
           @Override
           public void write(JsonWriter out, EorEmployeeCostCalculationResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EorEmployeeCostCalculationResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EorEmployeeCostCalculationResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EorEmployeeCostCalculationResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EorEmployeeCostCalculationResponse
  * @throws IOException if the JSON string is invalid with respect to EorEmployeeCostCalculationResponse
  */
  public static EorEmployeeCostCalculationResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EorEmployeeCostCalculationResponse.class);
  }

 /**
  * Convert an instance of EorEmployeeCostCalculationResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

