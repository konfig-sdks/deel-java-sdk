/*
 * Deel REST API
 * API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * GlobalPayrollG2NReport
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class GlobalPayrollG2NReport {
  public static final String SERIALIZED_NAME_NET_PAY = "net_pay";
  @SerializedName(SERIALIZED_NAME_NET_PAY)
  private String netPay;

  public static final String SERIALIZED_NAME_EE_LOANS = "ee_loans";
  @SerializedName(SERIALIZED_NAME_EE_LOANS)
  private String eeLoans;

  public static final String SERIALIZED_NAME_CONTRACT_ID = "contract_id";
  @SerializedName(SERIALIZED_NAME_CONTRACT_ID)
  private String contractId;

  public static final String SERIALIZED_NAME_ANNUAL_BONUS = "annual_bonus";
  @SerializedName(SERIALIZED_NAME_ANNUAL_BONUS)
  private Double annualBonus;

  public static final String SERIALIZED_NAME_CAR_ALLOWANCE = "car_allowance";
  @SerializedName(SERIALIZED_NAME_CAR_ALLOWANCE)
  private Double carAllowance;

  public static final String SERIALIZED_NAME_ESP_DEDUCTION = "esp_deduction";
  @SerializedName(SERIALIZED_NAME_ESP_DEDUCTION)
  private Double espDeduction;

  public static final String SERIALIZED_NAME_EMPLOYEE_NAME = "employee_name";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_NAME)
  private String employeeName;

  public static final String SERIALIZED_NAME_EMPLOYER_COST = "employer_cost";
  @SerializedName(SERIALIZED_NAME_EMPLOYER_COST)
  private String employerCost;

  public static final String SERIALIZED_NAME_FUNDING_AMOUNT = "funding_amount";
  @SerializedName(SERIALIZED_NAME_FUNDING_AMOUNT)
  private Double fundingAmount;

  public static final String SERIALIZED_NAME_HOME_ALLOWANCE = "home_allowance";
  @SerializedName(SERIALIZED_NAME_HOME_ALLOWANCE)
  private String homeAllowance;

  public static final String SERIALIZED_NAME_EE_INCOME_TAX = "ee_income_tax";
  @SerializedName(SERIALIZED_NAME_EE_INCOME_TAX)
  private String eeIncomeTax;

  public static final String SERIALIZED_NAME_EMPLOYEE_NUMBER = "employee_number";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_NUMBER)
  private Double employeeNumber;

  public static final String SERIALIZED_NAME_BACKDATED_SALARY = "backdated_salary";
  @SerializedName(SERIALIZED_NAME_BACKDATED_SALARY)
  private String backdatedSalary;

  public static final String SERIALIZED_NAME_EMPLOYER_CONTRIBUTION = "employer_contribution";
  @SerializedName(SERIALIZED_NAME_EMPLOYER_CONTRIBUTION)
  private String employerContribution;

  public static final String SERIALIZED_NAME_ER_OCCUPATIONAL_RISK = "er_occupational_risk";
  @SerializedName(SERIALIZED_NAME_ER_OCCUPATIONAL_RISK)
  private String erOccupationalRisk;

  public static final String SERIALIZED_NAME_EMPLOYMENT_STATUS_TAG_INTERNAL = "employment_status_tag_internal";
  @SerializedName(SERIALIZED_NAME_EMPLOYMENT_STATUS_TAG_INTERNAL)
  private String employmentStatusTagInternal;

  public static final String SERIALIZED_NAME_EMPLOYEE_JOB_TITLE = "employee_job_title";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_JOB_TITLE)
  private String employeeJobTitle;

  public static final String SERIALIZED_NAME_EMPLOYEE_DIVISION = "employee_division";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_DIVISION)
  private String employeeDivision;

  public static final String SERIALIZED_NAME_EMPLOYEE_DEPARTMENT = "employee_department";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_DEPARTMENT)
  private String employeeDepartment;

  public static final String SERIALIZED_NAME_PENSION_CONTRIBUTION = "pension_contribution";
  @SerializedName(SERIALIZED_NAME_PENSION_CONTRIBUTION)
  private Double pensionContribution;

  public static final String SERIALIZED_NAME_COST_CENTER = "cost_center";
  @SerializedName(SERIALIZED_NAME_COST_CENTER)
  private String costCenter;

  public GlobalPayrollG2NReport() {
  }

  public GlobalPayrollG2NReport netPay(String netPay) {
    
    
    
    
    this.netPay = netPay;
    return this;
  }

   /**
   * Get netPay
   * @return netPay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNetPay() {
    return netPay;
  }


  public void setNetPay(String netPay) {
    
    
    
    this.netPay = netPay;
  }


  public GlobalPayrollG2NReport eeLoans(String eeLoans) {
    
    
    
    
    this.eeLoans = eeLoans;
    return this;
  }

   /**
   * Get eeLoans
   * @return eeLoans
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEeLoans() {
    return eeLoans;
  }


  public void setEeLoans(String eeLoans) {
    
    
    
    this.eeLoans = eeLoans;
  }


  public GlobalPayrollG2NReport contractId(String contractId) {
    
    
    
    
    this.contractId = contractId;
    return this;
  }

   /**
   * Get contractId
   * @return contractId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getContractId() {
    return contractId;
  }


  public void setContractId(String contractId) {
    
    
    
    this.contractId = contractId;
  }


  public GlobalPayrollG2NReport annualBonus(Double annualBonus) {
    
    
    
    
    this.annualBonus = annualBonus;
    return this;
  }

  public GlobalPayrollG2NReport annualBonus(Integer annualBonus) {
    
    
    
    
    this.annualBonus = annualBonus.doubleValue();
    return this;
  }

   /**
   * Get annualBonus
   * @return annualBonus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getAnnualBonus() {
    return annualBonus;
  }


  public void setAnnualBonus(Double annualBonus) {
    
    
    
    this.annualBonus = annualBonus;
  }


  public GlobalPayrollG2NReport carAllowance(Double carAllowance) {
    
    
    
    
    this.carAllowance = carAllowance;
    return this;
  }

  public GlobalPayrollG2NReport carAllowance(Integer carAllowance) {
    
    
    
    
    this.carAllowance = carAllowance.doubleValue();
    return this;
  }

   /**
   * Get carAllowance
   * @return carAllowance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getCarAllowance() {
    return carAllowance;
  }


  public void setCarAllowance(Double carAllowance) {
    
    
    
    this.carAllowance = carAllowance;
  }


  public GlobalPayrollG2NReport espDeduction(Double espDeduction) {
    
    
    
    
    this.espDeduction = espDeduction;
    return this;
  }

  public GlobalPayrollG2NReport espDeduction(Integer espDeduction) {
    
    
    
    
    this.espDeduction = espDeduction.doubleValue();
    return this;
  }

   /**
   * Get espDeduction
   * @return espDeduction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getEspDeduction() {
    return espDeduction;
  }


  public void setEspDeduction(Double espDeduction) {
    
    
    
    this.espDeduction = espDeduction;
  }


  public GlobalPayrollG2NReport employeeName(String employeeName) {
    
    
    
    
    this.employeeName = employeeName;
    return this;
  }

   /**
   * Get employeeName
   * @return employeeName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmployeeName() {
    return employeeName;
  }


  public void setEmployeeName(String employeeName) {
    
    
    
    this.employeeName = employeeName;
  }


  public GlobalPayrollG2NReport employerCost(String employerCost) {
    
    
    
    
    this.employerCost = employerCost;
    return this;
  }

   /**
   * Get employerCost
   * @return employerCost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmployerCost() {
    return employerCost;
  }


  public void setEmployerCost(String employerCost) {
    
    
    
    this.employerCost = employerCost;
  }


  public GlobalPayrollG2NReport fundingAmount(Double fundingAmount) {
    
    
    
    
    this.fundingAmount = fundingAmount;
    return this;
  }

  public GlobalPayrollG2NReport fundingAmount(Integer fundingAmount) {
    
    
    
    
    this.fundingAmount = fundingAmount.doubleValue();
    return this;
  }

   /**
   * Get fundingAmount
   * @return fundingAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getFundingAmount() {
    return fundingAmount;
  }


  public void setFundingAmount(Double fundingAmount) {
    
    
    
    this.fundingAmount = fundingAmount;
  }


  public GlobalPayrollG2NReport homeAllowance(String homeAllowance) {
    
    
    
    
    this.homeAllowance = homeAllowance;
    return this;
  }

   /**
   * Get homeAllowance
   * @return homeAllowance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getHomeAllowance() {
    return homeAllowance;
  }


  public void setHomeAllowance(String homeAllowance) {
    
    
    
    this.homeAllowance = homeAllowance;
  }


  public GlobalPayrollG2NReport eeIncomeTax(String eeIncomeTax) {
    
    
    
    
    this.eeIncomeTax = eeIncomeTax;
    return this;
  }

   /**
   * Get eeIncomeTax
   * @return eeIncomeTax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEeIncomeTax() {
    return eeIncomeTax;
  }


  public void setEeIncomeTax(String eeIncomeTax) {
    
    
    
    this.eeIncomeTax = eeIncomeTax;
  }


  public GlobalPayrollG2NReport employeeNumber(Double employeeNumber) {
    
    
    
    
    this.employeeNumber = employeeNumber;
    return this;
  }

  public GlobalPayrollG2NReport employeeNumber(Integer employeeNumber) {
    
    
    
    
    this.employeeNumber = employeeNumber.doubleValue();
    return this;
  }

   /**
   * Get employeeNumber
   * @return employeeNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getEmployeeNumber() {
    return employeeNumber;
  }


  public void setEmployeeNumber(Double employeeNumber) {
    
    
    
    this.employeeNumber = employeeNumber;
  }


  public GlobalPayrollG2NReport backdatedSalary(String backdatedSalary) {
    
    
    
    
    this.backdatedSalary = backdatedSalary;
    return this;
  }

   /**
   * Get backdatedSalary
   * @return backdatedSalary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBackdatedSalary() {
    return backdatedSalary;
  }


  public void setBackdatedSalary(String backdatedSalary) {
    
    
    
    this.backdatedSalary = backdatedSalary;
  }


  public GlobalPayrollG2NReport employerContribution(String employerContribution) {
    
    
    
    
    this.employerContribution = employerContribution;
    return this;
  }

   /**
   * Get employerContribution
   * @return employerContribution
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmployerContribution() {
    return employerContribution;
  }


  public void setEmployerContribution(String employerContribution) {
    
    
    
    this.employerContribution = employerContribution;
  }


  public GlobalPayrollG2NReport erOccupationalRisk(String erOccupationalRisk) {
    
    
    
    
    this.erOccupationalRisk = erOccupationalRisk;
    return this;
  }

   /**
   * Get erOccupationalRisk
   * @return erOccupationalRisk
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getErOccupationalRisk() {
    return erOccupationalRisk;
  }


  public void setErOccupationalRisk(String erOccupationalRisk) {
    
    
    
    this.erOccupationalRisk = erOccupationalRisk;
  }


  public GlobalPayrollG2NReport employmentStatusTagInternal(String employmentStatusTagInternal) {
    
    
    
    
    this.employmentStatusTagInternal = employmentStatusTagInternal;
    return this;
  }

   /**
   * Get employmentStatusTagInternal
   * @return employmentStatusTagInternal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmploymentStatusTagInternal() {
    return employmentStatusTagInternal;
  }


  public void setEmploymentStatusTagInternal(String employmentStatusTagInternal) {
    
    
    
    this.employmentStatusTagInternal = employmentStatusTagInternal;
  }


  public GlobalPayrollG2NReport employeeJobTitle(String employeeJobTitle) {
    
    
    
    
    this.employeeJobTitle = employeeJobTitle;
    return this;
  }

   /**
   * Get employeeJobTitle
   * @return employeeJobTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmployeeJobTitle() {
    return employeeJobTitle;
  }


  public void setEmployeeJobTitle(String employeeJobTitle) {
    
    
    
    this.employeeJobTitle = employeeJobTitle;
  }


  public GlobalPayrollG2NReport employeeDivision(String employeeDivision) {
    
    
    
    
    this.employeeDivision = employeeDivision;
    return this;
  }

   /**
   * Get employeeDivision
   * @return employeeDivision
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmployeeDivision() {
    return employeeDivision;
  }


  public void setEmployeeDivision(String employeeDivision) {
    
    
    
    this.employeeDivision = employeeDivision;
  }


  public GlobalPayrollG2NReport employeeDepartment(String employeeDepartment) {
    
    
    
    
    this.employeeDepartment = employeeDepartment;
    return this;
  }

   /**
   * Get employeeDepartment
   * @return employeeDepartment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmployeeDepartment() {
    return employeeDepartment;
  }


  public void setEmployeeDepartment(String employeeDepartment) {
    
    
    
    this.employeeDepartment = employeeDepartment;
  }


  public GlobalPayrollG2NReport pensionContribution(Double pensionContribution) {
    
    
    
    
    this.pensionContribution = pensionContribution;
    return this;
  }

  public GlobalPayrollG2NReport pensionContribution(Integer pensionContribution) {
    
    
    
    
    this.pensionContribution = pensionContribution.doubleValue();
    return this;
  }

   /**
   * Get pensionContribution
   * @return pensionContribution
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getPensionContribution() {
    return pensionContribution;
  }


  public void setPensionContribution(Double pensionContribution) {
    
    
    
    this.pensionContribution = pensionContribution;
  }


  public GlobalPayrollG2NReport costCenter(String costCenter) {
    
    
    
    
    this.costCenter = costCenter;
    return this;
  }

   /**
   * Get costCenter
   * @return costCenter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCostCenter() {
    return costCenter;
  }


  public void setCostCenter(String costCenter) {
    
    
    
    this.costCenter = costCenter;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the GlobalPayrollG2NReport instance itself
   */
  public GlobalPayrollG2NReport putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GlobalPayrollG2NReport globalPayrollG2NReport = (GlobalPayrollG2NReport) o;
    return Objects.equals(this.netPay, globalPayrollG2NReport.netPay) &&
        Objects.equals(this.eeLoans, globalPayrollG2NReport.eeLoans) &&
        Objects.equals(this.contractId, globalPayrollG2NReport.contractId) &&
        Objects.equals(this.annualBonus, globalPayrollG2NReport.annualBonus) &&
        Objects.equals(this.carAllowance, globalPayrollG2NReport.carAllowance) &&
        Objects.equals(this.espDeduction, globalPayrollG2NReport.espDeduction) &&
        Objects.equals(this.employeeName, globalPayrollG2NReport.employeeName) &&
        Objects.equals(this.employerCost, globalPayrollG2NReport.employerCost) &&
        Objects.equals(this.fundingAmount, globalPayrollG2NReport.fundingAmount) &&
        Objects.equals(this.homeAllowance, globalPayrollG2NReport.homeAllowance) &&
        Objects.equals(this.eeIncomeTax, globalPayrollG2NReport.eeIncomeTax) &&
        Objects.equals(this.employeeNumber, globalPayrollG2NReport.employeeNumber) &&
        Objects.equals(this.backdatedSalary, globalPayrollG2NReport.backdatedSalary) &&
        Objects.equals(this.employerContribution, globalPayrollG2NReport.employerContribution) &&
        Objects.equals(this.erOccupationalRisk, globalPayrollG2NReport.erOccupationalRisk) &&
        Objects.equals(this.employmentStatusTagInternal, globalPayrollG2NReport.employmentStatusTagInternal) &&
        Objects.equals(this.employeeJobTitle, globalPayrollG2NReport.employeeJobTitle) &&
        Objects.equals(this.employeeDivision, globalPayrollG2NReport.employeeDivision) &&
        Objects.equals(this.employeeDepartment, globalPayrollG2NReport.employeeDepartment) &&
        Objects.equals(this.pensionContribution, globalPayrollG2NReport.pensionContribution) &&
        Objects.equals(this.costCenter, globalPayrollG2NReport.costCenter)&&
        Objects.equals(this.additionalProperties, globalPayrollG2NReport.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(netPay, eeLoans, contractId, annualBonus, carAllowance, espDeduction, employeeName, employerCost, fundingAmount, homeAllowance, eeIncomeTax, employeeNumber, backdatedSalary, employerContribution, erOccupationalRisk, employmentStatusTagInternal, employeeJobTitle, employeeDivision, employeeDepartment, pensionContribution, costCenter, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GlobalPayrollG2NReport {\n");
    sb.append("    netPay: ").append(toIndentedString(netPay)).append("\n");
    sb.append("    eeLoans: ").append(toIndentedString(eeLoans)).append("\n");
    sb.append("    contractId: ").append(toIndentedString(contractId)).append("\n");
    sb.append("    annualBonus: ").append(toIndentedString(annualBonus)).append("\n");
    sb.append("    carAllowance: ").append(toIndentedString(carAllowance)).append("\n");
    sb.append("    espDeduction: ").append(toIndentedString(espDeduction)).append("\n");
    sb.append("    employeeName: ").append(toIndentedString(employeeName)).append("\n");
    sb.append("    employerCost: ").append(toIndentedString(employerCost)).append("\n");
    sb.append("    fundingAmount: ").append(toIndentedString(fundingAmount)).append("\n");
    sb.append("    homeAllowance: ").append(toIndentedString(homeAllowance)).append("\n");
    sb.append("    eeIncomeTax: ").append(toIndentedString(eeIncomeTax)).append("\n");
    sb.append("    employeeNumber: ").append(toIndentedString(employeeNumber)).append("\n");
    sb.append("    backdatedSalary: ").append(toIndentedString(backdatedSalary)).append("\n");
    sb.append("    employerContribution: ").append(toIndentedString(employerContribution)).append("\n");
    sb.append("    erOccupationalRisk: ").append(toIndentedString(erOccupationalRisk)).append("\n");
    sb.append("    employmentStatusTagInternal: ").append(toIndentedString(employmentStatusTagInternal)).append("\n");
    sb.append("    employeeJobTitle: ").append(toIndentedString(employeeJobTitle)).append("\n");
    sb.append("    employeeDivision: ").append(toIndentedString(employeeDivision)).append("\n");
    sb.append("    employeeDepartment: ").append(toIndentedString(employeeDepartment)).append("\n");
    sb.append("    pensionContribution: ").append(toIndentedString(pensionContribution)).append("\n");
    sb.append("    costCenter: ").append(toIndentedString(costCenter)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("net_pay");
    openapiFields.add("ee_loans");
    openapiFields.add("contract_id");
    openapiFields.add("annual_bonus");
    openapiFields.add("car_allowance");
    openapiFields.add("esp_deduction");
    openapiFields.add("employee_name");
    openapiFields.add("employer_cost");
    openapiFields.add("funding_amount");
    openapiFields.add("home_allowance");
    openapiFields.add("ee_income_tax");
    openapiFields.add("employee_number");
    openapiFields.add("backdated_salary");
    openapiFields.add("employer_contribution");
    openapiFields.add("er_occupational_risk");
    openapiFields.add("employment_status_tag_internal");
    openapiFields.add("employee_job_title");
    openapiFields.add("employee_division");
    openapiFields.add("employee_department");
    openapiFields.add("pension_contribution");
    openapiFields.add("cost_center");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GlobalPayrollG2NReport
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!GlobalPayrollG2NReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GlobalPayrollG2NReport is not found in the empty JSON string", GlobalPayrollG2NReport.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("net_pay").isJsonNull() && (jsonObj.get("net_pay") != null && !jsonObj.get("net_pay").isJsonNull()) && !jsonObj.get("net_pay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `net_pay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("net_pay").toString()));
      }
      if (!jsonObj.get("ee_loans").isJsonNull() && (jsonObj.get("ee_loans") != null && !jsonObj.get("ee_loans").isJsonNull()) && !jsonObj.get("ee_loans").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ee_loans` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ee_loans").toString()));
      }
      if ((jsonObj.get("contract_id") != null && !jsonObj.get("contract_id").isJsonNull()) && !jsonObj.get("contract_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contract_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contract_id").toString()));
      }
      if (!jsonObj.get("employee_name").isJsonNull() && (jsonObj.get("employee_name") != null && !jsonObj.get("employee_name").isJsonNull()) && !jsonObj.get("employee_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employee_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employee_name").toString()));
      }
      if (!jsonObj.get("employer_cost").isJsonNull() && (jsonObj.get("employer_cost") != null && !jsonObj.get("employer_cost").isJsonNull()) && !jsonObj.get("employer_cost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employer_cost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employer_cost").toString()));
      }
      if (!jsonObj.get("home_allowance").isJsonNull() && (jsonObj.get("home_allowance") != null && !jsonObj.get("home_allowance").isJsonNull()) && !jsonObj.get("home_allowance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `home_allowance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("home_allowance").toString()));
      }
      if (!jsonObj.get("ee_income_tax").isJsonNull() && (jsonObj.get("ee_income_tax") != null && !jsonObj.get("ee_income_tax").isJsonNull()) && !jsonObj.get("ee_income_tax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ee_income_tax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ee_income_tax").toString()));
      }
      if (!jsonObj.get("backdated_salary").isJsonNull() && (jsonObj.get("backdated_salary") != null && !jsonObj.get("backdated_salary").isJsonNull()) && !jsonObj.get("backdated_salary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backdated_salary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backdated_salary").toString()));
      }
      if (!jsonObj.get("employer_contribution").isJsonNull() && (jsonObj.get("employer_contribution") != null && !jsonObj.get("employer_contribution").isJsonNull()) && !jsonObj.get("employer_contribution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employer_contribution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employer_contribution").toString()));
      }
      if (!jsonObj.get("er_occupational_risk").isJsonNull() && (jsonObj.get("er_occupational_risk") != null && !jsonObj.get("er_occupational_risk").isJsonNull()) && !jsonObj.get("er_occupational_risk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `er_occupational_risk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("er_occupational_risk").toString()));
      }
      if (!jsonObj.get("employment_status_tag_internal").isJsonNull() && (jsonObj.get("employment_status_tag_internal") != null && !jsonObj.get("employment_status_tag_internal").isJsonNull()) && !jsonObj.get("employment_status_tag_internal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employment_status_tag_internal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employment_status_tag_internal").toString()));
      }
      if (!jsonObj.get("employee_job_title").isJsonNull() && (jsonObj.get("employee_job_title") != null && !jsonObj.get("employee_job_title").isJsonNull()) && !jsonObj.get("employee_job_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employee_job_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employee_job_title").toString()));
      }
      if (!jsonObj.get("employee_division").isJsonNull() && (jsonObj.get("employee_division") != null && !jsonObj.get("employee_division").isJsonNull()) && !jsonObj.get("employee_division").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employee_division` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employee_division").toString()));
      }
      if (!jsonObj.get("employee_department").isJsonNull() && (jsonObj.get("employee_department") != null && !jsonObj.get("employee_department").isJsonNull()) && !jsonObj.get("employee_department").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employee_department` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employee_department").toString()));
      }
      if (!jsonObj.get("cost_center").isJsonNull() && (jsonObj.get("cost_center") != null && !jsonObj.get("cost_center").isJsonNull()) && !jsonObj.get("cost_center").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cost_center` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cost_center").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GlobalPayrollG2NReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GlobalPayrollG2NReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GlobalPayrollG2NReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GlobalPayrollG2NReport.class));

       return (TypeAdapter<T>) new TypeAdapter<GlobalPayrollG2NReport>() {
           @Override
           public void write(JsonWriter out, GlobalPayrollG2NReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public GlobalPayrollG2NReport read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             GlobalPayrollG2NReport instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GlobalPayrollG2NReport given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GlobalPayrollG2NReport
  * @throws IOException if the JSON string is invalid with respect to GlobalPayrollG2NReport
  */
  public static GlobalPayrollG2NReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GlobalPayrollG2NReport.class);
  }

 /**
  * Convert an instance of GlobalPayrollG2NReport to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

