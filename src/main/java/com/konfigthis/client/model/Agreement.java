/*
 * Deel REST API
 * API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AgreementClientLegalEntity;
import com.konfigthis.client.model.AgreementMsa;
import com.konfigthis.client.model.AgreementProviderLegalEntity;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Agreement
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Agreement {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_AGREEMENT_TITLE = "agreement_title";
  @SerializedName(SERIALIZED_NAME_AGREEMENT_TITLE)
  private String agreementTitle;

  public static final String SERIALIZED_NAME_AGREEMENT_TYPE = "agreement_type";
  @SerializedName(SERIALIZED_NAME_AGREEMENT_TYPE)
  private String agreementType;

  public static final String SERIALIZED_NAME_MSA = "msa";
  @SerializedName(SERIALIZED_NAME_MSA)
  private AgreementMsa msa;

  public static final String SERIALIZED_NAME_CLIENT_LEGAL_ENTITY = "client_legal_entity";
  @SerializedName(SERIALIZED_NAME_CLIENT_LEGAL_ENTITY)
  private AgreementClientLegalEntity clientLegalEntity;

  public static final String SERIALIZED_NAME_PROVIDER_LEGAL_ENTITY = "provider_legal_entity";
  @SerializedName(SERIALIZED_NAME_PROVIDER_LEGAL_ENTITY)
  private AgreementProviderLegalEntity providerLegalEntity;

  public Agreement() {
  }

  public Agreement id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier of this resource.
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "00000000-0000-0000-0000-000000000000", required = true, value = "Unique identifier of this resource.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public Agreement agreementTitle(String agreementTitle) {
    
    
    
    
    this.agreementTitle = agreementTitle;
    return this;
  }

   /**
   * Get agreementTitle
   * @return agreementTitle
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getAgreementTitle() {
    return agreementTitle;
  }


  public void setAgreementTitle(String agreementTitle) {
    
    
    
    this.agreementTitle = agreementTitle;
  }


  public Agreement agreementType(String agreementType) {
    
    
    
    
    this.agreementType = agreementType;
    return this;
  }

   /**
   * Get agreementType
   * @return agreementType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "shield", required = true, value = "")

  public String getAgreementType() {
    return agreementType;
  }


  public void setAgreementType(String agreementType) {
    
    
    
    this.agreementType = agreementType;
  }


  public Agreement msa(AgreementMsa msa) {
    
    
    
    
    this.msa = msa;
    return this;
  }

   /**
   * Get msa
   * @return msa
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public AgreementMsa getMsa() {
    return msa;
  }


  public void setMsa(AgreementMsa msa) {
    
    
    
    this.msa = msa;
  }


  public Agreement clientLegalEntity(AgreementClientLegalEntity clientLegalEntity) {
    
    
    
    
    this.clientLegalEntity = clientLegalEntity;
    return this;
  }

   /**
   * Get clientLegalEntity
   * @return clientLegalEntity
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public AgreementClientLegalEntity getClientLegalEntity() {
    return clientLegalEntity;
  }


  public void setClientLegalEntity(AgreementClientLegalEntity clientLegalEntity) {
    
    
    
    this.clientLegalEntity = clientLegalEntity;
  }


  public Agreement providerLegalEntity(AgreementProviderLegalEntity providerLegalEntity) {
    
    
    
    
    this.providerLegalEntity = providerLegalEntity;
    return this;
  }

   /**
   * Get providerLegalEntity
   * @return providerLegalEntity
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public AgreementProviderLegalEntity getProviderLegalEntity() {
    return providerLegalEntity;
  }


  public void setProviderLegalEntity(AgreementProviderLegalEntity providerLegalEntity) {
    
    
    
    this.providerLegalEntity = providerLegalEntity;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Agreement instance itself
   */
  public Agreement putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Agreement agreement = (Agreement) o;
    return Objects.equals(this.id, agreement.id) &&
        Objects.equals(this.agreementTitle, agreement.agreementTitle) &&
        Objects.equals(this.agreementType, agreement.agreementType) &&
        Objects.equals(this.msa, agreement.msa) &&
        Objects.equals(this.clientLegalEntity, agreement.clientLegalEntity) &&
        Objects.equals(this.providerLegalEntity, agreement.providerLegalEntity)&&
        Objects.equals(this.additionalProperties, agreement.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, agreementTitle, agreementType, msa, clientLegalEntity, providerLegalEntity, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Agreement {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    agreementTitle: ").append(toIndentedString(agreementTitle)).append("\n");
    sb.append("    agreementType: ").append(toIndentedString(agreementType)).append("\n");
    sb.append("    msa: ").append(toIndentedString(msa)).append("\n");
    sb.append("    clientLegalEntity: ").append(toIndentedString(clientLegalEntity)).append("\n");
    sb.append("    providerLegalEntity: ").append(toIndentedString(providerLegalEntity)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("agreement_title");
    openapiFields.add("agreement_type");
    openapiFields.add("msa");
    openapiFields.add("client_legal_entity");
    openapiFields.add("provider_legal_entity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("agreement_title");
    openapiRequiredFields.add("agreement_type");
    openapiRequiredFields.add("msa");
    openapiRequiredFields.add("client_legal_entity");
    openapiRequiredFields.add("provider_legal_entity");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Agreement
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Agreement.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Agreement is not found in the empty JSON string", Agreement.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Agreement.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("agreement_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agreement_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agreement_title").toString()));
      }
      if (!jsonObj.get("agreement_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agreement_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agreement_type").toString()));
      }
      // validate the required field `msa`
      AgreementMsa.validateJsonObject(jsonObj.getAsJsonObject("msa"));
      // validate the required field `client_legal_entity`
      AgreementClientLegalEntity.validateJsonObject(jsonObj.getAsJsonObject("client_legal_entity"));
      // validate the required field `provider_legal_entity`
      AgreementProviderLegalEntity.validateJsonObject(jsonObj.getAsJsonObject("provider_legal_entity"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Agreement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Agreement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Agreement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Agreement.class));

       return (TypeAdapter<T>) new TypeAdapter<Agreement>() {
           @Override
           public void write(JsonWriter out, Agreement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Agreement read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Agreement instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Agreement given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Agreement
  * @throws IOException if the JSON string is invalid with respect to Agreement
  */
  public static Agreement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Agreement.class);
  }

 /**
  * Convert an instance of Agreement to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

