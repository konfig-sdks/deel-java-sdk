/*
 * Deel REST API
 * API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Email;
import com.konfigthis.client.model.EnterpriseUser;
import com.konfigthis.client.model.Meta;
import com.konfigthis.client.model.Name;
import com.konfigthis.client.model.UserExtension;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * UserResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class UserResponse {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active = false;

  public static final String SERIALIZED_NAME_EMAILS = "emails";
  @SerializedName(SERIALIZED_NAME_EMAILS)
  private List<Email> emails = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER_TYPE = "userType";
  @SerializedName(SERIALIZED_NAME_USER_TYPE)
  private String userType;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private Name name;

  /**
   * Gets or Sets schemas
   */
  @JsonAdapter(SchemasEnum.Adapter.class)
 public enum SchemasEnum {
    URN_IETF_PARAMS_SCIM_SCHEMAS_CORE_2_0_USER("urn:ietf:params:scim:schemas:core:2.0:User");

    private String value;

    SchemasEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SchemasEnum fromValue(String value) {
      for (SchemasEnum b : SchemasEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SchemasEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SchemasEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SchemasEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SchemasEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<SchemasEnum> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_URN_COLON_IETF_COLON_PARAMS_COLON_SCIM_COLON_SCHEMAS_COLON_EXTENSION_COLON_ENTERPRISE_COLON20_COLON_USER = "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User";
  @SerializedName(SERIALIZED_NAME_URN_COLON_IETF_COLON_PARAMS_COLON_SCIM_COLON_SCHEMAS_COLON_EXTENSION_COLON_ENTERPRISE_COLON20_COLON_USER)
  private EnterpriseUser urnColonIetfColonParamsColonScimColonSchemasColonExtensionColonEnterpriseColon20ColonUser;

  public static final String SERIALIZED_NAME_URN_COLON_IETF_COLON_PARAMS_COLON_SCIM_COLON_SCHEMAS_COLON_EXTENSION_COLON20_COLON_USER = "urn:ietf:params:scim:schemas:extension:2.0:User";
  @SerializedName(SERIALIZED_NAME_URN_COLON_IETF_COLON_PARAMS_COLON_SCIM_COLON_SCHEMAS_COLON_EXTENSION_COLON20_COLON_USER)
  private UserExtension urnColonIetfColonParamsColonScimColonSchemasColonExtensionColon20ColonUser;

  public static final String SERIALIZED_NAME_USER_NAME = "userName";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private Meta meta;

  public UserResponse() {
  }

  public UserResponse title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * Job title.
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Software Engineer", value = "Job title.")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public UserResponse active(Boolean active) {
    
    
    
    
    this.active = active;
    return this;
  }

   /**
   * Hiring status. True if user employment is active. False if employment is not active.
   * @return active
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Hiring status. True if user employment is active. False if employment is not active.")

  public Boolean getActive() {
    return active;
  }


  public void setActive(Boolean active) {
    
    
    
    this.active = active;
  }


  public UserResponse emails(List<Email> emails) {
    
    
    
    
    this.emails = emails;
    return this;
  }

  public UserResponse addEmailsItem(Email emailsItem) {
    this.emails.add(emailsItem);
    return this;
  }

   /**
   * Get emails
   * @return emails
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Email> getEmails() {
    return emails;
  }


  public void setEmails(List<Email> emails) {
    
    
    
    this.emails = emails;
  }


  public UserResponse userType(String userType) {
    
    
    
    
    this.userType = userType;
    return this;
  }

   /**
   * User type.
   * @return userType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "employee", value = "User type.")

  public String getUserType() {
    return userType;
  }


  public void setUserType(String userType) {
    
    
    
    this.userType = userType;
  }


  public UserResponse id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Unique resource id (UUID) defined by Deel.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "97b727b8-bdb5-11ed-afa1-0242ac120002", value = "Unique resource id (UUID) defined by Deel.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public UserResponse name(Name name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Name getName() {
    return name;
  }


  public void setName(Name name) {
    
    
    
    this.name = name;
  }


  public UserResponse schemas(List<SchemasEnum> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public UserResponse addSchemasItem(SchemasEnum schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<SchemasEnum> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<SchemasEnum> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public UserResponse urnColonIetfColonParamsColonScimColonSchemasColonExtensionColonEnterpriseColon20ColonUser(EnterpriseUser urnColonIetfColonParamsColonScimColonSchemasColonExtensionColonEnterpriseColon20ColonUser) {
    
    
    
    
    this.urnColonIetfColonParamsColonScimColonSchemasColonExtensionColonEnterpriseColon20ColonUser = urnColonIetfColonParamsColonScimColonSchemasColonExtensionColonEnterpriseColon20ColonUser;
    return this;
  }

   /**
   * Get urnColonIetfColonParamsColonScimColonSchemasColonExtensionColonEnterpriseColon20ColonUser
   * @return urnColonIetfColonParamsColonScimColonSchemasColonExtensionColonEnterpriseColon20ColonUser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnterpriseUser getUrnColonIetfColonParamsColonScimColonSchemasColonExtensionColonEnterpriseColon20ColonUser() {
    return urnColonIetfColonParamsColonScimColonSchemasColonExtensionColonEnterpriseColon20ColonUser;
  }


  public void setUrnColonIetfColonParamsColonScimColonSchemasColonExtensionColonEnterpriseColon20ColonUser(EnterpriseUser urnColonIetfColonParamsColonScimColonSchemasColonExtensionColonEnterpriseColon20ColonUser) {
    
    
    
    this.urnColonIetfColonParamsColonScimColonSchemasColonExtensionColonEnterpriseColon20ColonUser = urnColonIetfColonParamsColonScimColonSchemasColonExtensionColonEnterpriseColon20ColonUser;
  }


  public UserResponse urnColonIetfColonParamsColonScimColonSchemasColonExtensionColon20ColonUser(UserExtension urnColonIetfColonParamsColonScimColonSchemasColonExtensionColon20ColonUser) {
    
    
    
    
    this.urnColonIetfColonParamsColonScimColonSchemasColonExtensionColon20ColonUser = urnColonIetfColonParamsColonScimColonSchemasColonExtensionColon20ColonUser;
    return this;
  }

   /**
   * Get urnColonIetfColonParamsColonScimColonSchemasColonExtensionColon20ColonUser
   * @return urnColonIetfColonParamsColonScimColonSchemasColonExtensionColon20ColonUser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UserExtension getUrnColonIetfColonParamsColonScimColonSchemasColonExtensionColon20ColonUser() {
    return urnColonIetfColonParamsColonScimColonSchemasColonExtensionColon20ColonUser;
  }


  public void setUrnColonIetfColonParamsColonScimColonSchemasColonExtensionColon20ColonUser(UserExtension urnColonIetfColonParamsColonScimColonSchemasColonExtensionColon20ColonUser) {
    
    
    
    this.urnColonIetfColonParamsColonScimColonSchemasColonExtensionColon20ColonUser = urnColonIetfColonParamsColonScimColonSchemasColonExtensionColon20ColonUser;
  }


  public UserResponse userName(String userName) {
    
    
    
    
    this.userName = userName;
    return this;
  }

   /**
   * User&#39;s work email.
   * @return userName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "work.email@example.com", required = true, value = "User's work email.")

  public String getUserName() {
    return userName;
  }


  public void setUserName(String userName) {
    
    
    
    this.userName = userName;
  }


  public UserResponse meta(Meta meta) {
    
    
    
    
    this.meta = meta;
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Meta getMeta() {
    return meta;
  }


  public void setMeta(Meta meta) {
    
    
    
    this.meta = meta;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the UserResponse instance itself
   */
  public UserResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserResponse userResponse = (UserResponse) o;
    return Objects.equals(this.title, userResponse.title) &&
        Objects.equals(this.active, userResponse.active) &&
        Objects.equals(this.emails, userResponse.emails) &&
        Objects.equals(this.userType, userResponse.userType) &&
        Objects.equals(this.id, userResponse.id) &&
        Objects.equals(this.name, userResponse.name) &&
        Objects.equals(this.schemas, userResponse.schemas) &&
        Objects.equals(this.urnColonIetfColonParamsColonScimColonSchemasColonExtensionColonEnterpriseColon20ColonUser, userResponse.urnColonIetfColonParamsColonScimColonSchemasColonExtensionColonEnterpriseColon20ColonUser) &&
        Objects.equals(this.urnColonIetfColonParamsColonScimColonSchemasColonExtensionColon20ColonUser, userResponse.urnColonIetfColonParamsColonScimColonSchemasColonExtensionColon20ColonUser) &&
        Objects.equals(this.userName, userResponse.userName) &&
        Objects.equals(this.meta, userResponse.meta)&&
        Objects.equals(this.additionalProperties, userResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, active, emails, userType, id, name, schemas, urnColonIetfColonParamsColonScimColonSchemasColonExtensionColonEnterpriseColon20ColonUser, urnColonIetfColonParamsColonScimColonSchemasColonExtensionColon20ColonUser, userName, meta, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserResponse {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    emails: ").append(toIndentedString(emails)).append("\n");
    sb.append("    userType: ").append(toIndentedString(userType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    urnColonIetfColonParamsColonScimColonSchemasColonExtensionColonEnterpriseColon20ColonUser: ").append(toIndentedString(urnColonIetfColonParamsColonScimColonSchemasColonExtensionColonEnterpriseColon20ColonUser)).append("\n");
    sb.append("    urnColonIetfColonParamsColonScimColonSchemasColonExtensionColon20ColonUser: ").append(toIndentedString(urnColonIetfColonParamsColonScimColonSchemasColonExtensionColon20ColonUser)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("active");
    openapiFields.add("emails");
    openapiFields.add("userType");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("schemas");
    openapiFields.add("urn:ietf:params:scim:schemas:extension:enterprise:2.0:User");
    openapiFields.add("urn:ietf:params:scim:schemas:extension:2.0:User");
    openapiFields.add("userName");
    openapiFields.add("meta");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("emails");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("userName");
    openapiRequiredFields.add("meta");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UserResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UserResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserResponse is not found in the empty JSON string", UserResponse.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("emails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emails` to be an array in the JSON string but got `%s`", jsonObj.get("emails").toString()));
      }

      JsonArray jsonArrayemails = jsonObj.getAsJsonArray("emails");
      // validate the required field `emails` (array)
      for (int i = 0; i < jsonArrayemails.size(); i++) {
        Email.validateJsonObject(jsonArrayemails.get(i).getAsJsonObject());
      };
      if ((jsonObj.get("userType") != null && !jsonObj.get("userType").isJsonNull()) && !jsonObj.get("userType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userType").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the required field `name`
      Name.validateJsonObject(jsonObj.getAsJsonObject("name"));
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      // validate the optional field `urn:ietf:params:scim:schemas:extension:enterprise:2.0:User`
      if (jsonObj.get("urn:ietf:params:scim:schemas:extension:enterprise:2.0:User") != null && !jsonObj.get("urn:ietf:params:scim:schemas:extension:enterprise:2.0:User").isJsonNull()) {
        EnterpriseUser.validateJsonObject(jsonObj.getAsJsonObject("urn:ietf:params:scim:schemas:extension:enterprise:2.0:User"));
      }
      // validate the optional field `urn:ietf:params:scim:schemas:extension:2.0:User`
      if (jsonObj.get("urn:ietf:params:scim:schemas:extension:2.0:User") != null && !jsonObj.get("urn:ietf:params:scim:schemas:extension:2.0:User").isJsonNull()) {
        UserExtension.validateJsonObject(jsonObj.getAsJsonObject("urn:ietf:params:scim:schemas:extension:2.0:User"));
      }
      if (!jsonObj.get("userName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userName").toString()));
      }
      // validate the required field `meta`
      Meta.validateJsonObject(jsonObj.getAsJsonObject("meta"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<UserResponse>() {
           @Override
           public void write(JsonWriter out, UserResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public UserResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             UserResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UserResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UserResponse
  * @throws IOException if the JSON string is invalid with respect to UserResponse
  */
  public static UserResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserResponse.class);
  }

 /**
  * Convert an instance of UserResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

