/*
 * Deel REST API
 * API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.HealthInsuranceProviderAttachmentsInner;
import com.konfigthis.client.model.HealthInsuranceProviderPlansInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Health insurance provider.
 */
@ApiModel(description = "Health insurance provider.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class HealthInsuranceProvider {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_IS_UNISURE = "is_unisure";
  @SerializedName(SERIALIZED_NAME_IS_UNISURE)
  private Boolean isUnisure;

  public static final String SERIALIZED_NAME_HOME_PAGE_URL = "home_page_url";
  @SerializedName(SERIALIZED_NAME_HOME_PAGE_URL)
  private String homePageUrl;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_ENDING_RULE = "ending_rule";
  @SerializedName(SERIALIZED_NAME_ENDING_RULE)
  private String endingRule;

  public static final String SERIALIZED_NAME_DAYS_TO_CANCEL = "days_to_cancel";
  @SerializedName(SERIALIZED_NAME_DAYS_TO_CANCEL)
  private String daysToCancel;

  public static final String SERIALIZED_NAME_PRICING_INFO_LINK = "pricing_info_link";
  @SerializedName(SERIALIZED_NAME_PRICING_INFO_LINK)
  private String pricingInfoLink;

  public static final String SERIALIZED_NAME_FIXED_PRICE = "fixed_price";
  @SerializedName(SERIALIZED_NAME_FIXED_PRICE)
  private Boolean fixedPrice;

  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<HealthInsuranceProviderAttachmentsInner> attachments = null;

  public static final String SERIALIZED_NAME_CLIENT_INFO_BANNER = "client_info_banner";
  @SerializedName(SERIALIZED_NAME_CLIENT_INFO_BANNER)
  private String clientInfoBanner;

  public static final String SERIALIZED_NAME_IS_AVAILABLE_FOR_NEW_QUOTES = "is_available_for_new_quotes";
  @SerializedName(SERIALIZED_NAME_IS_AVAILABLE_FOR_NEW_QUOTES)
  private Boolean isAvailableForNewQuotes;

  public static final String SERIALIZED_NAME_PLANS = "plans";
  @SerializedName(SERIALIZED_NAME_PLANS)
  private List<HealthInsuranceProviderPlansInner> plans = null;

  public HealthInsuranceProvider() {
  }

  public HealthInsuranceProvider id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier of this resource.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "00000000-0000-0000-0000-000000000000", value = "Unique identifier of this resource.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public HealthInsuranceProvider name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Name of insurance provider.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "United Healthcare VSP Vision & Delta Dental: Singles Only", value = "Name of insurance provider.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public HealthInsuranceProvider isUnisure(Boolean isUnisure) {
    
    
    
    
    this.isUnisure = isUnisure;
    return this;
  }

   /**
   * Get isUnisure
   * @return isUnisure
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsUnisure() {
    return isUnisure;
  }


  public void setIsUnisure(Boolean isUnisure) {
    
    
    
    this.isUnisure = isUnisure;
  }


  public HealthInsuranceProvider homePageUrl(String homePageUrl) {
    
    
    
    
    this.homePageUrl = homePageUrl;
    return this;
  }

   /**
   * Insurance provider&#39;s home page url.
   * @return homePageUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://bit.ly/3uW72fp", value = "Insurance provider's home page url.")

  public String getHomePageUrl() {
    return homePageUrl;
  }


  public void setHomePageUrl(String homePageUrl) {
    
    
    
    this.homePageUrl = homePageUrl;
  }


  public HealthInsuranceProvider currency(String currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * Payment currency.
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "USD", value = "Payment currency.")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    
    
    
    this.currency = currency;
  }


  public HealthInsuranceProvider type(String type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Insurance type.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "PLAN", value = "Insurance type.")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    
    
    
    this.type = type;
  }


  public HealthInsuranceProvider endingRule(String endingRule) {
    
    
    
    
    this.endingRule = endingRule;
    return this;
  }

   /**
   * Insurance cycle ending rule.
   * @return endingRule
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "END_OF_MONTH", value = "Insurance cycle ending rule.")

  public String getEndingRule() {
    return endingRule;
  }


  public void setEndingRule(String endingRule) {
    
    
    
    this.endingRule = endingRule;
  }


  public HealthInsuranceProvider daysToCancel(String daysToCancel) {
    
    
    
    
    this.daysToCancel = daysToCancel;
    return this;
  }

   /**
   * Days to cancel the insurance.
   * @return daysToCancel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Days to cancel the insurance.")

  public String getDaysToCancel() {
    return daysToCancel;
  }


  public void setDaysToCancel(String daysToCancel) {
    
    
    
    this.daysToCancel = daysToCancel;
  }


  public HealthInsuranceProvider pricingInfoLink(String pricingInfoLink) {
    
    
    
    
    this.pricingInfoLink = pricingInfoLink;
    return this;
  }

   /**
   * URL to price info.
   * @return pricingInfoLink
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "URL to price info.")

  public String getPricingInfoLink() {
    return pricingInfoLink;
  }


  public void setPricingInfoLink(String pricingInfoLink) {
    
    
    
    this.pricingInfoLink = pricingInfoLink;
  }


  public HealthInsuranceProvider fixedPrice(Boolean fixedPrice) {
    
    
    
    
    this.fixedPrice = fixedPrice;
    return this;
  }

   /**
   * URL to price info.
   * @return fixedPrice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "URL to price info.")

  public Boolean getFixedPrice() {
    return fixedPrice;
  }


  public void setFixedPrice(Boolean fixedPrice) {
    
    
    
    this.fixedPrice = fixedPrice;
  }


  public HealthInsuranceProvider attachments(List<HealthInsuranceProviderAttachmentsInner> attachments) {
    
    
    
    
    this.attachments = attachments;
    return this;
  }

  public HealthInsuranceProvider addAttachmentsItem(HealthInsuranceProviderAttachmentsInner attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

   /**
   * File attachments.
   * @return attachments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "File attachments.")

  public List<HealthInsuranceProviderAttachmentsInner> getAttachments() {
    return attachments;
  }


  public void setAttachments(List<HealthInsuranceProviderAttachmentsInner> attachments) {
    
    
    
    this.attachments = attachments;
  }


  public HealthInsuranceProvider clientInfoBanner(String clientInfoBanner) {
    
    
    
    
    this.clientInfoBanner = clientInfoBanner;
    return this;
  }

   /**
   * Health insurance info banner.
   * @return clientInfoBanner
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Health insurance info banner.")

  public String getClientInfoBanner() {
    return clientInfoBanner;
  }


  public void setClientInfoBanner(String clientInfoBanner) {
    
    
    
    this.clientInfoBanner = clientInfoBanner;
  }


  public HealthInsuranceProvider isAvailableForNewQuotes(Boolean isAvailableForNewQuotes) {
    
    
    
    
    this.isAvailableForNewQuotes = isAvailableForNewQuotes;
    return this;
  }

   /**
   * Get isAvailableForNewQuotes
   * @return isAvailableForNewQuotes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsAvailableForNewQuotes() {
    return isAvailableForNewQuotes;
  }


  public void setIsAvailableForNewQuotes(Boolean isAvailableForNewQuotes) {
    
    
    
    this.isAvailableForNewQuotes = isAvailableForNewQuotes;
  }


  public HealthInsuranceProvider plans(List<HealthInsuranceProviderPlansInner> plans) {
    
    
    
    
    this.plans = plans;
    return this;
  }

  public HealthInsuranceProvider addPlansItem(HealthInsuranceProviderPlansInner plansItem) {
    if (this.plans == null) {
      this.plans = new ArrayList<>();
    }
    this.plans.add(plansItem);
    return this;
  }

   /**
   * Get plans
   * @return plans
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<HealthInsuranceProviderPlansInner> getPlans() {
    return plans;
  }


  public void setPlans(List<HealthInsuranceProviderPlansInner> plans) {
    
    
    
    this.plans = plans;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the HealthInsuranceProvider instance itself
   */
  public HealthInsuranceProvider putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HealthInsuranceProvider healthInsuranceProvider = (HealthInsuranceProvider) o;
    return Objects.equals(this.id, healthInsuranceProvider.id) &&
        Objects.equals(this.name, healthInsuranceProvider.name) &&
        Objects.equals(this.isUnisure, healthInsuranceProvider.isUnisure) &&
        Objects.equals(this.homePageUrl, healthInsuranceProvider.homePageUrl) &&
        Objects.equals(this.currency, healthInsuranceProvider.currency) &&
        Objects.equals(this.type, healthInsuranceProvider.type) &&
        Objects.equals(this.endingRule, healthInsuranceProvider.endingRule) &&
        Objects.equals(this.daysToCancel, healthInsuranceProvider.daysToCancel) &&
        Objects.equals(this.pricingInfoLink, healthInsuranceProvider.pricingInfoLink) &&
        Objects.equals(this.fixedPrice, healthInsuranceProvider.fixedPrice) &&
        Objects.equals(this.attachments, healthInsuranceProvider.attachments) &&
        Objects.equals(this.clientInfoBanner, healthInsuranceProvider.clientInfoBanner) &&
        Objects.equals(this.isAvailableForNewQuotes, healthInsuranceProvider.isAvailableForNewQuotes) &&
        Objects.equals(this.plans, healthInsuranceProvider.plans)&&
        Objects.equals(this.additionalProperties, healthInsuranceProvider.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, isUnisure, homePageUrl, currency, type, endingRule, daysToCancel, pricingInfoLink, fixedPrice, attachments, clientInfoBanner, isAvailableForNewQuotes, plans, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HealthInsuranceProvider {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    isUnisure: ").append(toIndentedString(isUnisure)).append("\n");
    sb.append("    homePageUrl: ").append(toIndentedString(homePageUrl)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    endingRule: ").append(toIndentedString(endingRule)).append("\n");
    sb.append("    daysToCancel: ").append(toIndentedString(daysToCancel)).append("\n");
    sb.append("    pricingInfoLink: ").append(toIndentedString(pricingInfoLink)).append("\n");
    sb.append("    fixedPrice: ").append(toIndentedString(fixedPrice)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    clientInfoBanner: ").append(toIndentedString(clientInfoBanner)).append("\n");
    sb.append("    isAvailableForNewQuotes: ").append(toIndentedString(isAvailableForNewQuotes)).append("\n");
    sb.append("    plans: ").append(toIndentedString(plans)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("is_unisure");
    openapiFields.add("home_page_url");
    openapiFields.add("currency");
    openapiFields.add("type");
    openapiFields.add("ending_rule");
    openapiFields.add("days_to_cancel");
    openapiFields.add("pricing_info_link");
    openapiFields.add("fixed_price");
    openapiFields.add("attachments");
    openapiFields.add("client_info_banner");
    openapiFields.add("is_available_for_new_quotes");
    openapiFields.add("plans");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to HealthInsuranceProvider
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!HealthInsuranceProvider.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HealthInsuranceProvider is not found in the empty JSON string", HealthInsuranceProvider.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("home_page_url") != null && !jsonObj.get("home_page_url").isJsonNull()) && !jsonObj.get("home_page_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `home_page_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("home_page_url").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("ending_rule") != null && !jsonObj.get("ending_rule").isJsonNull()) && !jsonObj.get("ending_rule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ending_rule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ending_rule").toString()));
      }
      if ((jsonObj.get("days_to_cancel") != null && !jsonObj.get("days_to_cancel").isJsonNull()) && !jsonObj.get("days_to_cancel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `days_to_cancel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("days_to_cancel").toString()));
      }
      if ((jsonObj.get("pricing_info_link") != null && !jsonObj.get("pricing_info_link").isJsonNull()) && !jsonObj.get("pricing_info_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pricing_info_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pricing_info_link").toString()));
      }
      if (jsonObj.get("attachments") != null && !jsonObj.get("attachments").isJsonNull()) {
        JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("attachments");
        if (jsonArrayattachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
          }

          // validate the optional field `attachments` (array)
          for (int i = 0; i < jsonArrayattachments.size(); i++) {
            HealthInsuranceProviderAttachmentsInner.validateJsonObject(jsonArrayattachments.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("client_info_banner") != null && !jsonObj.get("client_info_banner").isJsonNull()) && !jsonObj.get("client_info_banner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_info_banner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_info_banner").toString()));
      }
      if (jsonObj.get("plans") != null && !jsonObj.get("plans").isJsonNull()) {
        JsonArray jsonArrayplans = jsonObj.getAsJsonArray("plans");
        if (jsonArrayplans != null) {
          // ensure the json data is an array
          if (!jsonObj.get("plans").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `plans` to be an array in the JSON string but got `%s`", jsonObj.get("plans").toString()));
          }

          // validate the optional field `plans` (array)
          for (int i = 0; i < jsonArrayplans.size(); i++) {
            HealthInsuranceProviderPlansInner.validateJsonObject(jsonArrayplans.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HealthInsuranceProvider.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HealthInsuranceProvider' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HealthInsuranceProvider> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HealthInsuranceProvider.class));

       return (TypeAdapter<T>) new TypeAdapter<HealthInsuranceProvider>() {
           @Override
           public void write(JsonWriter out, HealthInsuranceProvider value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public HealthInsuranceProvider read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             HealthInsuranceProvider instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of HealthInsuranceProvider given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of HealthInsuranceProvider
  * @throws IOException if the JSON string is invalid with respect to HealthInsuranceProvider
  */
  public static HealthInsuranceProvider fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HealthInsuranceProvider.class);
  }

 /**
  * Convert an instance of HealthInsuranceProvider to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

