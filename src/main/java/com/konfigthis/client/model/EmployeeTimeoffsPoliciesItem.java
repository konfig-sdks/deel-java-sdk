/*
 * Deel REST API
 * API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EmployeeTimeoffsPoliciesItemEntitlement;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EmployeeTimeoffsPoliciesItem
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EmployeeTimeoffsPoliciesItem {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_UNIT_AMOUNT = "unit_amount";
  @SerializedName(SERIALIZED_NAME_UNIT_AMOUNT)
  private Double unitAmount;

  public static final String SERIALIZED_NAME_USED = "used";
  @SerializedName(SERIALIZED_NAME_USED)
  private Double used;

  public static final String SERIALIZED_NAME_TRACKING_START_DATE = "tracking_start_date";
  @SerializedName(SERIALIZED_NAME_TRACKING_START_DATE)
  private Object trackingStartDate = null;

  public static final String SERIALIZED_NAME_TRACKING_END_DATE = "tracking_end_date";
  @SerializedName(SERIALIZED_NAME_TRACKING_END_DATE)
  private Object trackingEndDate = null;

  public static final String SERIALIZED_NAME_ENTITLEMENT = "entitlement";
  @SerializedName(SERIALIZED_NAME_ENTITLEMENT)
  private EmployeeTimeoffsPoliciesItemEntitlement entitlement;

  public EmployeeTimeoffsPoliciesItem() {
  }

  public EmployeeTimeoffsPoliciesItem description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Description of the time off policy.
   * @return description
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Vacation policy", required = true, value = "Description of the time off policy.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public EmployeeTimeoffsPoliciesItem id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier for the time off policy.
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "9K1rw5vwkZX2", required = true, value = "Unique identifier for the time off policy.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public EmployeeTimeoffsPoliciesItem type(String type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Type of time off policy.
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "VACATION", required = true, value = "Type of time off policy.")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    
    
    
    this.type = type;
  }


  public EmployeeTimeoffsPoliciesItem name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Name of the time off policy.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Vacation", required = true, value = "Name of the time off policy.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public EmployeeTimeoffsPoliciesItem unitAmount(Double unitAmount) {
    
    
    
    
    this.unitAmount = unitAmount;
    return this;
  }

  public EmployeeTimeoffsPoliciesItem unitAmount(Integer unitAmount) {
    
    
    
    
    this.unitAmount = unitAmount.doubleValue();
    return this;
  }

   /**
   * Unit amount of the time off policy.
   * @return unitAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "20", required = true, value = "Unit amount of the time off policy.")

  public Double getUnitAmount() {
    return unitAmount;
  }


  public void setUnitAmount(Double unitAmount) {
    
    
    
    this.unitAmount = unitAmount;
  }


  public EmployeeTimeoffsPoliciesItem used(Double used) {
    
    
    
    
    this.used = used;
    return this;
  }

  public EmployeeTimeoffsPoliciesItem used(Integer used) {
    
    
    
    
    this.used = used.doubleValue();
    return this;
  }

   /**
   * Used time off policy.
   * @return used
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "10", required = true, value = "Used time off policy.")

  public Double getUsed() {
    return used;
  }


  public void setUsed(Double used) {
    
    
    
    this.used = used;
  }


  public EmployeeTimeoffsPoliciesItem trackingStartDate(Object trackingStartDate) {
    
    
    
    
    this.trackingStartDate = trackingStartDate;
    return this;
  }

   /**
   * Start date of the time off policy.
   * @return trackingStartDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2023-08-01T00:00:00.000Z", required = true, value = "Start date of the time off policy.")

  public Object getTrackingStartDate() {
    return trackingStartDate;
  }


  public void setTrackingStartDate(Object trackingStartDate) {
    
    
    
    this.trackingStartDate = trackingStartDate;
  }


  public EmployeeTimeoffsPoliciesItem trackingEndDate(Object trackingEndDate) {
    
    
    
    
    this.trackingEndDate = trackingEndDate;
    return this;
  }

   /**
   * End date of the time off policy.
   * @return trackingEndDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2023-08-31T00:00:00.000Z", required = true, value = "End date of the time off policy.")

  public Object getTrackingEndDate() {
    return trackingEndDate;
  }


  public void setTrackingEndDate(Object trackingEndDate) {
    
    
    
    this.trackingEndDate = trackingEndDate;
  }


  public EmployeeTimeoffsPoliciesItem entitlement(EmployeeTimeoffsPoliciesItemEntitlement entitlement) {
    
    
    
    
    this.entitlement = entitlement;
    return this;
  }

   /**
   * Get entitlement
   * @return entitlement
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EmployeeTimeoffsPoliciesItemEntitlement getEntitlement() {
    return entitlement;
  }


  public void setEntitlement(EmployeeTimeoffsPoliciesItemEntitlement entitlement) {
    
    
    
    this.entitlement = entitlement;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EmployeeTimeoffsPoliciesItem instance itself
   */
  public EmployeeTimeoffsPoliciesItem putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmployeeTimeoffsPoliciesItem employeeTimeoffsPoliciesItem = (EmployeeTimeoffsPoliciesItem) o;
    return Objects.equals(this.description, employeeTimeoffsPoliciesItem.description) &&
        Objects.equals(this.id, employeeTimeoffsPoliciesItem.id) &&
        Objects.equals(this.type, employeeTimeoffsPoliciesItem.type) &&
        Objects.equals(this.name, employeeTimeoffsPoliciesItem.name) &&
        Objects.equals(this.unitAmount, employeeTimeoffsPoliciesItem.unitAmount) &&
        Objects.equals(this.used, employeeTimeoffsPoliciesItem.used) &&
        Objects.equals(this.trackingStartDate, employeeTimeoffsPoliciesItem.trackingStartDate) &&
        Objects.equals(this.trackingEndDate, employeeTimeoffsPoliciesItem.trackingEndDate) &&
        Objects.equals(this.entitlement, employeeTimeoffsPoliciesItem.entitlement)&&
        Objects.equals(this.additionalProperties, employeeTimeoffsPoliciesItem.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, id, type, name, unitAmount, used, trackingStartDate, trackingEndDate, entitlement, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmployeeTimeoffsPoliciesItem {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    unitAmount: ").append(toIndentedString(unitAmount)).append("\n");
    sb.append("    used: ").append(toIndentedString(used)).append("\n");
    sb.append("    trackingStartDate: ").append(toIndentedString(trackingStartDate)).append("\n");
    sb.append("    trackingEndDate: ").append(toIndentedString(trackingEndDate)).append("\n");
    sb.append("    entitlement: ").append(toIndentedString(entitlement)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("name");
    openapiFields.add("unit_amount");
    openapiFields.add("used");
    openapiFields.add("tracking_start_date");
    openapiFields.add("tracking_end_date");
    openapiFields.add("entitlement");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("unit_amount");
    openapiRequiredFields.add("used");
    openapiRequiredFields.add("tracking_start_date");
    openapiRequiredFields.add("tracking_end_date");
    openapiRequiredFields.add("entitlement");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmployeeTimeoffsPoliciesItem
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EmployeeTimeoffsPoliciesItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmployeeTimeoffsPoliciesItem is not found in the empty JSON string", EmployeeTimeoffsPoliciesItem.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EmployeeTimeoffsPoliciesItem.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `entitlement`
      EmployeeTimeoffsPoliciesItemEntitlement.validateJsonObject(jsonObj.getAsJsonObject("entitlement"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmployeeTimeoffsPoliciesItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmployeeTimeoffsPoliciesItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmployeeTimeoffsPoliciesItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmployeeTimeoffsPoliciesItem.class));

       return (TypeAdapter<T>) new TypeAdapter<EmployeeTimeoffsPoliciesItem>() {
           @Override
           public void write(JsonWriter out, EmployeeTimeoffsPoliciesItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EmployeeTimeoffsPoliciesItem read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EmployeeTimeoffsPoliciesItem instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmployeeTimeoffsPoliciesItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmployeeTimeoffsPoliciesItem
  * @throws IOException if the JSON string is invalid with respect to EmployeeTimeoffsPoliciesItem
  */
  public static EmployeeTimeoffsPoliciesItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmployeeTimeoffsPoliciesItem.class);
  }

 /**
  * Convert an instance of EmployeeTimeoffsPoliciesItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

