/*
 * Deel REST API
 * API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EorTimeoffsBaseItemReviewer;
import com.konfigthis.client.model.TimeoffsAttachmentsItem;
import com.konfigthis.client.model.TimeoffsProfileNullable;
import com.konfigthis.client.model.TimeoffsStatusEnum;
import com.konfigthis.client.model.TimeoffsTypeEnum;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EorTimeoffsBaseItem
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EorTimeoffsBaseItem {
  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TimeoffsTypeEnum type;

  public static final String SERIALIZED_NAME_REQUESTED_AT = "requested_at";
  @SerializedName(SERIALIZED_NAME_REQUESTED_AT)
  private OffsetDateTime requestedAt;

  public static final String SERIALIZED_NAME_REVIEWED_AT = "reviewed_at";
  @SerializedName(SERIALIZED_NAME_REVIEWED_AT)
  private OffsetDateTime reviewedAt;

  public static final String SERIALIZED_NAME_DENIAL_REASON = "denial_reason";
  @SerializedName(SERIALIZED_NAME_DENIAL_REASON)
  private String denialReason;

  public static final String SERIALIZED_NAME_HAS_MULTIPLE_DATES = "has_multiple_dates";
  @SerializedName(SERIALIZED_NAME_HAS_MULTIPLE_DATES)
  private Boolean hasMultipleDates;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private TimeoffsStatusEnum status;

  public static final String SERIALIZED_NAME_OTHER_TIMEOFF_NAME = "other_timeoff_name";
  @SerializedName(SERIALIZED_NAME_OTHER_TIMEOFF_NAME)
  private String otherTimeoffName;

  public static final String SERIALIZED_NAME_REQUESTER = "requester";
  @SerializedName(SERIALIZED_NAME_REQUESTER)
  private TimeoffsProfileNullable requester;

  public static final String SERIALIZED_NAME_REVIEWER = "reviewer";
  @SerializedName(SERIALIZED_NAME_REVIEWER)
  private EorTimeoffsBaseItemReviewer reviewer;

  public static final String SERIALIZED_NAME_DAYS_USED_START_YEAR = "days_used_start_year";
  @SerializedName(SERIALIZED_NAME_DAYS_USED_START_YEAR)
  private String daysUsedStartYear;

  public static final String SERIALIZED_NAME_DAYS_USED_END_YEAR = "days_used_end_year";
  @SerializedName(SERIALIZED_NAME_DAYS_USED_END_YEAR)
  private String daysUsedEndYear;

  public static final String SERIALIZED_NAME_TOTAL_DAYS_USED = "total_days_used";
  @SerializedName(SERIALIZED_NAME_TOTAL_DAYS_USED)
  private String totalDaysUsed;

  public static final String SERIALIZED_NAME_START_DATE_IS_HALF_DAY = "start_date_is_half_day";
  @SerializedName(SERIALIZED_NAME_START_DATE_IS_HALF_DAY)
  private Boolean startDateIsHalfDay;

  public static final String SERIALIZED_NAME_END_DATE_IS_HALF_DAY = "end_date_is_half_day";
  @SerializedName(SERIALIZED_NAME_END_DATE_IS_HALF_DAY)
  private Boolean endDateIsHalfDay;

  public static final String SERIALIZED_NAME_SINGLE_DATE = "single_date";
  @SerializedName(SERIALIZED_NAME_SINGLE_DATE)
  private OffsetDateTime singleDate;

  public static final String SERIALIZED_NAME_DATE_IS_HALF_DAY = "date_is_half_day";
  @SerializedName(SERIALIZED_NAME_DATE_IS_HALF_DAY)
  private Boolean dateIsHalfDay;

  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<TimeoffsAttachmentsItem> attachments = null;

  public EorTimeoffsBaseItem() {
  }

  public EorTimeoffsBaseItem reason(String reason) {
    
    
    
    
    this.reason = reason;
    return this;
  }

   /**
   * Reason for requesting time off.
   * @return reason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "I have a doctors appointment", value = "Reason for requesting time off.")

  public String getReason() {
    return reason;
  }


  public void setReason(String reason) {
    
    
    
    this.reason = reason;
  }


  public EorTimeoffsBaseItem type(TimeoffsTypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * The type of time off.
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "VACATION", required = true, value = "The type of time off.")

  public TimeoffsTypeEnum getType() {
    return type;
  }


  public void setType(TimeoffsTypeEnum type) {
    
    
    
    this.type = type;
  }


  public EorTimeoffsBaseItem requestedAt(OffsetDateTime requestedAt) {
    
    
    
    
    this.requestedAt = requestedAt;
    return this;
  }

   /**
   * Long date-time format following ISO-8601
   * @return requestedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-05-24T09:38:46.235Z", required = true, value = "Long date-time format following ISO-8601")

  public OffsetDateTime getRequestedAt() {
    return requestedAt;
  }


  public void setRequestedAt(OffsetDateTime requestedAt) {
    
    
    
    this.requestedAt = requestedAt;
  }


  public EorTimeoffsBaseItem reviewedAt(OffsetDateTime reviewedAt) {
    
    
    
    
    this.reviewedAt = reviewedAt;
    return this;
  }

   /**
   * Long date-time format following ISO-8601
   * @return reviewedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-05-24T09:38:46.235Z", value = "Long date-time format following ISO-8601")

  public OffsetDateTime getReviewedAt() {
    return reviewedAt;
  }


  public void setReviewedAt(OffsetDateTime reviewedAt) {
    
    
    
    this.reviewedAt = reviewedAt;
  }


  public EorTimeoffsBaseItem denialReason(String denialReason) {
    
    
    
    
    this.denialReason = denialReason;
    return this;
  }

   /**
   * Reason why time off was denied.
   * @return denialReason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "No time off available", value = "Reason why time off was denied.")

  public String getDenialReason() {
    return denialReason;
  }


  public void setDenialReason(String denialReason) {
    
    
    
    this.denialReason = denialReason;
  }


  public EorTimeoffsBaseItem hasMultipleDates(Boolean hasMultipleDates) {
    
    
    
    
    this.hasMultipleDates = hasMultipleDates;
    return this;
  }

   /**
   * Indicates if multiple time off days are requested.
   * @return hasMultipleDates
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates if multiple time off days are requested.")

  public Boolean getHasMultipleDates() {
    return hasMultipleDates;
  }


  public void setHasMultipleDates(Boolean hasMultipleDates) {
    
    
    
    this.hasMultipleDates = hasMultipleDates;
  }


  public EorTimeoffsBaseItem status(TimeoffsStatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Status of the time off request.
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "USED", required = true, value = "Status of the time off request.")

  public TimeoffsStatusEnum getStatus() {
    return status;
  }


  public void setStatus(TimeoffsStatusEnum status) {
    
    
    
    this.status = status;
  }


  public EorTimeoffsBaseItem otherTimeoffName(String otherTimeoffName) {
    
    
    
    
    this.otherTimeoffName = otherTimeoffName;
    return this;
  }

   /**
   * Custom title for the time off. Only specify if type is \&quot;OTHER\&quot;.
   * @return otherTimeoffName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "This is time off for a doctor's appointment", value = "Custom title for the time off. Only specify if type is \"OTHER\".")

  public String getOtherTimeoffName() {
    return otherTimeoffName;
  }


  public void setOtherTimeoffName(String otherTimeoffName) {
    
    
    
    this.otherTimeoffName = otherTimeoffName;
  }


  public EorTimeoffsBaseItem requester(TimeoffsProfileNullable requester) {
    
    
    
    
    this.requester = requester;
    return this;
  }

   /**
   * Employee who requested the time off.
   * @return requester
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee who requested the time off.")

  public TimeoffsProfileNullable getRequester() {
    return requester;
  }


  public void setRequester(TimeoffsProfileNullable requester) {
    
    
    
    this.requester = requester;
  }


  public EorTimeoffsBaseItem reviewer(EorTimeoffsBaseItemReviewer reviewer) {
    
    
    
    
    this.reviewer = reviewer;
    return this;
  }

   /**
   * User who reviewed the time off.
   * @return reviewer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "User who reviewed the time off.")

  public EorTimeoffsBaseItemReviewer getReviewer() {
    return reviewer;
  }


  public void setReviewer(EorTimeoffsBaseItemReviewer reviewer) {
    
    
    
    this.reviewer = reviewer;
  }


  public EorTimeoffsBaseItem daysUsedStartYear(String daysUsedStartYear) {
    
    
    
    
    this.daysUsedStartYear = daysUsedStartYear;
    return this;
  }

   /**
   * Days used at the start year.
   * @return daysUsedStartYear
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2.00", value = "Days used at the start year.")

  public String getDaysUsedStartYear() {
    return daysUsedStartYear;
  }


  public void setDaysUsedStartYear(String daysUsedStartYear) {
    
    
    
    this.daysUsedStartYear = daysUsedStartYear;
  }


  public EorTimeoffsBaseItem daysUsedEndYear(String daysUsedEndYear) {
    
    
    
    
    this.daysUsedEndYear = daysUsedEndYear;
    return this;
  }

   /**
   * Days used at the end year.
   * @return daysUsedEndYear
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2.00", value = "Days used at the end year.")

  public String getDaysUsedEndYear() {
    return daysUsedEndYear;
  }


  public void setDaysUsedEndYear(String daysUsedEndYear) {
    
    
    
    this.daysUsedEndYear = daysUsedEndYear;
  }


  public EorTimeoffsBaseItem totalDaysUsed(String totalDaysUsed) {
    
    
    
    
    this.totalDaysUsed = totalDaysUsed;
    return this;
  }

   /**
   * Total number of time off days used.
   * @return totalDaysUsed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "4.00", value = "Total number of time off days used.")

  public String getTotalDaysUsed() {
    return totalDaysUsed;
  }


  public void setTotalDaysUsed(String totalDaysUsed) {
    
    
    
    this.totalDaysUsed = totalDaysUsed;
  }


  public EorTimeoffsBaseItem startDateIsHalfDay(Boolean startDateIsHalfDay) {
    
    
    
    
    this.startDateIsHalfDay = startDateIsHalfDay;
    return this;
  }

   /**
   * Indicates if the first day of time off is a half day.
   * @return startDateIsHalfDay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates if the first day of time off is a half day.")

  public Boolean getStartDateIsHalfDay() {
    return startDateIsHalfDay;
  }


  public void setStartDateIsHalfDay(Boolean startDateIsHalfDay) {
    
    
    
    this.startDateIsHalfDay = startDateIsHalfDay;
  }


  public EorTimeoffsBaseItem endDateIsHalfDay(Boolean endDateIsHalfDay) {
    
    
    
    
    this.endDateIsHalfDay = endDateIsHalfDay;
    return this;
  }

   /**
   * Indicates if the last day of time off is a half day.
   * @return endDateIsHalfDay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates if the last day of time off is a half day.")

  public Boolean getEndDateIsHalfDay() {
    return endDateIsHalfDay;
  }


  public void setEndDateIsHalfDay(Boolean endDateIsHalfDay) {
    
    
    
    this.endDateIsHalfDay = endDateIsHalfDay;
  }


  public EorTimeoffsBaseItem singleDate(OffsetDateTime singleDate) {
    
    
    
    
    this.singleDate = singleDate;
    return this;
  }

   /**
   * Get singleDate
   * @return singleDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-08-25T12:09:34.695Z", value = "")

  public OffsetDateTime getSingleDate() {
    return singleDate;
  }


  public void setSingleDate(OffsetDateTime singleDate) {
    
    
    
    this.singleDate = singleDate;
  }


  public EorTimeoffsBaseItem dateIsHalfDay(Boolean dateIsHalfDay) {
    
    
    
    
    this.dateIsHalfDay = dateIsHalfDay;
    return this;
  }

   /**
   * If true, only a single date was specified.
   * @return dateIsHalfDay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, only a single date was specified.")

  public Boolean getDateIsHalfDay() {
    return dateIsHalfDay;
  }


  public void setDateIsHalfDay(Boolean dateIsHalfDay) {
    
    
    
    this.dateIsHalfDay = dateIsHalfDay;
  }


  public EorTimeoffsBaseItem attachments(List<TimeoffsAttachmentsItem> attachments) {
    
    
    
    
    this.attachments = attachments;
    return this;
  }

  public EorTimeoffsBaseItem addAttachmentsItem(TimeoffsAttachmentsItem attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

   /**
   * A list of attachments. 2022-09-08 FE only allows for \&quot;SICK LEAVE\&quot;
   * @return attachments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of attachments. 2022-09-08 FE only allows for \"SICK LEAVE\"")

  public List<TimeoffsAttachmentsItem> getAttachments() {
    return attachments;
  }


  public void setAttachments(List<TimeoffsAttachmentsItem> attachments) {
    
    
    
    this.attachments = attachments;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EorTimeoffsBaseItem instance itself
   */
  public EorTimeoffsBaseItem putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EorTimeoffsBaseItem eorTimeoffsBaseItem = (EorTimeoffsBaseItem) o;
    return Objects.equals(this.reason, eorTimeoffsBaseItem.reason) &&
        Objects.equals(this.type, eorTimeoffsBaseItem.type) &&
        Objects.equals(this.requestedAt, eorTimeoffsBaseItem.requestedAt) &&
        Objects.equals(this.reviewedAt, eorTimeoffsBaseItem.reviewedAt) &&
        Objects.equals(this.denialReason, eorTimeoffsBaseItem.denialReason) &&
        Objects.equals(this.hasMultipleDates, eorTimeoffsBaseItem.hasMultipleDates) &&
        Objects.equals(this.status, eorTimeoffsBaseItem.status) &&
        Objects.equals(this.otherTimeoffName, eorTimeoffsBaseItem.otherTimeoffName) &&
        Objects.equals(this.requester, eorTimeoffsBaseItem.requester) &&
        Objects.equals(this.reviewer, eorTimeoffsBaseItem.reviewer) &&
        Objects.equals(this.daysUsedStartYear, eorTimeoffsBaseItem.daysUsedStartYear) &&
        Objects.equals(this.daysUsedEndYear, eorTimeoffsBaseItem.daysUsedEndYear) &&
        Objects.equals(this.totalDaysUsed, eorTimeoffsBaseItem.totalDaysUsed) &&
        Objects.equals(this.startDateIsHalfDay, eorTimeoffsBaseItem.startDateIsHalfDay) &&
        Objects.equals(this.endDateIsHalfDay, eorTimeoffsBaseItem.endDateIsHalfDay) &&
        Objects.equals(this.singleDate, eorTimeoffsBaseItem.singleDate) &&
        Objects.equals(this.dateIsHalfDay, eorTimeoffsBaseItem.dateIsHalfDay) &&
        Objects.equals(this.attachments, eorTimeoffsBaseItem.attachments)&&
        Objects.equals(this.additionalProperties, eorTimeoffsBaseItem.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(reason, type, requestedAt, reviewedAt, denialReason, hasMultipleDates, status, otherTimeoffName, requester, reviewer, daysUsedStartYear, daysUsedEndYear, totalDaysUsed, startDateIsHalfDay, endDateIsHalfDay, singleDate, dateIsHalfDay, attachments, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EorTimeoffsBaseItem {\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    requestedAt: ").append(toIndentedString(requestedAt)).append("\n");
    sb.append("    reviewedAt: ").append(toIndentedString(reviewedAt)).append("\n");
    sb.append("    denialReason: ").append(toIndentedString(denialReason)).append("\n");
    sb.append("    hasMultipleDates: ").append(toIndentedString(hasMultipleDates)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    otherTimeoffName: ").append(toIndentedString(otherTimeoffName)).append("\n");
    sb.append("    requester: ").append(toIndentedString(requester)).append("\n");
    sb.append("    reviewer: ").append(toIndentedString(reviewer)).append("\n");
    sb.append("    daysUsedStartYear: ").append(toIndentedString(daysUsedStartYear)).append("\n");
    sb.append("    daysUsedEndYear: ").append(toIndentedString(daysUsedEndYear)).append("\n");
    sb.append("    totalDaysUsed: ").append(toIndentedString(totalDaysUsed)).append("\n");
    sb.append("    startDateIsHalfDay: ").append(toIndentedString(startDateIsHalfDay)).append("\n");
    sb.append("    endDateIsHalfDay: ").append(toIndentedString(endDateIsHalfDay)).append("\n");
    sb.append("    singleDate: ").append(toIndentedString(singleDate)).append("\n");
    sb.append("    dateIsHalfDay: ").append(toIndentedString(dateIsHalfDay)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("reason");
    openapiFields.add("type");
    openapiFields.add("requested_at");
    openapiFields.add("reviewed_at");
    openapiFields.add("denial_reason");
    openapiFields.add("has_multiple_dates");
    openapiFields.add("status");
    openapiFields.add("other_timeoff_name");
    openapiFields.add("requester");
    openapiFields.add("reviewer");
    openapiFields.add("days_used_start_year");
    openapiFields.add("days_used_end_year");
    openapiFields.add("total_days_used");
    openapiFields.add("start_date_is_half_day");
    openapiFields.add("end_date_is_half_day");
    openapiFields.add("single_date");
    openapiFields.add("date_is_half_day");
    openapiFields.add("attachments");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("requested_at");
    openapiRequiredFields.add("status");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EorTimeoffsBaseItem
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EorTimeoffsBaseItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EorTimeoffsBaseItem is not found in the empty JSON string", EorTimeoffsBaseItem.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EorTimeoffsBaseItem.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("reason").isJsonNull() && (jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if (!jsonObj.get("denial_reason").isJsonNull() && (jsonObj.get("denial_reason") != null && !jsonObj.get("denial_reason").isJsonNull()) && !jsonObj.get("denial_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `denial_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("denial_reason").toString()));
      }
      if (!jsonObj.get("other_timeoff_name").isJsonNull() && (jsonObj.get("other_timeoff_name") != null && !jsonObj.get("other_timeoff_name").isJsonNull()) && !jsonObj.get("other_timeoff_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `other_timeoff_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("other_timeoff_name").toString()));
      }
      // validate the optional field `requester`
      if (jsonObj.get("requester") != null && !jsonObj.get("requester").isJsonNull()) {
        TimeoffsProfileNullable.validateJsonObject(jsonObj.getAsJsonObject("requester"));
      }
      // validate the optional field `reviewer`
      if (jsonObj.get("reviewer") != null && !jsonObj.get("reviewer").isJsonNull()) {
        EorTimeoffsBaseItemReviewer.validateJsonObject(jsonObj.getAsJsonObject("reviewer"));
      }
      if ((jsonObj.get("days_used_start_year") != null && !jsonObj.get("days_used_start_year").isJsonNull()) && !jsonObj.get("days_used_start_year").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `days_used_start_year` to be a primitive type in the JSON string but got `%s`", jsonObj.get("days_used_start_year").toString()));
      }
      if ((jsonObj.get("days_used_end_year") != null && !jsonObj.get("days_used_end_year").isJsonNull()) && !jsonObj.get("days_used_end_year").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `days_used_end_year` to be a primitive type in the JSON string but got `%s`", jsonObj.get("days_used_end_year").toString()));
      }
      if ((jsonObj.get("total_days_used") != null && !jsonObj.get("total_days_used").isJsonNull()) && !jsonObj.get("total_days_used").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `total_days_used` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total_days_used").toString()));
      }
      // validate the optional field `single_date`
      if (jsonObj.get("single_date") != null && !jsonObj.get("single_date").isJsonNull()) {
        OffsetDateTime.validateJsonObject(jsonObj.getAsJsonObject("single_date"));
      }
      if (jsonObj.get("attachments") != null && !jsonObj.get("attachments").isJsonNull()) {
        JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("attachments");
        if (jsonArrayattachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
          }

          // validate the optional field `attachments` (array)
          for (int i = 0; i < jsonArrayattachments.size(); i++) {
            TimeoffsAttachmentsItem.validateJsonObject(jsonArrayattachments.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EorTimeoffsBaseItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EorTimeoffsBaseItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EorTimeoffsBaseItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EorTimeoffsBaseItem.class));

       return (TypeAdapter<T>) new TypeAdapter<EorTimeoffsBaseItem>() {
           @Override
           public void write(JsonWriter out, EorTimeoffsBaseItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EorTimeoffsBaseItem read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EorTimeoffsBaseItem instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EorTimeoffsBaseItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EorTimeoffsBaseItem
  * @throws IOException if the JSON string is invalid with respect to EorTimeoffsBaseItem
  */
  public static EorTimeoffsBaseItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EorTimeoffsBaseItem.class);
  }

 /**
  * Convert an instance of EorTimeoffsBaseItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

