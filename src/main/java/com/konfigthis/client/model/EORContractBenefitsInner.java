/*
 * Deel REST API
 * API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EORContractBenefitsInnerEnrollmentDetails;
import com.konfigthis.client.model.EORContractBenefitsInnerPlan;
import com.konfigthis.client.model.EORContractBenefitsInnerProvider;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EORContractBenefitsInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EORContractBenefitsInner {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private EORContractBenefitsInnerProvider provider;

  /**
   * Status of the offer.
   */
  @JsonAdapter(OfferStatusEnum.Adapter.class)
 public enum OfferStatusEnum {
    OFFERED("Offered"),
    
    NOT_OFFERED("Not offered");

    private String value;

    OfferStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OfferStatusEnum fromValue(String value) {
      for (OfferStatusEnum b : OfferStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OfferStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OfferStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OfferStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OfferStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OFFER_STATUS = "offer_status";
  @SerializedName(SERIALIZED_NAME_OFFER_STATUS)
  private OfferStatusEnum offerStatus;

  public static final String SERIALIZED_NAME_PLAN = "plan";
  @SerializedName(SERIALIZED_NAME_PLAN)
  private EORContractBenefitsInnerPlan plan;

  public static final String SERIALIZED_NAME_ENROLLMENT_DETAILS = "enrollment_details";
  @SerializedName(SERIALIZED_NAME_ENROLLMENT_DETAILS)
  private EORContractBenefitsInnerEnrollmentDetails enrollmentDetails;

  public EORContractBenefitsInner() {
  }

  public EORContractBenefitsInner id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier of the benefit.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "e2e09831-853d-4f56-b43f-2ec19cda7b0c", value = "Unique identifier of the benefit.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public EORContractBenefitsInner name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Name of the benefit.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Health Insurance", value = "Name of the benefit.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public EORContractBenefitsInner provider(EORContractBenefitsInnerProvider provider) {
    
    
    
    
    this.provider = provider;
    return this;
  }

   /**
   * Get provider
   * @return provider
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EORContractBenefitsInnerProvider getProvider() {
    return provider;
  }


  public void setProvider(EORContractBenefitsInnerProvider provider) {
    
    
    
    this.provider = provider;
  }


  public EORContractBenefitsInner offerStatus(OfferStatusEnum offerStatus) {
    
    
    
    
    this.offerStatus = offerStatus;
    return this;
  }

   /**
   * Status of the offer.
   * @return offerStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "OFFERED", value = "Status of the offer.")

  public OfferStatusEnum getOfferStatus() {
    return offerStatus;
  }


  public void setOfferStatus(OfferStatusEnum offerStatus) {
    
    
    
    this.offerStatus = offerStatus;
  }


  public EORContractBenefitsInner plan(EORContractBenefitsInnerPlan plan) {
    
    
    
    
    this.plan = plan;
    return this;
  }

   /**
   * Get plan
   * @return plan
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EORContractBenefitsInnerPlan getPlan() {
    return plan;
  }


  public void setPlan(EORContractBenefitsInnerPlan plan) {
    
    
    
    this.plan = plan;
  }


  public EORContractBenefitsInner enrollmentDetails(EORContractBenefitsInnerEnrollmentDetails enrollmentDetails) {
    
    
    
    
    this.enrollmentDetails = enrollmentDetails;
    return this;
  }

   /**
   * Get enrollmentDetails
   * @return enrollmentDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EORContractBenefitsInnerEnrollmentDetails getEnrollmentDetails() {
    return enrollmentDetails;
  }


  public void setEnrollmentDetails(EORContractBenefitsInnerEnrollmentDetails enrollmentDetails) {
    
    
    
    this.enrollmentDetails = enrollmentDetails;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EORContractBenefitsInner instance itself
   */
  public EORContractBenefitsInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EORContractBenefitsInner eoRContractBenefitsInner = (EORContractBenefitsInner) o;
    return Objects.equals(this.id, eoRContractBenefitsInner.id) &&
        Objects.equals(this.name, eoRContractBenefitsInner.name) &&
        Objects.equals(this.provider, eoRContractBenefitsInner.provider) &&
        Objects.equals(this.offerStatus, eoRContractBenefitsInner.offerStatus) &&
        Objects.equals(this.plan, eoRContractBenefitsInner.plan) &&
        Objects.equals(this.enrollmentDetails, eoRContractBenefitsInner.enrollmentDetails)&&
        Objects.equals(this.additionalProperties, eoRContractBenefitsInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, provider, offerStatus, plan, enrollmentDetails, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EORContractBenefitsInner {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    offerStatus: ").append(toIndentedString(offerStatus)).append("\n");
    sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
    sb.append("    enrollmentDetails: ").append(toIndentedString(enrollmentDetails)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("provider");
    openapiFields.add("offer_status");
    openapiFields.add("plan");
    openapiFields.add("enrollment_details");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EORContractBenefitsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EORContractBenefitsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EORContractBenefitsInner is not found in the empty JSON string", EORContractBenefitsInner.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `provider`
      if (jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull()) {
        EORContractBenefitsInnerProvider.validateJsonObject(jsonObj.getAsJsonObject("provider"));
      }
      if ((jsonObj.get("offer_status") != null && !jsonObj.get("offer_status").isJsonNull()) && !jsonObj.get("offer_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offer_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offer_status").toString()));
      }
      // validate the optional field `plan`
      if (jsonObj.get("plan") != null && !jsonObj.get("plan").isJsonNull()) {
        EORContractBenefitsInnerPlan.validateJsonObject(jsonObj.getAsJsonObject("plan"));
      }
      // validate the optional field `enrollment_details`
      if (jsonObj.get("enrollment_details") != null && !jsonObj.get("enrollment_details").isJsonNull()) {
        EORContractBenefitsInnerEnrollmentDetails.validateJsonObject(jsonObj.getAsJsonObject("enrollment_details"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EORContractBenefitsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EORContractBenefitsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EORContractBenefitsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EORContractBenefitsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<EORContractBenefitsInner>() {
           @Override
           public void write(JsonWriter out, EORContractBenefitsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EORContractBenefitsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EORContractBenefitsInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EORContractBenefitsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EORContractBenefitsInner
  * @throws IOException if the JSON string is invalid with respect to EORContractBenefitsInner
  */
  public static EORContractBenefitsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EORContractBenefitsInner.class);
  }

 /**
  * Convert an instance of EORContractBenefitsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

