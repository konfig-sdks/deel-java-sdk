/*
 * Deel REST API
 * API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Address;
import com.konfigthis.client.model.Email;
import com.konfigthis.client.model.EmployeeDepartment;
import com.konfigthis.client.model.EmployeeDirectManager;
import com.konfigthis.client.model.EmployeeDirectReportsInner;
import com.konfigthis.client.model.EmploymentDetail;
import com.konfigthis.client.model.PeopleClientLegalEntity;
import com.konfigthis.client.model.PeopleCustomField;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PeopleByIdContainerData
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PeopleByIdContainerData {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_FULL_NAME = "full_name";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_ADDRESSES = "addresses";
  @SerializedName(SERIALIZED_NAME_ADDRESSES)
  private List<Address> addresses = null;

  public static final String SERIALIZED_NAME_EMAILS = "emails";
  @SerializedName(SERIALIZED_NAME_EMAILS)
  private List<Email> emails = null;

  public static final String SERIALIZED_NAME_BIRTH_DATE = "birth_date";
  @SerializedName(SERIALIZED_NAME_BIRTH_DATE)
  private String birthDate;

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  public static final String SERIALIZED_NAME_NATIONALITY = "nationality";
  @SerializedName(SERIALIZED_NAME_NATIONALITY)
  private String nationality;

  public static final String SERIALIZED_NAME_CLIENT_LEGAL_ENTITY = "client_legal_entity";
  @SerializedName(SERIALIZED_NAME_CLIENT_LEGAL_ENTITY)
  private PeopleClientLegalEntity clientLegalEntity;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_SENIORITY = "seniority";
  @SerializedName(SERIALIZED_NAME_SENIORITY)
  private String seniority;

  public static final String SERIALIZED_NAME_COMPLETION_DATE = "completion_date";
  @SerializedName(SERIALIZED_NAME_COMPLETION_DATE)
  private String completionDate;

  public static final String SERIALIZED_NAME_DIRECT_MANAGER = "direct_manager";
  @SerializedName(SERIALIZED_NAME_DIRECT_MANAGER)
  private EmployeeDirectManager directManager;

  public static final String SERIALIZED_NAME_DIRECT_REPORTS = "direct_reports";
  @SerializedName(SERIALIZED_NAME_DIRECT_REPORTS)
  private List<EmployeeDirectReportsInner> directReports = null;

  public static final String SERIALIZED_NAME_DIRECT_REPORTS_COUNT = "direct_reports_count";
  @SerializedName(SERIALIZED_NAME_DIRECT_REPORTS_COUNT)
  private Integer directReportsCount;

  public static final String SERIALIZED_NAME_EMPLOYMENTS = "employments";
  @SerializedName(SERIALIZED_NAME_EMPLOYMENTS)
  private List<EmploymentDetail> employments = null;

  public static final String SERIALIZED_NAME_HIRING_STATUS = "hiring_status";
  @SerializedName(SERIALIZED_NAME_HIRING_STATUS)
  private String hiringStatus;

  public static final String SERIALIZED_NAME_NEW_HIRING_STATUS = "new_hiring_status";
  @SerializedName(SERIALIZED_NAME_NEW_HIRING_STATUS)
  private String newHiringStatus;

  public static final String SERIALIZED_NAME_HIRING_TYPE = "hiring_type";
  @SerializedName(SERIALIZED_NAME_HIRING_TYPE)
  private String hiringType;

  public static final String SERIALIZED_NAME_JOB_TITLE = "job_title";
  @SerializedName(SERIALIZED_NAME_JOB_TITLE)
  private String jobTitle;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public static final String SERIALIZED_NAME_DEPARTMENT = "department";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT)
  private EmployeeDepartment department;

  public static final String SERIALIZED_NAME_WORK_LOCATION = "work_location";
  @SerializedName(SERIALIZED_NAME_WORK_LOCATION)
  private String workLocation;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private List<PeopleCustomField> customFields = null;

  public PeopleByIdContainerData() {
  }

  public PeopleByIdContainerData id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier for the employee.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "9b9fc43a-a90c-4615-ac50-baf1e314b53e", value = "Unique identifier for the employee.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public PeopleByIdContainerData createdAt(OffsetDateTime createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The creation timestamp of the employee record.
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2023-03-21T10:27:25.950Z", value = "The creation timestamp of the employee record.")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public PeopleByIdContainerData firstName(String firstName) {
    
    
    
    
    this.firstName = firstName;
    return this;
  }

   /**
   * The first name of the employee.
   * @return firstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "John", value = "The first name of the employee.")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    
    
    
    this.firstName = firstName;
  }


  public PeopleByIdContainerData lastName(String lastName) {
    
    
    
    
    this.lastName = lastName;
    return this;
  }

   /**
   * The last name of the employee.
   * @return lastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Doe", value = "The last name of the employee.")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    
    
    
    this.lastName = lastName;
  }


  public PeopleByIdContainerData fullName(String fullName) {
    
    
    
    
    this.fullName = fullName;
    return this;
  }

   /**
   * The full name of the employee.
   * @return fullName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "John Doe", value = "The full name of the employee.")

  public String getFullName() {
    return fullName;
  }


  public void setFullName(String fullName) {
    
    
    
    this.fullName = fullName;
  }


  public PeopleByIdContainerData addresses(List<Address> addresses) {
    
    
    
    
    this.addresses = addresses;
    return this;
  }

  public PeopleByIdContainerData addAddressesItem(Address addressesItem) {
    if (this.addresses == null) {
      this.addresses = new ArrayList<>();
    }
    this.addresses.add(addressesItem);
    return this;
  }

   /**
   * Get addresses
   * @return addresses
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Address> getAddresses() {
    return addresses;
  }


  public void setAddresses(List<Address> addresses) {
    
    
    
    this.addresses = addresses;
  }


  public PeopleByIdContainerData emails(List<Email> emails) {
    
    
    
    
    this.emails = emails;
    return this;
  }

  public PeopleByIdContainerData addEmailsItem(Email emailsItem) {
    if (this.emails == null) {
      this.emails = new ArrayList<>();
    }
    this.emails.add(emailsItem);
    return this;
  }

   /**
   * An array of the employee&#39;s email addresses.
   * @return emails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of the employee's email addresses.")

  public List<Email> getEmails() {
    return emails;
  }


  public void setEmails(List<Email> emails) {
    
    
    
    this.emails = emails;
  }


  public PeopleByIdContainerData birthDate(String birthDate) {
    
    
    
    
    this.birthDate = birthDate;
    return this;
  }

   /**
   * The birth date of the employee.
   * @return birthDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1990-01-01T00:00:00.000Z", value = "The birth date of the employee.")

  public String getBirthDate() {
    return birthDate;
  }


  public void setBirthDate(String birthDate) {
    
    
    
    this.birthDate = birthDate;
  }


  public PeopleByIdContainerData startDate(LocalDate startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * The date the employee started working.
   * @return startDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date the employee started working.")

  public LocalDate getStartDate() {
    return startDate;
  }


  public void setStartDate(LocalDate startDate) {
    
    
    
    this.startDate = startDate;
  }


  public PeopleByIdContainerData nationality(String nationality) {
    
    
    
    
    this.nationality = nationality;
    return this;
  }

   /**
   * The nationality of the employee.
   * @return nationality
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "American", value = "The nationality of the employee.")

  public String getNationality() {
    return nationality;
  }


  public void setNationality(String nationality) {
    
    
    
    this.nationality = nationality;
  }


  public PeopleByIdContainerData clientLegalEntity(PeopleClientLegalEntity clientLegalEntity) {
    
    
    
    
    this.clientLegalEntity = clientLegalEntity;
    return this;
  }

   /**
   * Get clientLegalEntity
   * @return clientLegalEntity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PeopleClientLegalEntity getClientLegalEntity() {
    return clientLegalEntity;
  }


  public void setClientLegalEntity(PeopleClientLegalEntity clientLegalEntity) {
    
    
    
    this.clientLegalEntity = clientLegalEntity;
  }


  public PeopleByIdContainerData state(String state) {
    
    
    
    
    this.state = state;
    return this;
  }

   /**
   * The state of the employee.
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Active", value = "The state of the employee.")

  public String getState() {
    return state;
  }


  public void setState(String state) {
    
    
    
    this.state = state;
  }


  public PeopleByIdContainerData seniority(String seniority) {
    
    
    
    
    this.seniority = seniority;
    return this;
  }

   /**
   * The seniority level of the employee.
   * @return seniority
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Junior (Individual Contributor Level 1)", value = "The seniority level of the employee.")

  public String getSeniority() {
    return seniority;
  }


  public void setSeniority(String seniority) {
    
    
    
    this.seniority = seniority;
  }


  public PeopleByIdContainerData completionDate(String completionDate) {
    
    
    
    
    this.completionDate = completionDate;
    return this;
  }

   /**
   * The completion date of the task or project.
   * @return completionDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2023-06-20T00:00:00.000Z", value = "The completion date of the task or project.")

  public String getCompletionDate() {
    return completionDate;
  }


  public void setCompletionDate(String completionDate) {
    
    
    
    this.completionDate = completionDate;
  }


  public PeopleByIdContainerData directManager(EmployeeDirectManager directManager) {
    
    
    
    
    this.directManager = directManager;
    return this;
  }

   /**
   * Get directManager
   * @return directManager
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmployeeDirectManager getDirectManager() {
    return directManager;
  }


  public void setDirectManager(EmployeeDirectManager directManager) {
    
    
    
    this.directManager = directManager;
  }


  public PeopleByIdContainerData directReports(List<EmployeeDirectReportsInner> directReports) {
    
    
    
    
    this.directReports = directReports;
    return this;
  }

  public PeopleByIdContainerData addDirectReportsItem(EmployeeDirectReportsInner directReportsItem) {
    if (this.directReports == null) {
      this.directReports = new ArrayList<>();
    }
    this.directReports.add(directReportsItem);
    return this;
  }

   /**
   * The direct reports to the employee.
   * @return directReports
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The direct reports to the employee.")

  public List<EmployeeDirectReportsInner> getDirectReports() {
    return directReports;
  }


  public void setDirectReports(List<EmployeeDirectReportsInner> directReports) {
    
    
    
    this.directReports = directReports;
  }


  public PeopleByIdContainerData directReportsCount(Integer directReportsCount) {
    
    
    
    
    this.directReportsCount = directReportsCount;
    return this;
  }

   /**
   * The count of direct reports to the employee.
   * @return directReportsCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "The count of direct reports to the employee.")

  public Integer getDirectReportsCount() {
    return directReportsCount;
  }


  public void setDirectReportsCount(Integer directReportsCount) {
    
    
    
    this.directReportsCount = directReportsCount;
  }


  public PeopleByIdContainerData employments(List<EmploymentDetail> employments) {
    
    
    
    
    this.employments = employments;
    return this;
  }

  public PeopleByIdContainerData addEmploymentsItem(EmploymentDetail employmentsItem) {
    if (this.employments == null) {
      this.employments = new ArrayList<>();
    }
    this.employments.add(employmentsItem);
    return this;
  }

   /**
   * An array of the employee&#39;s employment details.
   * @return employments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of the employee's employment details.")

  public List<EmploymentDetail> getEmployments() {
    return employments;
  }


  public void setEmployments(List<EmploymentDetail> employments) {
    
    
    
    this.employments = employments;
  }


  public PeopleByIdContainerData hiringStatus(String hiringStatus) {
    
    
    
    
    this.hiringStatus = hiringStatus;
    return this;
  }

   /**
   * The current hiring status of the employee.
   * @return hiringStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "onboarding", value = "The current hiring status of the employee.")

  public String getHiringStatus() {
    return hiringStatus;
  }


  public void setHiringStatus(String hiringStatus) {
    
    
    
    this.hiringStatus = hiringStatus;
  }


  public PeopleByIdContainerData newHiringStatus(String newHiringStatus) {
    
    
    
    
    this.newHiringStatus = newHiringStatus;
    return this;
  }

   /**
   * The new hiring status of the employee.
   * @return newHiringStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "onboarding_overdue", value = "The new hiring status of the employee.")

  public String getNewHiringStatus() {
    return newHiringStatus;
  }


  public void setNewHiringStatus(String newHiringStatus) {
    
    
    
    this.newHiringStatus = newHiringStatus;
  }


  public PeopleByIdContainerData hiringType(String hiringType) {
    
    
    
    
    this.hiringType = hiringType;
    return this;
  }

   /**
   * The type of hiring of the employee.
   * @return hiringType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "contractor", value = "The type of hiring of the employee.")

  public String getHiringType() {
    return hiringType;
  }


  public void setHiringType(String hiringType) {
    
    
    
    this.hiringType = hiringType;
  }


  public PeopleByIdContainerData jobTitle(String jobTitle) {
    
    
    
    
    this.jobTitle = jobTitle;
    return this;
  }

   /**
   * The job title of the employee.
   * @return jobTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Access Field Technician", value = "The job title of the employee.")

  public String getJobTitle() {
    return jobTitle;
  }


  public void setJobTitle(String jobTitle) {
    
    
    
    this.jobTitle = jobTitle;
  }


  public PeopleByIdContainerData country(String country) {
    
    
    
    
    this.country = country;
    return this;
  }

   /**
   * The country of the employee.
   * @return country
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "USA", value = "The country of the employee.")

  public String getCountry() {
    return country;
  }


  public void setCountry(String country) {
    
    
    
    this.country = country;
  }


  public PeopleByIdContainerData timezone(String timezone) {
    
    
    
    
    this.timezone = timezone;
    return this;
  }

   /**
   * The timezone of the employee.
   * @return timezone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "EST", value = "The timezone of the employee.")

  public String getTimezone() {
    return timezone;
  }


  public void setTimezone(String timezone) {
    
    
    
    this.timezone = timezone;
  }


  public PeopleByIdContainerData department(EmployeeDepartment department) {
    
    
    
    
    this.department = department;
    return this;
  }

   /**
   * Get department
   * @return department
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmployeeDepartment getDepartment() {
    return department;
  }


  public void setDepartment(EmployeeDepartment department) {
    
    
    
    this.department = department;
  }


  public PeopleByIdContainerData workLocation(String workLocation) {
    
    
    
    
    this.workLocation = workLocation;
    return this;
  }

   /**
   * The work location of the employee.
   * @return workLocation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Remote", value = "The work location of the employee.")

  public String getWorkLocation() {
    return workLocation;
  }


  public void setWorkLocation(String workLocation) {
    
    
    
    this.workLocation = workLocation;
  }


  public PeopleByIdContainerData updatedAt(OffsetDateTime updatedAt) {
    
    
    
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Long date-time format following ISO-8601
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-05-24T09:38:46.235Z", value = "Long date-time format following ISO-8601")

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    
    
    
    this.updatedAt = updatedAt;
  }


  public PeopleByIdContainerData customFields(List<PeopleCustomField> customFields) {
    
    
    
    
    this.customFields = customFields;
    return this;
  }

  public PeopleByIdContainerData addCustomFieldsItem(PeopleCustomField customFieldsItem) {
    if (this.customFields == null) {
      this.customFields = new ArrayList<>();
    }
    this.customFields.add(customFieldsItem);
    return this;
  }

   /**
   * Get customFields
   * @return customFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<PeopleCustomField> getCustomFields() {
    return customFields;
  }


  public void setCustomFields(List<PeopleCustomField> customFields) {
    
    
    
    this.customFields = customFields;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PeopleByIdContainerData instance itself
   */
  public PeopleByIdContainerData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PeopleByIdContainerData peopleByIdContainerData = (PeopleByIdContainerData) o;
    return Objects.equals(this.id, peopleByIdContainerData.id) &&
        Objects.equals(this.createdAt, peopleByIdContainerData.createdAt) &&
        Objects.equals(this.firstName, peopleByIdContainerData.firstName) &&
        Objects.equals(this.lastName, peopleByIdContainerData.lastName) &&
        Objects.equals(this.fullName, peopleByIdContainerData.fullName) &&
        Objects.equals(this.addresses, peopleByIdContainerData.addresses) &&
        Objects.equals(this.emails, peopleByIdContainerData.emails) &&
        Objects.equals(this.birthDate, peopleByIdContainerData.birthDate) &&
        Objects.equals(this.startDate, peopleByIdContainerData.startDate) &&
        Objects.equals(this.nationality, peopleByIdContainerData.nationality) &&
        Objects.equals(this.clientLegalEntity, peopleByIdContainerData.clientLegalEntity) &&
        Objects.equals(this.state, peopleByIdContainerData.state) &&
        Objects.equals(this.seniority, peopleByIdContainerData.seniority) &&
        Objects.equals(this.completionDate, peopleByIdContainerData.completionDate) &&
        Objects.equals(this.directManager, peopleByIdContainerData.directManager) &&
        Objects.equals(this.directReports, peopleByIdContainerData.directReports) &&
        Objects.equals(this.directReportsCount, peopleByIdContainerData.directReportsCount) &&
        Objects.equals(this.employments, peopleByIdContainerData.employments) &&
        Objects.equals(this.hiringStatus, peopleByIdContainerData.hiringStatus) &&
        Objects.equals(this.newHiringStatus, peopleByIdContainerData.newHiringStatus) &&
        Objects.equals(this.hiringType, peopleByIdContainerData.hiringType) &&
        Objects.equals(this.jobTitle, peopleByIdContainerData.jobTitle) &&
        Objects.equals(this.country, peopleByIdContainerData.country) &&
        Objects.equals(this.timezone, peopleByIdContainerData.timezone) &&
        Objects.equals(this.department, peopleByIdContainerData.department) &&
        Objects.equals(this.workLocation, peopleByIdContainerData.workLocation) &&
        Objects.equals(this.updatedAt, peopleByIdContainerData.updatedAt) &&
        Objects.equals(this.customFields, peopleByIdContainerData.customFields)&&
        Objects.equals(this.additionalProperties, peopleByIdContainerData.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, createdAt, firstName, lastName, fullName, addresses, emails, birthDate, startDate, nationality, clientLegalEntity, state, seniority, completionDate, directManager, directReports, directReportsCount, employments, hiringStatus, newHiringStatus, hiringType, jobTitle, country, timezone, department, workLocation, updatedAt, customFields, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PeopleByIdContainerData {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    addresses: ").append(toIndentedString(addresses)).append("\n");
    sb.append("    emails: ").append(toIndentedString(emails)).append("\n");
    sb.append("    birthDate: ").append(toIndentedString(birthDate)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    nationality: ").append(toIndentedString(nationality)).append("\n");
    sb.append("    clientLegalEntity: ").append(toIndentedString(clientLegalEntity)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    seniority: ").append(toIndentedString(seniority)).append("\n");
    sb.append("    completionDate: ").append(toIndentedString(completionDate)).append("\n");
    sb.append("    directManager: ").append(toIndentedString(directManager)).append("\n");
    sb.append("    directReports: ").append(toIndentedString(directReports)).append("\n");
    sb.append("    directReportsCount: ").append(toIndentedString(directReportsCount)).append("\n");
    sb.append("    employments: ").append(toIndentedString(employments)).append("\n");
    sb.append("    hiringStatus: ").append(toIndentedString(hiringStatus)).append("\n");
    sb.append("    newHiringStatus: ").append(toIndentedString(newHiringStatus)).append("\n");
    sb.append("    hiringType: ").append(toIndentedString(hiringType)).append("\n");
    sb.append("    jobTitle: ").append(toIndentedString(jobTitle)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    department: ").append(toIndentedString(department)).append("\n");
    sb.append("    workLocation: ").append(toIndentedString(workLocation)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("created_at");
    openapiFields.add("first_name");
    openapiFields.add("last_name");
    openapiFields.add("full_name");
    openapiFields.add("addresses");
    openapiFields.add("emails");
    openapiFields.add("birth_date");
    openapiFields.add("start_date");
    openapiFields.add("nationality");
    openapiFields.add("client_legal_entity");
    openapiFields.add("state");
    openapiFields.add("seniority");
    openapiFields.add("completion_date");
    openapiFields.add("direct_manager");
    openapiFields.add("direct_reports");
    openapiFields.add("direct_reports_count");
    openapiFields.add("employments");
    openapiFields.add("hiring_status");
    openapiFields.add("new_hiring_status");
    openapiFields.add("hiring_type");
    openapiFields.add("job_title");
    openapiFields.add("country");
    openapiFields.add("timezone");
    openapiFields.add("department");
    openapiFields.add("work_location");
    openapiFields.add("updated_at");
    openapiFields.add("custom_fields");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PeopleByIdContainerData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PeopleByIdContainerData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PeopleByIdContainerData is not found in the empty JSON string", PeopleByIdContainerData.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("first_name") != null && !jsonObj.get("first_name").isJsonNull()) && !jsonObj.get("first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_name").toString()));
      }
      if ((jsonObj.get("last_name") != null && !jsonObj.get("last_name").isJsonNull()) && !jsonObj.get("last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_name").toString()));
      }
      if ((jsonObj.get("full_name") != null && !jsonObj.get("full_name").isJsonNull()) && !jsonObj.get("full_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `full_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("full_name").toString()));
      }
      if (jsonObj.get("addresses") != null && !jsonObj.get("addresses").isJsonNull()) {
        JsonArray jsonArrayaddresses = jsonObj.getAsJsonArray("addresses");
        if (jsonArrayaddresses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("addresses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `addresses` to be an array in the JSON string but got `%s`", jsonObj.get("addresses").toString()));
          }

          // validate the optional field `addresses` (array)
          for (int i = 0; i < jsonArrayaddresses.size(); i++) {
            Address.validateJsonObject(jsonArrayaddresses.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("emails") != null && !jsonObj.get("emails").isJsonNull()) {
        JsonArray jsonArrayemails = jsonObj.getAsJsonArray("emails");
        if (jsonArrayemails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("emails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `emails` to be an array in the JSON string but got `%s`", jsonObj.get("emails").toString()));
          }

          // validate the optional field `emails` (array)
          for (int i = 0; i < jsonArrayemails.size(); i++) {
            Email.validateJsonObject(jsonArrayemails.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("birth_date") != null && !jsonObj.get("birth_date").isJsonNull()) && !jsonObj.get("birth_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `birth_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("birth_date").toString()));
      }
      if ((jsonObj.get("nationality") != null && !jsonObj.get("nationality").isJsonNull()) && !jsonObj.get("nationality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nationality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nationality").toString()));
      }
      // validate the optional field `client_legal_entity`
      if (jsonObj.get("client_legal_entity") != null && !jsonObj.get("client_legal_entity").isJsonNull()) {
        PeopleClientLegalEntity.validateJsonObject(jsonObj.getAsJsonObject("client_legal_entity"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("seniority") != null && !jsonObj.get("seniority").isJsonNull()) && !jsonObj.get("seniority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seniority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seniority").toString()));
      }
      if (!jsonObj.get("completion_date").isJsonNull() && (jsonObj.get("completion_date") != null && !jsonObj.get("completion_date").isJsonNull()) && !jsonObj.get("completion_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `completion_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("completion_date").toString()));
      }
      // validate the optional field `direct_manager`
      if (jsonObj.get("direct_manager") != null && !jsonObj.get("direct_manager").isJsonNull()) {
        EmployeeDirectManager.validateJsonObject(jsonObj.getAsJsonObject("direct_manager"));
      }
      if (jsonObj.get("direct_reports") != null && !jsonObj.get("direct_reports").isJsonNull()) {
        JsonArray jsonArraydirectReports = jsonObj.getAsJsonArray("direct_reports");
        if (jsonArraydirectReports != null) {
          // ensure the json data is an array
          if (!jsonObj.get("direct_reports").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `direct_reports` to be an array in the JSON string but got `%s`", jsonObj.get("direct_reports").toString()));
          }

          // validate the optional field `direct_reports` (array)
          for (int i = 0; i < jsonArraydirectReports.size(); i++) {
            EmployeeDirectReportsInner.validateJsonObject(jsonArraydirectReports.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("employments") != null && !jsonObj.get("employments").isJsonNull()) {
        JsonArray jsonArrayemployments = jsonObj.getAsJsonArray("employments");
        if (jsonArrayemployments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("employments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `employments` to be an array in the JSON string but got `%s`", jsonObj.get("employments").toString()));
          }

          // validate the optional field `employments` (array)
          for (int i = 0; i < jsonArrayemployments.size(); i++) {
            EmploymentDetail.validateJsonObject(jsonArrayemployments.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("hiring_status") != null && !jsonObj.get("hiring_status").isJsonNull()) && !jsonObj.get("hiring_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hiring_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hiring_status").toString()));
      }
      if ((jsonObj.get("new_hiring_status") != null && !jsonObj.get("new_hiring_status").isJsonNull()) && !jsonObj.get("new_hiring_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `new_hiring_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("new_hiring_status").toString()));
      }
      if ((jsonObj.get("hiring_type") != null && !jsonObj.get("hiring_type").isJsonNull()) && !jsonObj.get("hiring_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hiring_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hiring_type").toString()));
      }
      if ((jsonObj.get("job_title") != null && !jsonObj.get("job_title").isJsonNull()) && !jsonObj.get("job_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `job_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("job_title").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      // validate the optional field `department`
      if (jsonObj.get("department") != null && !jsonObj.get("department").isJsonNull()) {
        EmployeeDepartment.validateJsonObject(jsonObj.getAsJsonObject("department"));
      }
      if ((jsonObj.get("work_location") != null && !jsonObj.get("work_location").isJsonNull()) && !jsonObj.get("work_location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `work_location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("work_location").toString()));
      }
      if (jsonObj.get("custom_fields") != null && !jsonObj.get("custom_fields").isJsonNull()) {
        JsonArray jsonArraycustomFields = jsonObj.getAsJsonArray("custom_fields");
        if (jsonArraycustomFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("custom_fields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `custom_fields` to be an array in the JSON string but got `%s`", jsonObj.get("custom_fields").toString()));
          }

          // validate the optional field `custom_fields` (array)
          for (int i = 0; i < jsonArraycustomFields.size(); i++) {
            PeopleCustomField.validateJsonObject(jsonArraycustomFields.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PeopleByIdContainerData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PeopleByIdContainerData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PeopleByIdContainerData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PeopleByIdContainerData.class));

       return (TypeAdapter<T>) new TypeAdapter<PeopleByIdContainerData>() {
           @Override
           public void write(JsonWriter out, PeopleByIdContainerData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PeopleByIdContainerData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PeopleByIdContainerData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PeopleByIdContainerData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PeopleByIdContainerData
  * @throws IOException if the JSON string is invalid with respect to PeopleByIdContainerData
  */
  public static PeopleByIdContainerData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PeopleByIdContainerData.class);
  }

 /**
  * Convert an instance of PeopleByIdContainerData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

