/*
 * Deel REST API
 * API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.WorkStatementCycleEndTypeEnum;
import com.konfigthis.client.model.WorkStatementCycleScaleEnum;
import com.konfigthis.client.model.WorkStatementPaymentDueTypeEnum;
import com.konfigthis.client.model.WorkStatementScaleEnum;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * You can specify any combination of data points that need changing.
 */
@ApiModel(description = "You can specify any combination of data points that need changing.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ContractDetailsToAmend {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Double amount;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currency_code";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_SCALE = "scale";
  @SerializedName(SERIALIZED_NAME_SCALE)
  private WorkStatementScaleEnum scale;

  public static final String SERIALIZED_NAME_EFFECTIVE_DATE = "effective_date";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DATE)
  private LocalDate effectiveDate;

  public static final String SERIALIZED_NAME_FIRST_PAYMENT_DATE = "first_payment_date";
  @SerializedName(SERIALIZED_NAME_FIRST_PAYMENT_DATE)
  private LocalDate firstPaymentDate;

  public static final String SERIALIZED_NAME_FIRST_PAYMENT = "first_payment";
  @SerializedName(SERIALIZED_NAME_FIRST_PAYMENT)
  private Double firstPayment;

  public static final String SERIALIZED_NAME_FREQUENCY = "frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  private WorkStatementCycleScaleEnum frequency;

  public static final String SERIALIZED_NAME_CYCLE_END = "cycle_end";
  @SerializedName(SERIALIZED_NAME_CYCLE_END)
  private Double cycleEnd;

  public static final String SERIALIZED_NAME_CYCLE_END_TYPE = "cycle_end_type";
  @SerializedName(SERIALIZED_NAME_CYCLE_END_TYPE)
  private WorkStatementCycleEndTypeEnum cycleEndType;

  public static final String SERIALIZED_NAME_PAYMENT_DUE_TYPE = "payment_due_type";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DUE_TYPE)
  private WorkStatementPaymentDueTypeEnum paymentDueType = WorkStatementPaymentDueTypeEnum.REGULAR;

  public static final String SERIALIZED_NAME_PAYMENT_DUE_DAYS = "payment_due_days";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DUE_DAYS)
  private Double paymentDueDays;

  public static final String SERIALIZED_NAME_PAY_BEFORE_WEEKENDS = "pay_before_weekends";
  @SerializedName(SERIALIZED_NAME_PAY_BEFORE_WEEKENDS)
  private Boolean payBeforeWeekends;

  public static final String SERIALIZED_NAME_JOB_TITLE_NAME = "job_title_name";
  @SerializedName(SERIALIZED_NAME_JOB_TITLE_NAME)
  private String jobTitleName;

  public static final String SERIALIZED_NAME_JOB_TITLE_ID = "job_title_id";
  @SerializedName(SERIALIZED_NAME_JOB_TITLE_ID)
  private String jobTitleId;

  public static final String SERIALIZED_NAME_SENIORITY_ID = "seniority_id";
  @SerializedName(SERIALIZED_NAME_SENIORITY_ID)
  private String seniorityId;

  public static final String SERIALIZED_NAME_SPECIAL_CLAUSE = "special_clause";
  @SerializedName(SERIALIZED_NAME_SPECIAL_CLAUSE)
  private String specialClause;

  public static final String SERIALIZED_NAME_SCOPE_OF_WORK = "scope_of_work";
  @SerializedName(SERIALIZED_NAME_SCOPE_OF_WORK)
  private String scopeOfWork;

  public ContractDetailsToAmend() {
  }

  public ContractDetailsToAmend amount(Double amount) {
    if (amount != null && amount < 1) {
      throw new IllegalArgumentException("Invalid value for amount. Must be greater than or equal to 1.");
    }
    
    
    
    this.amount = amount;
    return this;
  }

  public ContractDetailsToAmend amount(Integer amount) {
    if (amount != null && amount < 1) {
      throw new IllegalArgumentException("Invalid value for amount. Must be greater than or equal to 1.");
    }
    
    
    
    this.amount = amount.doubleValue();
    return this;
  }

   /**
   * Get amount
   * minimum: 1
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "100", value = "")

  public Double getAmount() {
    return amount;
  }


  public void setAmount(Double amount) {
    if (amount != null && amount < 1) {
      throw new IllegalArgumentException("Invalid value for amount. Must be greater than or equal to 1.");
    }
    
    
    this.amount = amount;
  }


  public ContractDetailsToAmend currencyCode(String currencyCode) {
    
    
    if (currencyCode != null && currencyCode.length() < 3) {
      throw new IllegalArgumentException("Invalid value for currencyCode. Length must be greater than or equal to 3.");
    }
    
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * Get currencyCode
   * @return currencyCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "GBP", value = "")

  public String getCurrencyCode() {
    return currencyCode;
  }


  public void setCurrencyCode(String currencyCode) {
    
    
    if (currencyCode != null && currencyCode.length() < 3) {
      throw new IllegalArgumentException("Invalid value for currencyCode. Length must be greater than or equal to 3.");
    }
    this.currencyCode = currencyCode;
  }


  public ContractDetailsToAmend scale(WorkStatementScaleEnum scale) {
    
    
    
    
    this.scale = scale;
    return this;
  }

   /**
   * Get scale
   * @return scale
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public WorkStatementScaleEnum getScale() {
    return scale;
  }


  public void setScale(WorkStatementScaleEnum scale) {
    
    
    
    this.scale = scale;
  }


  public ContractDetailsToAmend effectiveDate(LocalDate effectiveDate) {
    
    
    
    
    this.effectiveDate = effectiveDate;
    return this;
  }

   /**
   * Short date in format ISO-8601 (YYYY-MM-DD). For example: 2022-12-31.
   * @return effectiveDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Short date in format ISO-8601 (YYYY-MM-DD). For example: 2022-12-31.")

  public LocalDate getEffectiveDate() {
    return effectiveDate;
  }


  public void setEffectiveDate(LocalDate effectiveDate) {
    
    
    
    this.effectiveDate = effectiveDate;
  }


  public ContractDetailsToAmend firstPaymentDate(LocalDate firstPaymentDate) {
    
    
    
    
    this.firstPaymentDate = firstPaymentDate;
    return this;
  }

   /**
   * Short date in format ISO-8601 (YYYY-MM-DD). For example: 2022-12-31.
   * @return firstPaymentDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Short date in format ISO-8601 (YYYY-MM-DD). For example: 2022-12-31.")

  public LocalDate getFirstPaymentDate() {
    return firstPaymentDate;
  }


  public void setFirstPaymentDate(LocalDate firstPaymentDate) {
    
    
    
    this.firstPaymentDate = firstPaymentDate;
  }


  public ContractDetailsToAmend firstPayment(Double firstPayment) {
    if (firstPayment != null && firstPayment < 0) {
      throw new IllegalArgumentException("Invalid value for firstPayment. Must be greater than or equal to 0.");
    }
    
    
    
    this.firstPayment = firstPayment;
    return this;
  }

  public ContractDetailsToAmend firstPayment(Integer firstPayment) {
    if (firstPayment != null && firstPayment < 0) {
      throw new IllegalArgumentException("Invalid value for firstPayment. Must be greater than or equal to 0.");
    }
    
    
    
    this.firstPayment = firstPayment.doubleValue();
    return this;
  }

   /**
   * Get firstPayment
   * minimum: 0
   * @return firstPayment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getFirstPayment() {
    return firstPayment;
  }


  public void setFirstPayment(Double firstPayment) {
    if (firstPayment != null && firstPayment < 0) {
      throw new IllegalArgumentException("Invalid value for firstPayment. Must be greater than or equal to 0.");
    }
    
    
    this.firstPayment = firstPayment;
  }


  public ContractDetailsToAmend frequency(WorkStatementCycleScaleEnum frequency) {
    
    
    
    
    this.frequency = frequency;
    return this;
  }

   /**
   * Get frequency
   * @return frequency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public WorkStatementCycleScaleEnum getFrequency() {
    return frequency;
  }


  public void setFrequency(WorkStatementCycleScaleEnum frequency) {
    
    
    
    this.frequency = frequency;
  }


  public ContractDetailsToAmend cycleEnd(Double cycleEnd) {
    if (cycleEnd != null && cycleEnd < 1) {
      throw new IllegalArgumentException("Invalid value for cycleEnd. Must be greater than or equal to 1.");
    }
    if (cycleEnd != null && cycleEnd > 31) {
      throw new IllegalArgumentException("Invalid value for cycleEnd. Must be less than or equal to 31.");
    }
    
    
    this.cycleEnd = cycleEnd;
    return this;
  }

  public ContractDetailsToAmend cycleEnd(Integer cycleEnd) {
    if (cycleEnd != null && cycleEnd < 1) {
      throw new IllegalArgumentException("Invalid value for cycleEnd. Must be greater than or equal to 1.");
    }
    if (cycleEnd != null && cycleEnd > 31) {
      throw new IllegalArgumentException("Invalid value for cycleEnd. Must be less than or equal to 31.");
    }
    
    
    this.cycleEnd = cycleEnd.doubleValue();
    return this;
  }

   /**
   * Get cycleEnd
   * minimum: 1
   * maximum: 31
   * @return cycleEnd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getCycleEnd() {
    return cycleEnd;
  }


  public void setCycleEnd(Double cycleEnd) {
    if (cycleEnd != null && cycleEnd < 1) {
      throw new IllegalArgumentException("Invalid value for cycleEnd. Must be greater than or equal to 1.");
    }
    if (cycleEnd != null && cycleEnd > 31) {
      throw new IllegalArgumentException("Invalid value for cycleEnd. Must be less than or equal to 31.");
    }
    
    this.cycleEnd = cycleEnd;
  }


  public ContractDetailsToAmend cycleEndType(WorkStatementCycleEndTypeEnum cycleEndType) {
    
    
    
    
    this.cycleEndType = cycleEndType;
    return this;
  }

   /**
   * Get cycleEndType
   * @return cycleEndType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public WorkStatementCycleEndTypeEnum getCycleEndType() {
    return cycleEndType;
  }


  public void setCycleEndType(WorkStatementCycleEndTypeEnum cycleEndType) {
    
    
    
    this.cycleEndType = cycleEndType;
  }


  public ContractDetailsToAmend paymentDueType(WorkStatementPaymentDueTypeEnum paymentDueType) {
    
    
    
    
    this.paymentDueType = paymentDueType;
    return this;
  }

   /**
   * Get paymentDueType
   * @return paymentDueType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public WorkStatementPaymentDueTypeEnum getPaymentDueType() {
    return paymentDueType;
  }


  public void setPaymentDueType(WorkStatementPaymentDueTypeEnum paymentDueType) {
    
    
    
    this.paymentDueType = paymentDueType;
  }


  public ContractDetailsToAmend paymentDueDays(Double paymentDueDays) {
    if (paymentDueDays != null && paymentDueDays < 0) {
      throw new IllegalArgumentException("Invalid value for paymentDueDays. Must be greater than or equal to 0.");
    }
    if (paymentDueDays != null && paymentDueDays > 90) {
      throw new IllegalArgumentException("Invalid value for paymentDueDays. Must be less than or equal to 90.");
    }
    
    
    this.paymentDueDays = paymentDueDays;
    return this;
  }

  public ContractDetailsToAmend paymentDueDays(Integer paymentDueDays) {
    if (paymentDueDays != null && paymentDueDays < 0) {
      throw new IllegalArgumentException("Invalid value for paymentDueDays. Must be greater than or equal to 0.");
    }
    if (paymentDueDays != null && paymentDueDays > 90) {
      throw new IllegalArgumentException("Invalid value for paymentDueDays. Must be less than or equal to 90.");
    }
    
    
    this.paymentDueDays = paymentDueDays.doubleValue();
    return this;
  }

   /**
   * Get paymentDueDays
   * minimum: 0
   * maximum: 90
   * @return paymentDueDays
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getPaymentDueDays() {
    return paymentDueDays;
  }


  public void setPaymentDueDays(Double paymentDueDays) {
    if (paymentDueDays != null && paymentDueDays < 0) {
      throw new IllegalArgumentException("Invalid value for paymentDueDays. Must be greater than or equal to 0.");
    }
    if (paymentDueDays != null && paymentDueDays > 90) {
      throw new IllegalArgumentException("Invalid value for paymentDueDays. Must be less than or equal to 90.");
    }
    
    this.paymentDueDays = paymentDueDays;
  }


  public ContractDetailsToAmend payBeforeWeekends(Boolean payBeforeWeekends) {
    
    
    
    
    this.payBeforeWeekends = payBeforeWeekends;
    return this;
  }

   /**
   * If the payment due is on a weekend, pay on Friday.
   * @return payBeforeWeekends
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If the payment due is on a weekend, pay on Friday.")

  public Boolean getPayBeforeWeekends() {
    return payBeforeWeekends;
  }


  public void setPayBeforeWeekends(Boolean payBeforeWeekends) {
    
    
    
    this.payBeforeWeekends = payBeforeWeekends;
  }


  public ContractDetailsToAmend jobTitleName(String jobTitleName) {
    
    
    
    
    this.jobTitleName = jobTitleName;
    return this;
  }

   /**
   * You can enter new job title.
   * @return jobTitleName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3D Designer", value = "You can enter new job title.")

  public String getJobTitleName() {
    return jobTitleName;
  }


  public void setJobTitleName(String jobTitleName) {
    
    
    
    this.jobTitleName = jobTitleName;
  }


  public ContractDetailsToAmend jobTitleId(String jobTitleId) {
    
    
    
    
    this.jobTitleId = jobTitleId;
    return this;
  }

   /**
   * Unique identifier of this resource.
   * @return jobTitleId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "00000000-0000-0000-0000-000000000000", value = "Unique identifier of this resource.")

  public String getJobTitleId() {
    return jobTitleId;
  }


  public void setJobTitleId(String jobTitleId) {
    
    
    
    this.jobTitleId = jobTitleId;
  }


  public ContractDetailsToAmend seniorityId(String seniorityId) {
    
    
    
    
    this.seniorityId = seniorityId;
    return this;
  }

   /**
   * Unique identifier of this resource.
   * @return seniorityId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "00000000-0000-0000-0000-000000000000", value = "Unique identifier of this resource.")

  public String getSeniorityId() {
    return seniorityId;
  }


  public void setSeniorityId(String seniorityId) {
    
    
    
    this.seniorityId = seniorityId;
  }


  public ContractDetailsToAmend specialClause(String specialClause) {
    
    
    
    
    this.specialClause = specialClause;
    return this;
  }

   /**
   * Text to describe any special clause in contract.
   * @return specialClause
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Text to describe any special clause in contract.")

  public String getSpecialClause() {
    return specialClause;
  }


  public void setSpecialClause(String specialClause) {
    
    
    
    this.specialClause = specialClause;
  }


  public ContractDetailsToAmend scopeOfWork(String scopeOfWork) {
    
    
    
    
    this.scopeOfWork = scopeOfWork;
    return this;
  }

   /**
   * Text to describe the scope of work of the contract.
   * @return scopeOfWork
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Text to describe the scope of work of the contract.")

  public String getScopeOfWork() {
    return scopeOfWork;
  }


  public void setScopeOfWork(String scopeOfWork) {
    
    
    
    this.scopeOfWork = scopeOfWork;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ContractDetailsToAmend instance itself
   */
  public ContractDetailsToAmend putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContractDetailsToAmend contractDetailsToAmend = (ContractDetailsToAmend) o;
    return Objects.equals(this.amount, contractDetailsToAmend.amount) &&
        Objects.equals(this.currencyCode, contractDetailsToAmend.currencyCode) &&
        Objects.equals(this.scale, contractDetailsToAmend.scale) &&
        Objects.equals(this.effectiveDate, contractDetailsToAmend.effectiveDate) &&
        Objects.equals(this.firstPaymentDate, contractDetailsToAmend.firstPaymentDate) &&
        Objects.equals(this.firstPayment, contractDetailsToAmend.firstPayment) &&
        Objects.equals(this.frequency, contractDetailsToAmend.frequency) &&
        Objects.equals(this.cycleEnd, contractDetailsToAmend.cycleEnd) &&
        Objects.equals(this.cycleEndType, contractDetailsToAmend.cycleEndType) &&
        Objects.equals(this.paymentDueType, contractDetailsToAmend.paymentDueType) &&
        Objects.equals(this.paymentDueDays, contractDetailsToAmend.paymentDueDays) &&
        Objects.equals(this.payBeforeWeekends, contractDetailsToAmend.payBeforeWeekends) &&
        Objects.equals(this.jobTitleName, contractDetailsToAmend.jobTitleName) &&
        Objects.equals(this.jobTitleId, contractDetailsToAmend.jobTitleId) &&
        Objects.equals(this.seniorityId, contractDetailsToAmend.seniorityId) &&
        Objects.equals(this.specialClause, contractDetailsToAmend.specialClause) &&
        Objects.equals(this.scopeOfWork, contractDetailsToAmend.scopeOfWork)&&
        Objects.equals(this.additionalProperties, contractDetailsToAmend.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, currencyCode, scale, effectiveDate, firstPaymentDate, firstPayment, frequency, cycleEnd, cycleEndType, paymentDueType, paymentDueDays, payBeforeWeekends, jobTitleName, jobTitleId, seniorityId, specialClause, scopeOfWork, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContractDetailsToAmend {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    scale: ").append(toIndentedString(scale)).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    firstPaymentDate: ").append(toIndentedString(firstPaymentDate)).append("\n");
    sb.append("    firstPayment: ").append(toIndentedString(firstPayment)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    cycleEnd: ").append(toIndentedString(cycleEnd)).append("\n");
    sb.append("    cycleEndType: ").append(toIndentedString(cycleEndType)).append("\n");
    sb.append("    paymentDueType: ").append(toIndentedString(paymentDueType)).append("\n");
    sb.append("    paymentDueDays: ").append(toIndentedString(paymentDueDays)).append("\n");
    sb.append("    payBeforeWeekends: ").append(toIndentedString(payBeforeWeekends)).append("\n");
    sb.append("    jobTitleName: ").append(toIndentedString(jobTitleName)).append("\n");
    sb.append("    jobTitleId: ").append(toIndentedString(jobTitleId)).append("\n");
    sb.append("    seniorityId: ").append(toIndentedString(seniorityId)).append("\n");
    sb.append("    specialClause: ").append(toIndentedString(specialClause)).append("\n");
    sb.append("    scopeOfWork: ").append(toIndentedString(scopeOfWork)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("currency_code");
    openapiFields.add("scale");
    openapiFields.add("effective_date");
    openapiFields.add("first_payment_date");
    openapiFields.add("first_payment");
    openapiFields.add("frequency");
    openapiFields.add("cycle_end");
    openapiFields.add("cycle_end_type");
    openapiFields.add("payment_due_type");
    openapiFields.add("payment_due_days");
    openapiFields.add("pay_before_weekends");
    openapiFields.add("job_title_name");
    openapiFields.add("job_title_id");
    openapiFields.add("seniority_id");
    openapiFields.add("special_clause");
    openapiFields.add("scope_of_work");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ContractDetailsToAmend
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ContractDetailsToAmend.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContractDetailsToAmend is not found in the empty JSON string", ContractDetailsToAmend.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("currency_code") != null && !jsonObj.get("currency_code").isJsonNull()) && !jsonObj.get("currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency_code").toString()));
      }
      if ((jsonObj.get("job_title_name") != null && !jsonObj.get("job_title_name").isJsonNull()) && !jsonObj.get("job_title_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `job_title_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("job_title_name").toString()));
      }
      if ((jsonObj.get("job_title_id") != null && !jsonObj.get("job_title_id").isJsonNull()) && !jsonObj.get("job_title_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `job_title_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("job_title_id").toString()));
      }
      if ((jsonObj.get("seniority_id") != null && !jsonObj.get("seniority_id").isJsonNull()) && !jsonObj.get("seniority_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seniority_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seniority_id").toString()));
      }
      if ((jsonObj.get("special_clause") != null && !jsonObj.get("special_clause").isJsonNull()) && !jsonObj.get("special_clause").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `special_clause` to be a primitive type in the JSON string but got `%s`", jsonObj.get("special_clause").toString()));
      }
      if ((jsonObj.get("scope_of_work") != null && !jsonObj.get("scope_of_work").isJsonNull()) && !jsonObj.get("scope_of_work").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope_of_work` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope_of_work").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContractDetailsToAmend.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContractDetailsToAmend' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContractDetailsToAmend> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContractDetailsToAmend.class));

       return (TypeAdapter<T>) new TypeAdapter<ContractDetailsToAmend>() {
           @Override
           public void write(JsonWriter out, ContractDetailsToAmend value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ContractDetailsToAmend read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ContractDetailsToAmend instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ContractDetailsToAmend given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ContractDetailsToAmend
  * @throws IOException if the JSON string is invalid with respect to ContractDetailsToAmend
  */
  public static ContractDetailsToAmend fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContractDetailsToAmend.class);
  }

 /**
  * Convert an instance of ContractDetailsToAmend to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

