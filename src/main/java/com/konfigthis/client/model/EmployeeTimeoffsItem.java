/*
 * Deel REST API
 * API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EmployeeTimeoffsItemAttachmentsInner;
import com.konfigthis.client.model.EmployeeTimeoffsItemRequester;
import com.konfigthis.client.model.EmployeeTimeoffsItemReviewer;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EmployeeTimeoffsItem
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EmployeeTimeoffsItem {
  public static final String SERIALIZED_NAME_TIME_OFF_ID = "time_off_id";
  @SerializedName(SERIALIZED_NAME_TIME_OFF_ID)
  private String timeOffId;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  /**
   * Time off type.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    VACATION("VACATION"),
    
    SICK_LEAVE("SICK_LEAVE"),
    
    OTHER("OTHER");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_REQUESTED_AT = "requested_at";
  @SerializedName(SERIALIZED_NAME_REQUESTED_AT)
  private String requestedAt;

  public static final String SERIALIZED_NAME_REVIEWED_AT = "reviewed_at";
  @SerializedName(SERIALIZED_NAME_REVIEWED_AT)
  private String reviewedAt;

  public static final String SERIALIZED_NAME_WITH_MULTIPLE_DATES = "with_multiple_dates";
  @SerializedName(SERIALIZED_NAME_WITH_MULTIPLE_DATES)
  private Boolean withMultipleDates;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public static final String SERIALIZED_NAME_DENIAL_REASON = "denial_reason";
  @SerializedName(SERIALIZED_NAME_DENIAL_REASON)
  private String denialReason;

  public static final String SERIALIZED_NAME_REQUESTER = "requester";
  @SerializedName(SERIALIZED_NAME_REQUESTER)
  private EmployeeTimeoffsItemRequester requester;

  public static final String SERIALIZED_NAME_REVIEWER = "reviewer";
  @SerializedName(SERIALIZED_NAME_REVIEWER)
  private EmployeeTimeoffsItemReviewer reviewer;

  public static final String SERIALIZED_NAME_DAYS_USED_START_YEAR = "days_used_start_year";
  @SerializedName(SERIALIZED_NAME_DAYS_USED_START_YEAR)
  private String daysUsedStartYear;

  public static final String SERIALIZED_NAME_DAYS_USED_END_YEAR = "days_used_end_year";
  @SerializedName(SERIALIZED_NAME_DAYS_USED_END_YEAR)
  private String daysUsedEndYear;

  public static final String SERIALIZED_NAME_DAYS_USED = "days_used";
  @SerializedName(SERIALIZED_NAME_DAYS_USED)
  private String daysUsed;

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_END_DATE = "end_date";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private String endDate;

  public static final String SERIALIZED_NAME_IS_START_DATE_HALF_DAY = "is_start_date_half_day";
  @SerializedName(SERIALIZED_NAME_IS_START_DATE_HALF_DAY)
  private Boolean isStartDateHalfDay;

  public static final String SERIALIZED_NAME_IS_END_DATE_HALF_DAY = "is_end_date_half_day";
  @SerializedName(SERIALIZED_NAME_IS_END_DATE_HALF_DAY)
  private Boolean isEndDateHalfDay;

  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<EmployeeTimeoffsItemAttachmentsInner> attachments = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHANGE_REQUEST = "change_request";
  @SerializedName(SERIALIZED_NAME_CHANGE_REQUEST)
  private String changeRequest;

  public EmployeeTimeoffsItem() {
  }

  public EmployeeTimeoffsItem timeOffId(String timeOffId) {
    
    
    
    
    this.timeOffId = timeOffId;
    return this;
  }

   /**
   * Unique identifier of this resource.
   * @return timeOffId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "00000000-0000-0000-0000-000000000000", required = true, value = "Unique identifier of this resource.")

  public String getTimeOffId() {
    return timeOffId;
  }


  public void setTimeOffId(String timeOffId) {
    
    
    
    this.timeOffId = timeOffId;
  }


  public EmployeeTimeoffsItem reason(String reason) {
    
    
    
    
    this.reason = reason;
    return this;
  }

   /**
   * Get reason
   * @return reason
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "I need to relax.", required = true, value = "")

  public String getReason() {
    return reason;
  }


  public void setReason(String reason) {
    
    
    
    this.reason = reason;
  }


  public EmployeeTimeoffsItem type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Time off type.
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "VACATION", required = true, value = "Time off type.")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public EmployeeTimeoffsItem requestedAt(String requestedAt) {
    
    
    
    
    this.requestedAt = requestedAt;
    return this;
  }

   /**
   * Get requestedAt
   * @return requestedAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2023-08-03T22:00:00.000Z", required = true, value = "")

  public String getRequestedAt() {
    return requestedAt;
  }


  public void setRequestedAt(String requestedAt) {
    
    
    
    this.requestedAt = requestedAt;
  }


  public EmployeeTimeoffsItem reviewedAt(String reviewedAt) {
    
    
    
    
    this.reviewedAt = reviewedAt;
    return this;
  }

   /**
   * Get reviewedAt
   * @return reviewedAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2023-08-03T22:00:00.000Z", required = true, value = "")

  public String getReviewedAt() {
    return reviewedAt;
  }


  public void setReviewedAt(String reviewedAt) {
    
    
    
    this.reviewedAt = reviewedAt;
  }


  public EmployeeTimeoffsItem withMultipleDates(Boolean withMultipleDates) {
    
    
    
    
    this.withMultipleDates = withMultipleDates;
    return this;
  }

   /**
   * Get withMultipleDates
   * @return withMultipleDates
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "")

  public Boolean getWithMultipleDates() {
    return withMultipleDates;
  }


  public void setWithMultipleDates(Boolean withMultipleDates) {
    
    
    
    this.withMultipleDates = withMultipleDates;
  }


  public EmployeeTimeoffsItem createdAt(String createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2023-08-03T22:00:00.000Z", required = true, value = "")

  public String getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(String createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public EmployeeTimeoffsItem updatedAt(String updatedAt) {
    
    
    
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2023-08-03T22:00:00.000Z", required = true, value = "")

  public String getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(String updatedAt) {
    
    
    
    this.updatedAt = updatedAt;
  }


  public EmployeeTimeoffsItem denialReason(String denialReason) {
    
    
    
    
    this.denialReason = denialReason;
    return this;
  }

   /**
   * Get denialReason
   * @return denialReason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", required = true, value = "")

  public String getDenialReason() {
    return denialReason;
  }


  public void setDenialReason(String denialReason) {
    
    
    
    this.denialReason = denialReason;
  }


  public EmployeeTimeoffsItem requester(EmployeeTimeoffsItemRequester requester) {
    
    
    
    
    this.requester = requester;
    return this;
  }

   /**
   * Get requester
   * @return requester
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EmployeeTimeoffsItemRequester getRequester() {
    return requester;
  }


  public void setRequester(EmployeeTimeoffsItemRequester requester) {
    
    
    
    this.requester = requester;
  }


  public EmployeeTimeoffsItem reviewer(EmployeeTimeoffsItemReviewer reviewer) {
    
    
    
    
    this.reviewer = reviewer;
    return this;
  }

   /**
   * Get reviewer
   * @return reviewer
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EmployeeTimeoffsItemReviewer getReviewer() {
    return reviewer;
  }


  public void setReviewer(EmployeeTimeoffsItemReviewer reviewer) {
    
    
    
    this.reviewer = reviewer;
  }


  public EmployeeTimeoffsItem daysUsedStartYear(String daysUsedStartYear) {
    
    
    
    
    this.daysUsedStartYear = daysUsedStartYear;
    return this;
  }

   /**
   * Get daysUsedStartYear
   * @return daysUsedStartYear
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0.50", required = true, value = "")

  public String getDaysUsedStartYear() {
    return daysUsedStartYear;
  }


  public void setDaysUsedStartYear(String daysUsedStartYear) {
    
    
    
    this.daysUsedStartYear = daysUsedStartYear;
  }


  public EmployeeTimeoffsItem daysUsedEndYear(String daysUsedEndYear) {
    
    
    
    
    this.daysUsedEndYear = daysUsedEndYear;
    return this;
  }

   /**
   * Get daysUsedEndYear
   * @return daysUsedEndYear
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0.00", required = true, value = "")

  public String getDaysUsedEndYear() {
    return daysUsedEndYear;
  }


  public void setDaysUsedEndYear(String daysUsedEndYear) {
    
    
    
    this.daysUsedEndYear = daysUsedEndYear;
  }


  public EmployeeTimeoffsItem daysUsed(String daysUsed) {
    
    
    
    
    this.daysUsed = daysUsed;
    return this;
  }

   /**
   * Get daysUsed
   * @return daysUsed
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0.50", required = true, value = "")

  public String getDaysUsed() {
    return daysUsed;
  }


  public void setDaysUsed(String daysUsed) {
    
    
    
    this.daysUsed = daysUsed;
  }


  public EmployeeTimeoffsItem startDate(String startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Get startDate
   * @return startDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2024-02-23T23:00:00.000Z", required = true, value = "")

  public String getStartDate() {
    return startDate;
  }


  public void setStartDate(String startDate) {
    
    
    
    this.startDate = startDate;
  }


  public EmployeeTimeoffsItem endDate(String endDate) {
    
    
    
    
    this.endDate = endDate;
    return this;
  }

   /**
   * Get endDate
   * @return endDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2024-02-25T23:00:00.000Z", required = true, value = "")

  public String getEndDate() {
    return endDate;
  }


  public void setEndDate(String endDate) {
    
    
    
    this.endDate = endDate;
  }


  public EmployeeTimeoffsItem isStartDateHalfDay(Boolean isStartDateHalfDay) {
    
    
    
    
    this.isStartDateHalfDay = isStartDateHalfDay;
    return this;
  }

   /**
   * Get isStartDateHalfDay
   * @return isStartDateHalfDay
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "")

  public Boolean getIsStartDateHalfDay() {
    return isStartDateHalfDay;
  }


  public void setIsStartDateHalfDay(Boolean isStartDateHalfDay) {
    
    
    
    this.isStartDateHalfDay = isStartDateHalfDay;
  }


  public EmployeeTimeoffsItem isEndDateHalfDay(Boolean isEndDateHalfDay) {
    
    
    
    
    this.isEndDateHalfDay = isEndDateHalfDay;
    return this;
  }

   /**
   * Get isEndDateHalfDay
   * @return isEndDateHalfDay
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "")

  public Boolean getIsEndDateHalfDay() {
    return isEndDateHalfDay;
  }


  public void setIsEndDateHalfDay(Boolean isEndDateHalfDay) {
    
    
    
    this.isEndDateHalfDay = isEndDateHalfDay;
  }


  public EmployeeTimeoffsItem attachments(List<EmployeeTimeoffsItemAttachmentsInner> attachments) {
    
    
    
    
    this.attachments = attachments;
    return this;
  }

  public EmployeeTimeoffsItem addAttachmentsItem(EmployeeTimeoffsItemAttachmentsInner attachmentsItem) {
    this.attachments.add(attachmentsItem);
    return this;
  }

   /**
   * Get attachments
   * @return attachments
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "[]", required = true, value = "")

  public List<EmployeeTimeoffsItemAttachmentsInner> getAttachments() {
    return attachments;
  }


  public void setAttachments(List<EmployeeTimeoffsItemAttachmentsInner> attachments) {
    
    
    
    this.attachments = attachments;
  }


  public EmployeeTimeoffsItem changeRequest(String changeRequest) {
    
    
    
    
    this.changeRequest = changeRequest;
    return this;
  }

   /**
   * Get changeRequest
   * @return changeRequest
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "", required = true, value = "")

  public String getChangeRequest() {
    return changeRequest;
  }


  public void setChangeRequest(String changeRequest) {
    
    
    
    this.changeRequest = changeRequest;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EmployeeTimeoffsItem instance itself
   */
  public EmployeeTimeoffsItem putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmployeeTimeoffsItem employeeTimeoffsItem = (EmployeeTimeoffsItem) o;
    return Objects.equals(this.timeOffId, employeeTimeoffsItem.timeOffId) &&
        Objects.equals(this.reason, employeeTimeoffsItem.reason) &&
        Objects.equals(this.type, employeeTimeoffsItem.type) &&
        Objects.equals(this.requestedAt, employeeTimeoffsItem.requestedAt) &&
        Objects.equals(this.reviewedAt, employeeTimeoffsItem.reviewedAt) &&
        Objects.equals(this.withMultipleDates, employeeTimeoffsItem.withMultipleDates) &&
        Objects.equals(this.createdAt, employeeTimeoffsItem.createdAt) &&
        Objects.equals(this.updatedAt, employeeTimeoffsItem.updatedAt) &&
        Objects.equals(this.denialReason, employeeTimeoffsItem.denialReason) &&
        Objects.equals(this.requester, employeeTimeoffsItem.requester) &&
        Objects.equals(this.reviewer, employeeTimeoffsItem.reviewer) &&
        Objects.equals(this.daysUsedStartYear, employeeTimeoffsItem.daysUsedStartYear) &&
        Objects.equals(this.daysUsedEndYear, employeeTimeoffsItem.daysUsedEndYear) &&
        Objects.equals(this.daysUsed, employeeTimeoffsItem.daysUsed) &&
        Objects.equals(this.startDate, employeeTimeoffsItem.startDate) &&
        Objects.equals(this.endDate, employeeTimeoffsItem.endDate) &&
        Objects.equals(this.isStartDateHalfDay, employeeTimeoffsItem.isStartDateHalfDay) &&
        Objects.equals(this.isEndDateHalfDay, employeeTimeoffsItem.isEndDateHalfDay) &&
        Objects.equals(this.attachments, employeeTimeoffsItem.attachments) &&
        Objects.equals(this.changeRequest, employeeTimeoffsItem.changeRequest)&&
        Objects.equals(this.additionalProperties, employeeTimeoffsItem.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timeOffId, reason, type, requestedAt, reviewedAt, withMultipleDates, createdAt, updatedAt, denialReason, requester, reviewer, daysUsedStartYear, daysUsedEndYear, daysUsed, startDate, endDate, isStartDateHalfDay, isEndDateHalfDay, attachments, changeRequest, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmployeeTimeoffsItem {\n");
    sb.append("    timeOffId: ").append(toIndentedString(timeOffId)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    requestedAt: ").append(toIndentedString(requestedAt)).append("\n");
    sb.append("    reviewedAt: ").append(toIndentedString(reviewedAt)).append("\n");
    sb.append("    withMultipleDates: ").append(toIndentedString(withMultipleDates)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    denialReason: ").append(toIndentedString(denialReason)).append("\n");
    sb.append("    requester: ").append(toIndentedString(requester)).append("\n");
    sb.append("    reviewer: ").append(toIndentedString(reviewer)).append("\n");
    sb.append("    daysUsedStartYear: ").append(toIndentedString(daysUsedStartYear)).append("\n");
    sb.append("    daysUsedEndYear: ").append(toIndentedString(daysUsedEndYear)).append("\n");
    sb.append("    daysUsed: ").append(toIndentedString(daysUsed)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    isStartDateHalfDay: ").append(toIndentedString(isStartDateHalfDay)).append("\n");
    sb.append("    isEndDateHalfDay: ").append(toIndentedString(isEndDateHalfDay)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    changeRequest: ").append(toIndentedString(changeRequest)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("time_off_id");
    openapiFields.add("reason");
    openapiFields.add("type");
    openapiFields.add("requested_at");
    openapiFields.add("reviewed_at");
    openapiFields.add("with_multiple_dates");
    openapiFields.add("created_at");
    openapiFields.add("updated_at");
    openapiFields.add("denial_reason");
    openapiFields.add("requester");
    openapiFields.add("reviewer");
    openapiFields.add("days_used_start_year");
    openapiFields.add("days_used_end_year");
    openapiFields.add("days_used");
    openapiFields.add("start_date");
    openapiFields.add("end_date");
    openapiFields.add("is_start_date_half_day");
    openapiFields.add("is_end_date_half_day");
    openapiFields.add("attachments");
    openapiFields.add("change_request");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("time_off_id");
    openapiRequiredFields.add("reason");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("requested_at");
    openapiRequiredFields.add("reviewed_at");
    openapiRequiredFields.add("with_multiple_dates");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("updated_at");
    openapiRequiredFields.add("denial_reason");
    openapiRequiredFields.add("requester");
    openapiRequiredFields.add("reviewer");
    openapiRequiredFields.add("days_used_start_year");
    openapiRequiredFields.add("days_used_end_year");
    openapiRequiredFields.add("days_used");
    openapiRequiredFields.add("start_date");
    openapiRequiredFields.add("end_date");
    openapiRequiredFields.add("is_start_date_half_day");
    openapiRequiredFields.add("is_end_date_half_day");
    openapiRequiredFields.add("attachments");
    openapiRequiredFields.add("change_request");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmployeeTimeoffsItem
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EmployeeTimeoffsItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmployeeTimeoffsItem is not found in the empty JSON string", EmployeeTimeoffsItem.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EmployeeTimeoffsItem.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("time_off_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_off_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_off_id").toString()));
      }
      if (!jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("requested_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requested_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requested_at").toString()));
      }
      if (!jsonObj.get("reviewed_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reviewed_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reviewed_at").toString()));
      }
      if (!jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if (!jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
      if (!jsonObj.get("denial_reason").isJsonNull() && !jsonObj.get("denial_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `denial_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("denial_reason").toString()));
      }
      // validate the required field `requester`
      EmployeeTimeoffsItemRequester.validateJsonObject(jsonObj.getAsJsonObject("requester"));
      // validate the required field `reviewer`
      EmployeeTimeoffsItemReviewer.validateJsonObject(jsonObj.getAsJsonObject("reviewer"));
      if (!jsonObj.get("days_used_start_year").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `days_used_start_year` to be a primitive type in the JSON string but got `%s`", jsonObj.get("days_used_start_year").toString()));
      }
      if (!jsonObj.get("days_used_end_year").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `days_used_end_year` to be a primitive type in the JSON string but got `%s`", jsonObj.get("days_used_end_year").toString()));
      }
      if (!jsonObj.get("days_used").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `days_used` to be a primitive type in the JSON string but got `%s`", jsonObj.get("days_used").toString()));
      }
      if (!jsonObj.get("start_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_date").toString()));
      }
      if (!jsonObj.get("end_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end_date").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("attachments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
      }

      JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("attachments");
      // validate the required field `attachments` (array)
      for (int i = 0; i < jsonArrayattachments.size(); i++) {
        EmployeeTimeoffsItemAttachmentsInner.validateJsonObject(jsonArrayattachments.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("change_request").isJsonNull() && !jsonObj.get("change_request").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `change_request` to be a primitive type in the JSON string but got `%s`", jsonObj.get("change_request").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmployeeTimeoffsItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmployeeTimeoffsItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmployeeTimeoffsItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmployeeTimeoffsItem.class));

       return (TypeAdapter<T>) new TypeAdapter<EmployeeTimeoffsItem>() {
           @Override
           public void write(JsonWriter out, EmployeeTimeoffsItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EmployeeTimeoffsItem read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EmployeeTimeoffsItem instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmployeeTimeoffsItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmployeeTimeoffsItem
  * @throws IOException if the JSON string is invalid with respect to EmployeeTimeoffsItem
  */
  public static EmployeeTimeoffsItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmployeeTimeoffsItem.class);
  }

 /**
  * Convert an instance of EmployeeTimeoffsItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

