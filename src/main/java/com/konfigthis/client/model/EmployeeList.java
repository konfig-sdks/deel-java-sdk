/*
 * Deel REST API
 * API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EmployeeListClientLegalEntity;
import com.konfigthis.client.model.EmployeeListMonthlyPayment;
import com.konfigthis.client.model.EmployeeListPaymentsInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EmployeeList
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EmployeeList {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_FULL_NAME = "full_name";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public static final String SERIALIZED_NAME_PERSONAL_EMAIL = "personal_email";
  @SerializedName(SERIALIZED_NAME_PERSONAL_EMAIL)
  private String personalEmail;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_BIRTH_DATE = "birth_date";
  @SerializedName(SERIALIZED_NAME_BIRTH_DATE)
  private String birthDate;

  public static final String SERIALIZED_NAME_PIC_URL = "pic_url";
  @SerializedName(SERIALIZED_NAME_PIC_URL)
  private String picUrl;

  public static final String SERIALIZED_NAME_HIRING_TYPE = "hiring_type";
  @SerializedName(SERIALIZED_NAME_HIRING_TYPE)
  private String hiringType;

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_TEAM = "team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private String team;

  public static final String SERIALIZED_NAME_TEAM_ID = "team_id";
  @SerializedName(SERIALIZED_NAME_TEAM_ID)
  private Double teamId;

  public static final String SERIALIZED_NAME_JOB_TITLE = "job_title";
  @SerializedName(SERIALIZED_NAME_JOB_TITLE)
  private String jobTitle;

  public static final String SERIALIZED_NAME_PAYMENTS = "payments";
  @SerializedName(SERIALIZED_NAME_PAYMENTS)
  private List<EmployeeListPaymentsInner> payments = null;

  public static final String SERIALIZED_NAME_HOURLY_REPORT_TOTAL = "hourly_report_total";
  @SerializedName(SERIALIZED_NAME_HOURLY_REPORT_TOTAL)
  private String hourlyReportTotal;

  public static final String SERIALIZED_NAME_CLIENT_LEGAL_ENTITY = "client_legal_entity";
  @SerializedName(SERIALIZED_NAME_CLIENT_LEGAL_ENTITY)
  private EmployeeListClientLegalEntity clientLegalEntity;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_SENIORITY = "seniority";
  @SerializedName(SERIALIZED_NAME_SENIORITY)
  private String seniority;

  public static final String SERIALIZED_NAME_COMPLETION_DATE = "completion_date";
  @SerializedName(SERIALIZED_NAME_COMPLETION_DATE)
  private String completionDate;

  public static final String SERIALIZED_NAME_HIRING_STATUS = "hiring_status";
  @SerializedName(SERIALIZED_NAME_HIRING_STATUS)
  private String hiringStatus;

  public static final String SERIALIZED_NAME_MONTHLY_PAYMENT = "monthly_payment";
  @SerializedName(SERIALIZED_NAME_MONTHLY_PAYMENT)
  private EmployeeListMonthlyPayment monthlyPayment;

  public EmployeeList() {
  }

  public EmployeeList id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "a7cc0404-0a13-442a-92d0-dfcbc7e6f1ad", value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public EmployeeList firstName(String firstName) {
    
    
    
    
    this.firstName = firstName;
    return this;
  }

   /**
   * Get firstName
   * @return firstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "John", value = "")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    
    
    
    this.firstName = firstName;
  }


  public EmployeeList lastName(String lastName) {
    
    
    
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Get lastName
   * @return lastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Smith", value = "")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    
    
    
    this.lastName = lastName;
  }


  public EmployeeList fullName(String fullName) {
    
    
    
    
    this.fullName = fullName;
    return this;
  }

   /**
   * Get fullName
   * @return fullName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "John Smith", value = "")

  public String getFullName() {
    return fullName;
  }


  public void setFullName(String fullName) {
    
    
    
    this.fullName = fullName;
  }


  public EmployeeList email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "john@example.com", value = "")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public EmployeeList timezone(String timezone) {
    
    
    
    
    this.timezone = timezone;
    return this;
  }

   /**
   * Get timezone
   * @return timezone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "America/Sao_Paulo", value = "")

  public String getTimezone() {
    return timezone;
  }


  public void setTimezone(String timezone) {
    
    
    
    this.timezone = timezone;
  }


  public EmployeeList personalEmail(String personalEmail) {
    
    
    
    
    this.personalEmail = personalEmail;
    return this;
  }

   /**
   * Get personalEmail
   * @return personalEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "john@example.com", value = "")

  public String getPersonalEmail() {
    return personalEmail;
  }


  public void setPersonalEmail(String personalEmail) {
    
    
    
    this.personalEmail = personalEmail;
  }


  public EmployeeList country(String country) {
    
    
    
    
    this.country = country;
    return this;
  }

   /**
   * Get country
   * @return country
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "BR", value = "")

  public String getCountry() {
    return country;
  }


  public void setCountry(String country) {
    
    
    
    this.country = country;
  }


  public EmployeeList birthDate(String birthDate) {
    
    
    
    
    this.birthDate = birthDate;
    return this;
  }

   /**
   * Get birthDate
   * @return birthDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1984-12-26T00:00:00.000Z", value = "")

  public String getBirthDate() {
    return birthDate;
  }


  public void setBirthDate(String birthDate) {
    
    
    
    this.birthDate = birthDate;
  }


  public EmployeeList picUrl(String picUrl) {
    
    
    
    
    this.picUrl = picUrl;
    return this;
  }

   /**
   * Get picUrl
   * @return picUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPicUrl() {
    return picUrl;
  }


  public void setPicUrl(String picUrl) {
    
    
    
    this.picUrl = picUrl;
  }


  public EmployeeList hiringType(String hiringType) {
    
    
    
    
    this.hiringType = hiringType;
    return this;
  }

   /**
   * Get hiringType
   * @return hiringType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "contractor", value = "")

  public String getHiringType() {
    return hiringType;
  }


  public void setHiringType(String hiringType) {
    
    
    
    this.hiringType = hiringType;
  }


  public EmployeeList startDate(String startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Get startDate
   * @return startDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-07-01T03:00:00.000Z", value = "")

  public String getStartDate() {
    return startDate;
  }


  public void setStartDate(String startDate) {
    
    
    
    this.startDate = startDate;
  }


  public EmployeeList team(String team) {
    
    
    
    
    this.team = team;
    return this;
  }

   /**
   * Get team
   * @return team
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "John's Team", value = "")

  public String getTeam() {
    return team;
  }


  public void setTeam(String team) {
    
    
    
    this.team = team;
  }


  public EmployeeList teamId(Double teamId) {
    
    
    
    
    this.teamId = teamId;
    return this;
  }

  public EmployeeList teamId(Integer teamId) {
    
    
    
    
    this.teamId = teamId.doubleValue();
    return this;
  }

   /**
   * Get teamId
   * @return teamId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "245062", value = "")

  public Double getTeamId() {
    return teamId;
  }


  public void setTeamId(Double teamId) {
    
    
    
    this.teamId = teamId;
  }


  public EmployeeList jobTitle(String jobTitle) {
    
    
    
    
    this.jobTitle = jobTitle;
    return this;
  }

   /**
   * Get jobTitle
   * @return jobTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Director", value = "")

  public String getJobTitle() {
    return jobTitle;
  }


  public void setJobTitle(String jobTitle) {
    
    
    
    this.jobTitle = jobTitle;
  }


  public EmployeeList payments(List<EmployeeListPaymentsInner> payments) {
    
    
    
    
    this.payments = payments;
    return this;
  }

  public EmployeeList addPaymentsItem(EmployeeListPaymentsInner paymentsItem) {
    if (this.payments == null) {
      this.payments = new ArrayList<>();
    }
    this.payments.add(paymentsItem);
    return this;
  }

   /**
   * Get payments
   * @return payments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EmployeeListPaymentsInner> getPayments() {
    return payments;
  }


  public void setPayments(List<EmployeeListPaymentsInner> payments) {
    
    
    
    this.payments = payments;
  }


  public EmployeeList hourlyReportTotal(String hourlyReportTotal) {
    
    
    
    
    this.hourlyReportTotal = hourlyReportTotal;
    return this;
  }

   /**
   * Get hourlyReportTotal
   * @return hourlyReportTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "8017.8000", value = "")

  public String getHourlyReportTotal() {
    return hourlyReportTotal;
  }


  public void setHourlyReportTotal(String hourlyReportTotal) {
    
    
    
    this.hourlyReportTotal = hourlyReportTotal;
  }


  public EmployeeList clientLegalEntity(EmployeeListClientLegalEntity clientLegalEntity) {
    
    
    
    
    this.clientLegalEntity = clientLegalEntity;
    return this;
  }

   /**
   * Get clientLegalEntity
   * @return clientLegalEntity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmployeeListClientLegalEntity getClientLegalEntity() {
    return clientLegalEntity;
  }


  public void setClientLegalEntity(EmployeeListClientLegalEntity clientLegalEntity) {
    
    
    
    this.clientLegalEntity = clientLegalEntity;
  }


  public EmployeeList state(String state) {
    
    
    
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CO", value = "")

  public String getState() {
    return state;
  }


  public void setState(String state) {
    
    
    
    this.state = state;
  }


  public EmployeeList seniority(String seniority) {
    
    
    
    
    this.seniority = seniority;
    return this;
  }

   /**
   * Get seniority
   * @return seniority
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Junior (Individual Contributor Level 1)", value = "")

  public String getSeniority() {
    return seniority;
  }


  public void setSeniority(String seniority) {
    
    
    
    this.seniority = seniority;
  }


  public EmployeeList completionDate(String completionDate) {
    
    
    
    
    this.completionDate = completionDate;
    return this;
  }

   /**
   * Get completionDate
   * @return completionDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2023-11-12T02:59:59.999Z", value = "")

  public String getCompletionDate() {
    return completionDate;
  }


  public void setCompletionDate(String completionDate) {
    
    
    
    this.completionDate = completionDate;
  }


  public EmployeeList hiringStatus(String hiringStatus) {
    
    
    
    
    this.hiringStatus = hiringStatus;
    return this;
  }

   /**
   * Get hiringStatus
   * @return hiringStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "active", value = "")

  public String getHiringStatus() {
    return hiringStatus;
  }


  public void setHiringStatus(String hiringStatus) {
    
    
    
    this.hiringStatus = hiringStatus;
  }


  public EmployeeList monthlyPayment(EmployeeListMonthlyPayment monthlyPayment) {
    
    
    
    
    this.monthlyPayment = monthlyPayment;
    return this;
  }

   /**
   * Get monthlyPayment
   * @return monthlyPayment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmployeeListMonthlyPayment getMonthlyPayment() {
    return monthlyPayment;
  }


  public void setMonthlyPayment(EmployeeListMonthlyPayment monthlyPayment) {
    
    
    
    this.monthlyPayment = monthlyPayment;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EmployeeList instance itself
   */
  public EmployeeList putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmployeeList employeeList = (EmployeeList) o;
    return Objects.equals(this.id, employeeList.id) &&
        Objects.equals(this.firstName, employeeList.firstName) &&
        Objects.equals(this.lastName, employeeList.lastName) &&
        Objects.equals(this.fullName, employeeList.fullName) &&
        Objects.equals(this.email, employeeList.email) &&
        Objects.equals(this.timezone, employeeList.timezone) &&
        Objects.equals(this.personalEmail, employeeList.personalEmail) &&
        Objects.equals(this.country, employeeList.country) &&
        Objects.equals(this.birthDate, employeeList.birthDate) &&
        Objects.equals(this.picUrl, employeeList.picUrl) &&
        Objects.equals(this.hiringType, employeeList.hiringType) &&
        Objects.equals(this.startDate, employeeList.startDate) &&
        Objects.equals(this.team, employeeList.team) &&
        Objects.equals(this.teamId, employeeList.teamId) &&
        Objects.equals(this.jobTitle, employeeList.jobTitle) &&
        Objects.equals(this.payments, employeeList.payments) &&
        Objects.equals(this.hourlyReportTotal, employeeList.hourlyReportTotal) &&
        Objects.equals(this.clientLegalEntity, employeeList.clientLegalEntity) &&
        Objects.equals(this.state, employeeList.state) &&
        Objects.equals(this.seniority, employeeList.seniority) &&
        Objects.equals(this.completionDate, employeeList.completionDate) &&
        Objects.equals(this.hiringStatus, employeeList.hiringStatus) &&
        Objects.equals(this.monthlyPayment, employeeList.monthlyPayment)&&
        Objects.equals(this.additionalProperties, employeeList.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, firstName, lastName, fullName, email, timezone, personalEmail, country, birthDate, picUrl, hiringType, startDate, team, teamId, jobTitle, payments, hourlyReportTotal, clientLegalEntity, state, seniority, completionDate, hiringStatus, monthlyPayment, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmployeeList {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    personalEmail: ").append(toIndentedString(personalEmail)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    birthDate: ").append(toIndentedString(birthDate)).append("\n");
    sb.append("    picUrl: ").append(toIndentedString(picUrl)).append("\n");
    sb.append("    hiringType: ").append(toIndentedString(hiringType)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    teamId: ").append(toIndentedString(teamId)).append("\n");
    sb.append("    jobTitle: ").append(toIndentedString(jobTitle)).append("\n");
    sb.append("    payments: ").append(toIndentedString(payments)).append("\n");
    sb.append("    hourlyReportTotal: ").append(toIndentedString(hourlyReportTotal)).append("\n");
    sb.append("    clientLegalEntity: ").append(toIndentedString(clientLegalEntity)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    seniority: ").append(toIndentedString(seniority)).append("\n");
    sb.append("    completionDate: ").append(toIndentedString(completionDate)).append("\n");
    sb.append("    hiringStatus: ").append(toIndentedString(hiringStatus)).append("\n");
    sb.append("    monthlyPayment: ").append(toIndentedString(monthlyPayment)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("first_name");
    openapiFields.add("last_name");
    openapiFields.add("full_name");
    openapiFields.add("email");
    openapiFields.add("timezone");
    openapiFields.add("personal_email");
    openapiFields.add("country");
    openapiFields.add("birth_date");
    openapiFields.add("pic_url");
    openapiFields.add("hiring_type");
    openapiFields.add("start_date");
    openapiFields.add("team");
    openapiFields.add("team_id");
    openapiFields.add("job_title");
    openapiFields.add("payments");
    openapiFields.add("hourly_report_total");
    openapiFields.add("client_legal_entity");
    openapiFields.add("state");
    openapiFields.add("seniority");
    openapiFields.add("completion_date");
    openapiFields.add("hiring_status");
    openapiFields.add("monthly_payment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmployeeList
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EmployeeList.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmployeeList is not found in the empty JSON string", EmployeeList.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("first_name") != null && !jsonObj.get("first_name").isJsonNull()) && !jsonObj.get("first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_name").toString()));
      }
      if ((jsonObj.get("last_name") != null && !jsonObj.get("last_name").isJsonNull()) && !jsonObj.get("last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_name").toString()));
      }
      if ((jsonObj.get("full_name") != null && !jsonObj.get("full_name").isJsonNull()) && !jsonObj.get("full_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `full_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("full_name").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if ((jsonObj.get("personal_email") != null && !jsonObj.get("personal_email").isJsonNull()) && !jsonObj.get("personal_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `personal_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("personal_email").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("birth_date") != null && !jsonObj.get("birth_date").isJsonNull()) && !jsonObj.get("birth_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `birth_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("birth_date").toString()));
      }
      if ((jsonObj.get("pic_url") != null && !jsonObj.get("pic_url").isJsonNull()) && !jsonObj.get("pic_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pic_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pic_url").toString()));
      }
      if ((jsonObj.get("hiring_type") != null && !jsonObj.get("hiring_type").isJsonNull()) && !jsonObj.get("hiring_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hiring_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hiring_type").toString()));
      }
      if ((jsonObj.get("start_date") != null && !jsonObj.get("start_date").isJsonNull()) && !jsonObj.get("start_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_date").toString()));
      }
      if ((jsonObj.get("team") != null && !jsonObj.get("team").isJsonNull()) && !jsonObj.get("team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("team").toString()));
      }
      if ((jsonObj.get("job_title") != null && !jsonObj.get("job_title").isJsonNull()) && !jsonObj.get("job_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `job_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("job_title").toString()));
      }
      if (jsonObj.get("payments") != null && !jsonObj.get("payments").isJsonNull()) {
        JsonArray jsonArraypayments = jsonObj.getAsJsonArray("payments");
        if (jsonArraypayments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("payments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `payments` to be an array in the JSON string but got `%s`", jsonObj.get("payments").toString()));
          }

          // validate the optional field `payments` (array)
          for (int i = 0; i < jsonArraypayments.size(); i++) {
            EmployeeListPaymentsInner.validateJsonObject(jsonArraypayments.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("hourly_report_total") != null && !jsonObj.get("hourly_report_total").isJsonNull()) && !jsonObj.get("hourly_report_total").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hourly_report_total` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hourly_report_total").toString()));
      }
      // validate the optional field `client_legal_entity`
      if (jsonObj.get("client_legal_entity") != null && !jsonObj.get("client_legal_entity").isJsonNull()) {
        EmployeeListClientLegalEntity.validateJsonObject(jsonObj.getAsJsonObject("client_legal_entity"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("seniority") != null && !jsonObj.get("seniority").isJsonNull()) && !jsonObj.get("seniority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seniority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seniority").toString()));
      }
      if ((jsonObj.get("completion_date") != null && !jsonObj.get("completion_date").isJsonNull()) && !jsonObj.get("completion_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `completion_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("completion_date").toString()));
      }
      if ((jsonObj.get("hiring_status") != null && !jsonObj.get("hiring_status").isJsonNull()) && !jsonObj.get("hiring_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hiring_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hiring_status").toString()));
      }
      // validate the optional field `monthly_payment`
      if (jsonObj.get("monthly_payment") != null && !jsonObj.get("monthly_payment").isJsonNull()) {
        EmployeeListMonthlyPayment.validateJsonObject(jsonObj.getAsJsonObject("monthly_payment"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmployeeList.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmployeeList' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmployeeList> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmployeeList.class));

       return (TypeAdapter<T>) new TypeAdapter<EmployeeList>() {
           @Override
           public void write(JsonWriter out, EmployeeList value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EmployeeList read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EmployeeList instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmployeeList given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmployeeList
  * @throws IOException if the JSON string is invalid with respect to EmployeeList
  */
  public static EmployeeList fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmployeeList.class);
  }

 /**
  * Convert an instance of EmployeeList to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

