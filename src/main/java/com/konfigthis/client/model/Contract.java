/*
 * Deel REST API
 * API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ClientOfContract;
import com.konfigthis.client.model.CompensationDetailsOfContract;
import com.konfigthis.client.model.ContractCustomField;
import com.konfigthis.client.model.ContractStatusEnum;
import com.konfigthis.client.model.ContractTemplate;
import com.konfigthis.client.model.ContractTypeEnum;
import com.konfigthis.client.model.ContractWhoReportsEnum;
import com.konfigthis.client.model.EmploymentDetailsOfContract;
import com.konfigthis.client.model.EorQuoteBase;
import com.konfigthis.client.model.InvitationsOfBasicContract;
import com.konfigthis.client.model.Seniority;
import com.konfigthis.client.model.SignaturesOfContract;
import com.konfigthis.client.model.WorkerOfContract;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Contract
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Contract {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ContractTypeEnum type;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ContractStatusEnum status;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_JOB_TITLE = "job_title";
  @SerializedName(SERIALIZED_NAME_JOB_TITLE)
  private String jobTitle;

  public static final String SERIALIZED_NAME_SENIORITY = "seniority";
  @SerializedName(SERIALIZED_NAME_SENIORITY)
  private Seniority seniority;

  public static final String SERIALIZED_NAME_WHO_REPORTS = "who_reports";
  @SerializedName(SERIALIZED_NAME_WHO_REPORTS)
  private ContractWhoReportsEnum whoReports;

  public static final String SERIALIZED_NAME_SCOPE_OF_WORK = "scope_of_work";
  @SerializedName(SERIALIZED_NAME_SCOPE_OF_WORK)
  private String scopeOfWork;

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_TERMINATION_DATE = "termination_date";
  @SerializedName(SERIALIZED_NAME_TERMINATION_DATE)
  private OffsetDateTime terminationDate;

  public static final String SERIALIZED_NAME_SPECIAL_CLAUSE = "special_clause";
  @SerializedName(SERIALIZED_NAME_SPECIAL_CLAUSE)
  private String specialClause;

  public static final String SERIALIZED_NAME_IS_ARCHIVED = "is_archived";
  @SerializedName(SERIALIZED_NAME_IS_ARCHIVED)
  private Boolean isArchived;

  public static final String SERIALIZED_NAME_CLIENT = "client";
  @SerializedName(SERIALIZED_NAME_CLIENT)
  private ClientOfContract client;

  public static final String SERIALIZED_NAME_WORKER = "worker";
  @SerializedName(SERIALIZED_NAME_WORKER)
  private WorkerOfContract worker;

  public static final String SERIALIZED_NAME_INVITATIONS = "invitations";
  @SerializedName(SERIALIZED_NAME_INVITATIONS)
  private InvitationsOfBasicContract invitations;

  public static final String SERIALIZED_NAME_SIGNATURES = "signatures";
  @SerializedName(SERIALIZED_NAME_SIGNATURES)
  private SignaturesOfContract signatures;

  public static final String SERIALIZED_NAME_COMPENSATION_DETAILS = "compensation_details";
  @SerializedName(SERIALIZED_NAME_COMPENSATION_DETAILS)
  private CompensationDetailsOfContract compensationDetails;

  public static final String SERIALIZED_NAME_EMPLOYMENT_DETAILS = "employment_details";
  @SerializedName(SERIALIZED_NAME_EMPLOYMENT_DETAILS)
  private EmploymentDetailsOfContract employmentDetails;

  public static final String SERIALIZED_NAME_NOTICE_PERIOD = "notice_period";
  @SerializedName(SERIALIZED_NAME_NOTICE_PERIOD)
  private Double noticePeriod = 0d;

  public static final String SERIALIZED_NAME_CONTRACT_TEMPLATE = "contract_template";
  @SerializedName(SERIALIZED_NAME_CONTRACT_TEMPLATE)
  private ContractTemplate contractTemplate;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private List<ContractCustomField> customFields = null;

  public static final String SERIALIZED_NAME_QUOTE = "quote";
  @SerializedName(SERIALIZED_NAME_QUOTE)
  private EorQuoteBase quote;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "external_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public Contract() {
  }

  public Contract title(String title) {
    
    
    if (title != null && title.length() < 1) {
      throw new IllegalArgumentException("Invalid value for title. Length must be greater than or equal to 1.");
    }
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    if (title != null && title.length() < 1) {
      throw new IllegalArgumentException("Invalid value for title. Length must be greater than or equal to 1.");
    }
    this.title = title;
  }


  public Contract id(String id) {
    
    
    if (id != null && id.length() < 1) {
      throw new IllegalArgumentException("Invalid value for id. Length must be greater than or equal to 1.");
    }
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    if (id != null && id.length() < 1) {
      throw new IllegalArgumentException("Invalid value for id. Length must be greater than or equal to 1.");
    }
    this.id = id;
  }


  public Contract type(ContractTypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ContractTypeEnum getType() {
    return type;
  }


  public void setType(ContractTypeEnum type) {
    
    
    
    this.type = type;
  }


  public Contract status(ContractStatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ContractStatusEnum getStatus() {
    return status;
  }


  public void setStatus(ContractStatusEnum status) {
    
    
    
    this.status = status;
  }


  public Contract createdAt(OffsetDateTime createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Long date-time format following ISO-8601
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-05-24T09:38:46.235Z", required = true, value = "Long date-time format following ISO-8601")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public Contract jobTitle(String jobTitle) {
    
    
    
    
    this.jobTitle = jobTitle;
    return this;
  }

   /**
   * Get jobTitle
   * @return jobTitle
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getJobTitle() {
    return jobTitle;
  }


  public void setJobTitle(String jobTitle) {
    
    
    
    this.jobTitle = jobTitle;
  }


  public Contract seniority(Seniority seniority) {
    
    
    
    
    this.seniority = seniority;
    return this;
  }

   /**
   * Get seniority
   * @return seniority
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Seniority getSeniority() {
    return seniority;
  }


  public void setSeniority(Seniority seniority) {
    
    
    
    this.seniority = seniority;
  }


  public Contract whoReports(ContractWhoReportsEnum whoReports) {
    
    
    
    
    this.whoReports = whoReports;
    return this;
  }

   /**
   * Get whoReports
   * @return whoReports
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ContractWhoReportsEnum getWhoReports() {
    return whoReports;
  }


  public void setWhoReports(ContractWhoReportsEnum whoReports) {
    
    
    
    this.whoReports = whoReports;
  }


  public Contract scopeOfWork(String scopeOfWork) {
    
    
    
    
    this.scopeOfWork = scopeOfWork;
    return this;
  }

   /**
   * Get scopeOfWork
   * @return scopeOfWork
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getScopeOfWork() {
    return scopeOfWork;
  }


  public void setScopeOfWork(String scopeOfWork) {
    
    
    
    this.scopeOfWork = scopeOfWork;
  }


  public Contract startDate(OffsetDateTime startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Long date-time format following ISO-8601
   * @return startDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-05-24T09:38:46.235Z", required = true, value = "Long date-time format following ISO-8601")

  public OffsetDateTime getStartDate() {
    return startDate;
  }


  public void setStartDate(OffsetDateTime startDate) {
    
    
    
    this.startDate = startDate;
  }


  public Contract terminationDate(OffsetDateTime terminationDate) {
    
    
    
    
    this.terminationDate = terminationDate;
    return this;
  }

   /**
   * Long date-time format following ISO-8601
   * @return terminationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-05-24T09:38:46.235Z", required = true, value = "Long date-time format following ISO-8601")

  public OffsetDateTime getTerminationDate() {
    return terminationDate;
  }


  public void setTerminationDate(OffsetDateTime terminationDate) {
    
    
    
    this.terminationDate = terminationDate;
  }


  public Contract specialClause(String specialClause) {
    
    
    
    
    this.specialClause = specialClause;
    return this;
  }

   /**
   * Get specialClause
   * @return specialClause
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getSpecialClause() {
    return specialClause;
  }


  public void setSpecialClause(String specialClause) {
    
    
    
    this.specialClause = specialClause;
  }


  public Contract isArchived(Boolean isArchived) {
    
    
    
    
    this.isArchived = isArchived;
    return this;
  }

   /**
   * Get isArchived
   * @return isArchived
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getIsArchived() {
    return isArchived;
  }


  public void setIsArchived(Boolean isArchived) {
    
    
    
    this.isArchived = isArchived;
  }


  public Contract client(ClientOfContract client) {
    
    
    
    
    this.client = client;
    return this;
  }

   /**
   * Get client
   * @return client
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public ClientOfContract getClient() {
    return client;
  }


  public void setClient(ClientOfContract client) {
    
    
    
    this.client = client;
  }


  public Contract worker(WorkerOfContract worker) {
    
    
    
    
    this.worker = worker;
    return this;
  }

   /**
   * Get worker
   * @return worker
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public WorkerOfContract getWorker() {
    return worker;
  }


  public void setWorker(WorkerOfContract worker) {
    
    
    
    this.worker = worker;
  }


  public Contract invitations(InvitationsOfBasicContract invitations) {
    
    
    
    
    this.invitations = invitations;
    return this;
  }

   /**
   * Get invitations
   * @return invitations
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public InvitationsOfBasicContract getInvitations() {
    return invitations;
  }


  public void setInvitations(InvitationsOfBasicContract invitations) {
    
    
    
    this.invitations = invitations;
  }


  public Contract signatures(SignaturesOfContract signatures) {
    
    
    
    
    this.signatures = signatures;
    return this;
  }

   /**
   * Get signatures
   * @return signatures
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public SignaturesOfContract getSignatures() {
    return signatures;
  }


  public void setSignatures(SignaturesOfContract signatures) {
    
    
    
    this.signatures = signatures;
  }


  public Contract compensationDetails(CompensationDetailsOfContract compensationDetails) {
    
    
    
    
    this.compensationDetails = compensationDetails;
    return this;
  }

   /**
   * Get compensationDetails
   * @return compensationDetails
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public CompensationDetailsOfContract getCompensationDetails() {
    return compensationDetails;
  }


  public void setCompensationDetails(CompensationDetailsOfContract compensationDetails) {
    
    
    
    this.compensationDetails = compensationDetails;
  }


  public Contract employmentDetails(EmploymentDetailsOfContract employmentDetails) {
    
    
    
    
    this.employmentDetails = employmentDetails;
    return this;
  }

   /**
   * Get employmentDetails
   * @return employmentDetails
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EmploymentDetailsOfContract getEmploymentDetails() {
    return employmentDetails;
  }


  public void setEmploymentDetails(EmploymentDetailsOfContract employmentDetails) {
    
    
    
    this.employmentDetails = employmentDetails;
  }


  public Contract noticePeriod(Double noticePeriod) {
    if (noticePeriod != null && noticePeriod < 0) {
      throw new IllegalArgumentException("Invalid value for noticePeriod. Must be greater than or equal to 0.");
    }
    
    
    
    this.noticePeriod = noticePeriod;
    return this;
  }

  public Contract noticePeriod(Integer noticePeriod) {
    if (noticePeriod != null && noticePeriod < 0) {
      throw new IllegalArgumentException("Invalid value for noticePeriod. Must be greater than or equal to 0.");
    }
    
    
    
    this.noticePeriod = noticePeriod.doubleValue();
    return this;
  }

   /**
   * Days before to notice the termination of contract for eather party.
   * minimum: 0
   * @return noticePeriod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "15", value = "Days before to notice the termination of contract for eather party.")

  public Double getNoticePeriod() {
    return noticePeriod;
  }


  public void setNoticePeriod(Double noticePeriod) {
    if (noticePeriod != null && noticePeriod < 0) {
      throw new IllegalArgumentException("Invalid value for noticePeriod. Must be greater than or equal to 0.");
    }
    
    
    this.noticePeriod = noticePeriod;
  }


  public Contract contractTemplate(ContractTemplate contractTemplate) {
    
    
    
    
    this.contractTemplate = contractTemplate;
    return this;
  }

   /**
   * Get contractTemplate
   * @return contractTemplate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ContractTemplate getContractTemplate() {
    return contractTemplate;
  }


  public void setContractTemplate(ContractTemplate contractTemplate) {
    
    
    
    this.contractTemplate = contractTemplate;
  }


  public Contract customFields(List<ContractCustomField> customFields) {
    
    
    
    
    this.customFields = customFields;
    return this;
  }

  public Contract addCustomFieldsItem(ContractCustomField customFieldsItem) {
    if (this.customFields == null) {
      this.customFields = new ArrayList<>();
    }
    this.customFields.add(customFieldsItem);
    return this;
  }

   /**
   * Get customFields
   * @return customFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ContractCustomField> getCustomFields() {
    return customFields;
  }


  public void setCustomFields(List<ContractCustomField> customFields) {
    
    
    
    this.customFields = customFields;
  }


  public Contract quote(EorQuoteBase quote) {
    
    
    
    
    this.quote = quote;
    return this;
  }

   /**
   * Get quote
   * @return quote
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EorQuoteBase getQuote() {
    return quote;
  }


  public void setQuote(EorQuoteBase quote) {
    
    
    
    this.quote = quote;
  }


  public Contract externalId(String externalId) {
    
    
    
    
    this.externalId = externalId;
    return this;
  }

   /**
   * A unique identifier for the object provided by an external system.
   * @return externalId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A unique identifier for the object provided by an external system.")

  public String getExternalId() {
    return externalId;
  }


  public void setExternalId(String externalId) {
    
    
    
    this.externalId = externalId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Contract instance itself
   */
  public Contract putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Contract contract = (Contract) o;
    return Objects.equals(this.title, contract.title) &&
        Objects.equals(this.id, contract.id) &&
        Objects.equals(this.type, contract.type) &&
        Objects.equals(this.status, contract.status) &&
        Objects.equals(this.createdAt, contract.createdAt) &&
        Objects.equals(this.jobTitle, contract.jobTitle) &&
        Objects.equals(this.seniority, contract.seniority) &&
        Objects.equals(this.whoReports, contract.whoReports) &&
        Objects.equals(this.scopeOfWork, contract.scopeOfWork) &&
        Objects.equals(this.startDate, contract.startDate) &&
        Objects.equals(this.terminationDate, contract.terminationDate) &&
        Objects.equals(this.specialClause, contract.specialClause) &&
        Objects.equals(this.isArchived, contract.isArchived) &&
        Objects.equals(this.client, contract.client) &&
        Objects.equals(this.worker, contract.worker) &&
        Objects.equals(this.invitations, contract.invitations) &&
        Objects.equals(this.signatures, contract.signatures) &&
        Objects.equals(this.compensationDetails, contract.compensationDetails) &&
        Objects.equals(this.employmentDetails, contract.employmentDetails) &&
        Objects.equals(this.noticePeriod, contract.noticePeriod) &&
        Objects.equals(this.contractTemplate, contract.contractTemplate) &&
        Objects.equals(this.customFields, contract.customFields) &&
        Objects.equals(this.quote, contract.quote) &&
        Objects.equals(this.externalId, contract.externalId)&&
        Objects.equals(this.additionalProperties, contract.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, id, type, status, createdAt, jobTitle, seniority, whoReports, scopeOfWork, startDate, terminationDate, specialClause, isArchived, client, worker, invitations, signatures, compensationDetails, employmentDetails, noticePeriod, contractTemplate, customFields, quote, externalId, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Contract {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    jobTitle: ").append(toIndentedString(jobTitle)).append("\n");
    sb.append("    seniority: ").append(toIndentedString(seniority)).append("\n");
    sb.append("    whoReports: ").append(toIndentedString(whoReports)).append("\n");
    sb.append("    scopeOfWork: ").append(toIndentedString(scopeOfWork)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    terminationDate: ").append(toIndentedString(terminationDate)).append("\n");
    sb.append("    specialClause: ").append(toIndentedString(specialClause)).append("\n");
    sb.append("    isArchived: ").append(toIndentedString(isArchived)).append("\n");
    sb.append("    client: ").append(toIndentedString(client)).append("\n");
    sb.append("    worker: ").append(toIndentedString(worker)).append("\n");
    sb.append("    invitations: ").append(toIndentedString(invitations)).append("\n");
    sb.append("    signatures: ").append(toIndentedString(signatures)).append("\n");
    sb.append("    compensationDetails: ").append(toIndentedString(compensationDetails)).append("\n");
    sb.append("    employmentDetails: ").append(toIndentedString(employmentDetails)).append("\n");
    sb.append("    noticePeriod: ").append(toIndentedString(noticePeriod)).append("\n");
    sb.append("    contractTemplate: ").append(toIndentedString(contractTemplate)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    quote: ").append(toIndentedString(quote)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("status");
    openapiFields.add("created_at");
    openapiFields.add("job_title");
    openapiFields.add("seniority");
    openapiFields.add("who_reports");
    openapiFields.add("scope_of_work");
    openapiFields.add("start_date");
    openapiFields.add("termination_date");
    openapiFields.add("special_clause");
    openapiFields.add("is_archived");
    openapiFields.add("client");
    openapiFields.add("worker");
    openapiFields.add("invitations");
    openapiFields.add("signatures");
    openapiFields.add("compensation_details");
    openapiFields.add("employment_details");
    openapiFields.add("notice_period");
    openapiFields.add("contract_template");
    openapiFields.add("custom_fields");
    openapiFields.add("quote");
    openapiFields.add("external_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("job_title");
    openapiRequiredFields.add("seniority");
    openapiRequiredFields.add("start_date");
    openapiRequiredFields.add("termination_date");
    openapiRequiredFields.add("special_clause");
    openapiRequiredFields.add("is_archived");
    openapiRequiredFields.add("client");
    openapiRequiredFields.add("worker");
    openapiRequiredFields.add("invitations");
    openapiRequiredFields.add("signatures");
    openapiRequiredFields.add("compensation_details");
    openapiRequiredFields.add("employment_details");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Contract
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Contract.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Contract is not found in the empty JSON string", Contract.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Contract.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("job_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `job_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("job_title").toString()));
      }
      // validate the required field `seniority`
      Seniority.validateJsonObject(jsonObj.getAsJsonObject("seniority"));
      if (!jsonObj.get("scope_of_work").isJsonNull() && (jsonObj.get("scope_of_work") != null && !jsonObj.get("scope_of_work").isJsonNull()) && !jsonObj.get("scope_of_work").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope_of_work` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope_of_work").toString()));
      }
      if (!jsonObj.get("special_clause").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `special_clause` to be a primitive type in the JSON string but got `%s`", jsonObj.get("special_clause").toString()));
      }
      // validate the required field `client`
      ClientOfContract.validateJsonObject(jsonObj.getAsJsonObject("client"));
      // validate the required field `worker`
      WorkerOfContract.validateJsonObject(jsonObj.getAsJsonObject("worker"));
      // validate the required field `invitations`
      InvitationsOfBasicContract.validateJsonObject(jsonObj.getAsJsonObject("invitations"));
      // validate the required field `signatures`
      SignaturesOfContract.validateJsonObject(jsonObj.getAsJsonObject("signatures"));
      // validate the required field `compensation_details`
      CompensationDetailsOfContract.validateJsonObject(jsonObj.getAsJsonObject("compensation_details"));
      // validate the required field `employment_details`
      EmploymentDetailsOfContract.validateJsonObject(jsonObj.getAsJsonObject("employment_details"));
      // validate the optional field `contract_template`
      if (jsonObj.get("contract_template") != null && !jsonObj.get("contract_template").isJsonNull()) {
        ContractTemplate.validateJsonObject(jsonObj.getAsJsonObject("contract_template"));
      }
      if (jsonObj.get("custom_fields") != null && !jsonObj.get("custom_fields").isJsonNull()) {
        JsonArray jsonArraycustomFields = jsonObj.getAsJsonArray("custom_fields");
        if (jsonArraycustomFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("custom_fields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `custom_fields` to be an array in the JSON string but got `%s`", jsonObj.get("custom_fields").toString()));
          }

          // validate the optional field `custom_fields` (array)
          for (int i = 0; i < jsonArraycustomFields.size(); i++) {
            ContractCustomField.validateJsonObject(jsonArraycustomFields.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `quote`
      if (jsonObj.get("quote") != null && !jsonObj.get("quote").isJsonNull()) {
        EorQuoteBase.validateJsonObject(jsonObj.getAsJsonObject("quote"));
      }
      if (!jsonObj.get("external_id").isJsonNull() && (jsonObj.get("external_id") != null && !jsonObj.get("external_id").isJsonNull()) && !jsonObj.get("external_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Contract.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Contract' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Contract> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Contract.class));

       return (TypeAdapter<T>) new TypeAdapter<Contract>() {
           @Override
           public void write(JsonWriter out, Contract value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Contract read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Contract instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Contract given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Contract
  * @throws IOException if the JSON string is invalid with respect to Contract
  */
  public static Contract fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Contract.class);
  }

 /**
  * Convert an instance of Contract to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

