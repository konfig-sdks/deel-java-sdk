/*
 * Deel REST API
 * API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.FinalPaymentCalculatedLastCycle;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * FinalPaymentCalculated
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class FinalPaymentCalculated {
  public static final String SERIALIZED_NAME_DAILY_RATE = "daily_rate";
  @SerializedName(SERIALIZED_NAME_DAILY_RATE)
  private String dailyRate;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private String total;

  public static final String SERIALIZED_NAME_REMAINING_DAYS = "remaining_days";
  @SerializedName(SERIALIZED_NAME_REMAINING_DAYS)
  private String remainingDays;

  public static final String SERIALIZED_NAME_LAST_CYCLE = "last_cycle";
  @SerializedName(SERIALIZED_NAME_LAST_CYCLE)
  private FinalPaymentCalculatedLastCycle lastCycle;

  /**
   * Either works days or calendar days
   */
  @JsonAdapter(CalculationTypeEnum.Adapter.class)
 public enum CalculationTypeEnum {
    CUSTOM_AMOUNT("CUSTOM_AMOUNT"),
    
    WORK_DAYS("WORK_DAYS"),
    
    CALENDAR_DAYS("CALENDAR_DAYS"),
    
    FULL_AMOUNT("FULL_AMOUNT");

    private String value;

    CalculationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CalculationTypeEnum fromValue(String value) {
      for (CalculationTypeEnum b : CalculationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CalculationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CalculationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CalculationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CalculationTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CALCULATION_TYPE = "calculation_type";
  @SerializedName(SERIALIZED_NAME_CALCULATION_TYPE)
  private CalculationTypeEnum calculationType;

  public static final String SERIALIZED_NAME_WORKWEEK_START = "workweek_start";
  @SerializedName(SERIALIZED_NAME_WORKWEEK_START)
  private Double workweekStart = 1d;

  public static final String SERIALIZED_NAME_WORKWEEK_END = "workweek_end";
  @SerializedName(SERIALIZED_NAME_WORKWEEK_END)
  private Double workweekEnd = 5d;

  public FinalPaymentCalculated() {
  }

  public FinalPaymentCalculated dailyRate(String dailyRate) {
    
    
    
    
    this.dailyRate = dailyRate;
    return this;
  }

   /**
   * The daily rate paid.
   * @return dailyRate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "5.8571", required = true, value = "The daily rate paid.")

  public String getDailyRate() {
    return dailyRate;
  }


  public void setDailyRate(String dailyRate) {
    
    
    
    this.dailyRate = dailyRate;
  }


  public FinalPaymentCalculated total(String total) {
    
    
    
    
    this.total = total;
    return this;
  }

   /**
   * Total amount to pay.
   * @return total
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "5.8571", required = true, value = "Total amount to pay.")

  public String getTotal() {
    return total;
  }


  public void setTotal(String total) {
    
    
    
    this.total = total;
  }


  public FinalPaymentCalculated remainingDays(String remainingDays) {
    
    
    
    
    this.remainingDays = remainingDays;
    return this;
  }

   /**
   * Dais remaining to end the contract.
   * @return remainingDays
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "5.8571", required = true, value = "Dais remaining to end the contract.")

  public String getRemainingDays() {
    return remainingDays;
  }


  public void setRemainingDays(String remainingDays) {
    
    
    
    this.remainingDays = remainingDays;
  }


  public FinalPaymentCalculated lastCycle(FinalPaymentCalculatedLastCycle lastCycle) {
    
    
    
    
    this.lastCycle = lastCycle;
    return this;
  }

   /**
   * Get lastCycle
   * @return lastCycle
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public FinalPaymentCalculatedLastCycle getLastCycle() {
    return lastCycle;
  }


  public void setLastCycle(FinalPaymentCalculatedLastCycle lastCycle) {
    
    
    
    this.lastCycle = lastCycle;
  }


  public FinalPaymentCalculated calculationType(CalculationTypeEnum calculationType) {
    
    
    
    
    this.calculationType = calculationType;
    return this;
  }

   /**
   * Either works days or calendar days
   * @return calculationType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Either works days or calendar days")

  public CalculationTypeEnum getCalculationType() {
    return calculationType;
  }


  public void setCalculationType(CalculationTypeEnum calculationType) {
    
    
    
    this.calculationType = calculationType;
  }


  public FinalPaymentCalculated workweekStart(Double workweekStart) {
    
    
    
    
    this.workweekStart = workweekStart;
    return this;
  }

  public FinalPaymentCalculated workweekStart(Integer workweekStart) {
    
    
    
    
    this.workweekStart = workweekStart.doubleValue();
    return this;
  }

   /**
   * The day the work week starts, 0 to 6
   * @return workweekStart
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1", required = true, value = "The day the work week starts, 0 to 6")

  public Double getWorkweekStart() {
    return workweekStart;
  }


  public void setWorkweekStart(Double workweekStart) {
    
    
    
    this.workweekStart = workweekStart;
  }


  public FinalPaymentCalculated workweekEnd(Double workweekEnd) {
    
    
    
    
    this.workweekEnd = workweekEnd;
    return this;
  }

  public FinalPaymentCalculated workweekEnd(Integer workweekEnd) {
    
    
    
    
    this.workweekEnd = workweekEnd.doubleValue();
    return this;
  }

   /**
   * The day the work week starts, 0 to 6
   * @return workweekEnd
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "5", required = true, value = "The day the work week starts, 0 to 6")

  public Double getWorkweekEnd() {
    return workweekEnd;
  }


  public void setWorkweekEnd(Double workweekEnd) {
    
    
    
    this.workweekEnd = workweekEnd;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the FinalPaymentCalculated instance itself
   */
  public FinalPaymentCalculated putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FinalPaymentCalculated finalPaymentCalculated = (FinalPaymentCalculated) o;
    return Objects.equals(this.dailyRate, finalPaymentCalculated.dailyRate) &&
        Objects.equals(this.total, finalPaymentCalculated.total) &&
        Objects.equals(this.remainingDays, finalPaymentCalculated.remainingDays) &&
        Objects.equals(this.lastCycle, finalPaymentCalculated.lastCycle) &&
        Objects.equals(this.calculationType, finalPaymentCalculated.calculationType) &&
        Objects.equals(this.workweekStart, finalPaymentCalculated.workweekStart) &&
        Objects.equals(this.workweekEnd, finalPaymentCalculated.workweekEnd)&&
        Objects.equals(this.additionalProperties, finalPaymentCalculated.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dailyRate, total, remainingDays, lastCycle, calculationType, workweekStart, workweekEnd, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FinalPaymentCalculated {\n");
    sb.append("    dailyRate: ").append(toIndentedString(dailyRate)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    remainingDays: ").append(toIndentedString(remainingDays)).append("\n");
    sb.append("    lastCycle: ").append(toIndentedString(lastCycle)).append("\n");
    sb.append("    calculationType: ").append(toIndentedString(calculationType)).append("\n");
    sb.append("    workweekStart: ").append(toIndentedString(workweekStart)).append("\n");
    sb.append("    workweekEnd: ").append(toIndentedString(workweekEnd)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("daily_rate");
    openapiFields.add("total");
    openapiFields.add("remaining_days");
    openapiFields.add("last_cycle");
    openapiFields.add("calculation_type");
    openapiFields.add("workweek_start");
    openapiFields.add("workweek_end");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("daily_rate");
    openapiRequiredFields.add("total");
    openapiRequiredFields.add("remaining_days");
    openapiRequiredFields.add("last_cycle");
    openapiRequiredFields.add("calculation_type");
    openapiRequiredFields.add("workweek_start");
    openapiRequiredFields.add("workweek_end");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FinalPaymentCalculated
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FinalPaymentCalculated.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FinalPaymentCalculated is not found in the empty JSON string", FinalPaymentCalculated.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FinalPaymentCalculated.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("daily_rate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `daily_rate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("daily_rate").toString()));
      }
      if (!jsonObj.get("total").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `total` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total").toString()));
      }
      if (!jsonObj.get("remaining_days").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remaining_days` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remaining_days").toString()));
      }
      // validate the required field `last_cycle`
      FinalPaymentCalculatedLastCycle.validateJsonObject(jsonObj.getAsJsonObject("last_cycle"));
      if (!jsonObj.get("calculation_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `calculation_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("calculation_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FinalPaymentCalculated.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FinalPaymentCalculated' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FinalPaymentCalculated> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FinalPaymentCalculated.class));

       return (TypeAdapter<T>) new TypeAdapter<FinalPaymentCalculated>() {
           @Override
           public void write(JsonWriter out, FinalPaymentCalculated value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public FinalPaymentCalculated read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             FinalPaymentCalculated instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FinalPaymentCalculated given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FinalPaymentCalculated
  * @throws IOException if the JSON string is invalid with respect to FinalPaymentCalculated
  */
  public static FinalPaymentCalculated fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FinalPaymentCalculated.class);
  }

 /**
  * Convert an instance of FinalPaymentCalculated to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

