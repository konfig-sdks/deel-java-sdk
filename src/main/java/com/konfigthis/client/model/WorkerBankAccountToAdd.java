/*
 * Deel REST API
 * API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * WorkerBankAccountToAdd
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class WorkerBankAccountToAdd {
  public static final String SERIALIZED_NAME_FULL_NAME = "full_name";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_ADDRESS_LINE1 = "address_line1";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE1)
  private String addressLine1;

  public static final String SERIALIZED_NAME_ADDRESS_LINE2 = "address_line2";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE2)
  private String addressLine2;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_PROVINCE_STATE = "province_state";
  @SerializedName(SERIALIZED_NAME_PROVINCE_STATE)
  private String provinceState;

  public static final String SERIALIZED_NAME_POSTAL = "postal";
  @SerializedName(SERIALIZED_NAME_POSTAL)
  private String postal;

  public static final String SERIALIZED_NAME_BANK_NAME = "bank_name";
  @SerializedName(SERIALIZED_NAME_BANK_NAME)
  private String bankName;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "country_code";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_BANK_COUNTRY_CODE = "bank_country_code";
  @SerializedName(SERIALIZED_NAME_BANK_COUNTRY_CODE)
  private String bankCountryCode;

  public static final String SERIALIZED_NAME_SWIFT_BIC = "swift_bic";
  @SerializedName(SERIALIZED_NAME_SWIFT_BIC)
  private String swiftBic;

  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "account_number";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  public static final String SERIALIZED_NAME_BANK_CODE = "bank_code";
  @SerializedName(SERIALIZED_NAME_BANK_CODE)
  private String bankCode;

  public static final String SERIALIZED_NAME_ORIGINAL_NAME = "original_name";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_NAME)
  private String originalName;

  public static final String SERIALIZED_NAME_TAX_ID = "tax_id";
  @SerializedName(SERIALIZED_NAME_TAX_ID)
  private String taxId;

  public static final String SERIALIZED_NAME_BRANCH_CODE = "branch_code";
  @SerializedName(SERIALIZED_NAME_BRANCH_CODE)
  private String branchCode;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currency_code";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_BANK_BRANCH_NAME = "bank_branch_name";
  @SerializedName(SERIALIZED_NAME_BANK_BRANCH_NAME)
  private String bankBranchName;

  public static final String SERIALIZED_NAME_IBAN = "iban";
  @SerializedName(SERIALIZED_NAME_IBAN)
  private String iban;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_RIB_NUMBER = "rib_number";
  @SerializedName(SERIALIZED_NAME_RIB_NUMBER)
  private String ribNumber;

  public static final String SERIALIZED_NAME_ACCOUNT_TYPE = "account_type";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TYPE)
  private String accountType;

  public static final String SERIALIZED_NAME_ACH_ROUTING_NUMBER = "ach_routing_number";
  @SerializedName(SERIALIZED_NAME_ACH_ROUTING_NUMBER)
  private String achRoutingNumber;

  public WorkerBankAccountToAdd() {
  }

  public WorkerBankAccountToAdd fullName(String fullName) {
    
    
    
    
    this.fullName = fullName;
    return this;
  }

   /**
   * Full name of the user.
   * @return fullName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "John Doe", value = "Full name of the user.")

  public String getFullName() {
    return fullName;
  }


  public void setFullName(String fullName) {
    
    
    
    this.fullName = fullName;
  }


  public WorkerBankAccountToAdd phone(String phone) {
    
    
    
    
    this.phone = phone;
    return this;
  }

   /**
   * The user&#39;s phone number.
   * @return phone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "+1234567890", value = "The user's phone number.")

  public String getPhone() {
    return phone;
  }


  public void setPhone(String phone) {
    
    
    
    this.phone = phone;
  }


  public WorkerBankAccountToAdd addressLine1(String addressLine1) {
    
    
    
    
    this.addressLine1 = addressLine1;
    return this;
  }

   /**
   * The primary address line.
   * @return addressLine1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1234 Main St", value = "The primary address line.")

  public String getAddressLine1() {
    return addressLine1;
  }


  public void setAddressLine1(String addressLine1) {
    
    
    
    this.addressLine1 = addressLine1;
  }


  public WorkerBankAccountToAdd addressLine2(String addressLine2) {
    
    
    
    
    this.addressLine2 = addressLine2;
    return this;
  }

   /**
   * The secondary address line.
   * @return addressLine2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Apartment 101", value = "The secondary address line.")

  public String getAddressLine2() {
    return addressLine2;
  }


  public void setAddressLine2(String addressLine2) {
    
    
    
    this.addressLine2 = addressLine2;
  }


  public WorkerBankAccountToAdd city(String city) {
    
    
    
    
    this.city = city;
    return this;
  }

   /**
   * The city of the user&#39;s address.
   * @return city
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Springfield", value = "The city of the user's address.")

  public String getCity() {
    return city;
  }


  public void setCity(String city) {
    
    
    
    this.city = city;
  }


  public WorkerBankAccountToAdd provinceState(String provinceState) {
    
    
    
    
    this.provinceState = provinceState;
    return this;
  }

   /**
   * The state or province of the user&#39;s address.
   * @return provinceState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Ontario", value = "The state or province of the user's address.")

  public String getProvinceState() {
    return provinceState;
  }


  public void setProvinceState(String provinceState) {
    
    
    
    this.provinceState = provinceState;
  }


  public WorkerBankAccountToAdd postal(String postal) {
    
    
    
    
    this.postal = postal;
    return this;
  }

   /**
   * The user&#39;s postal or ZIP code.
   * @return postal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "12345", value = "The user's postal or ZIP code.")

  public String getPostal() {
    return postal;
  }


  public void setPostal(String postal) {
    
    
    
    this.postal = postal;
  }


  public WorkerBankAccountToAdd bankName(String bankName) {
    
    
    
    
    this.bankName = bankName;
    return this;
  }

   /**
   * Name of the user&#39;s bank.
   * @return bankName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Bank of Examples", value = "Name of the user's bank.")

  public String getBankName() {
    return bankName;
  }


  public void setBankName(String bankName) {
    
    
    
    this.bankName = bankName;
  }


  public WorkerBankAccountToAdd countryCode(String countryCode) {
    
    
    
    
    this.countryCode = countryCode;
    return this;
  }

   /**
   * The country code of the user.
   * @return countryCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "US", value = "The country code of the user.")

  public String getCountryCode() {
    return countryCode;
  }


  public void setCountryCode(String countryCode) {
    
    
    
    this.countryCode = countryCode;
  }


  public WorkerBankAccountToAdd bankCountryCode(String bankCountryCode) {
    
    
    
    
    this.bankCountryCode = bankCountryCode;
    return this;
  }

   /**
   * The country code where the bank is located.
   * @return bankCountryCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "US", value = "The country code where the bank is located.")

  public String getBankCountryCode() {
    return bankCountryCode;
  }


  public void setBankCountryCode(String bankCountryCode) {
    
    
    
    this.bankCountryCode = bankCountryCode;
  }


  public WorkerBankAccountToAdd swiftBic(String swiftBic) {
    
    
    
    
    this.swiftBic = swiftBic;
    return this;
  }

   /**
   * SWIFT/BIC code for the bank.
   * @return swiftBic
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "EXAMPLEBIC", value = "SWIFT/BIC code for the bank.")

  public String getSwiftBic() {
    return swiftBic;
  }


  public void setSwiftBic(String swiftBic) {
    
    
    
    this.swiftBic = swiftBic;
  }


  public WorkerBankAccountToAdd accountNumber(String accountNumber) {
    
    
    
    
    this.accountNumber = accountNumber;
    return this;
  }

   /**
   * The user&#39;s bank account number.
   * @return accountNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "123456789012", value = "The user's bank account number.")

  public String getAccountNumber() {
    return accountNumber;
  }


  public void setAccountNumber(String accountNumber) {
    
    
    
    this.accountNumber = accountNumber;
  }


  public WorkerBankAccountToAdd bankCode(String bankCode) {
    
    
    
    
    this.bankCode = bankCode;
    return this;
  }

   /**
   * The bank code.
   * @return bankCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "123", value = "The bank code.")

  public String getBankCode() {
    return bankCode;
  }


  public void setBankCode(String bankCode) {
    
    
    
    this.bankCode = bankCode;
  }


  public WorkerBankAccountToAdd originalName(String originalName) {
    
    
    
    
    this.originalName = originalName;
    return this;
  }

   /**
   * The original name of the user.
   * @return originalName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Johnathan Doe", value = "The original name of the user.")

  public String getOriginalName() {
    return originalName;
  }


  public void setOriginalName(String originalName) {
    
    
    
    this.originalName = originalName;
  }


  public WorkerBankAccountToAdd taxId(String taxId) {
    
    
    
    
    this.taxId = taxId;
    return this;
  }

   /**
   * The user&#39;s tax identification number.
   * @return taxId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "123-45-6789", value = "The user's tax identification number.")

  public String getTaxId() {
    return taxId;
  }


  public void setTaxId(String taxId) {
    
    
    
    this.taxId = taxId;
  }


  public WorkerBankAccountToAdd branchCode(String branchCode) {
    
    
    
    
    this.branchCode = branchCode;
    return this;
  }

   /**
   * The branch code of the user&#39;s bank.
   * @return branchCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "001", value = "The branch code of the user's bank.")

  public String getBranchCode() {
    return branchCode;
  }


  public void setBranchCode(String branchCode) {
    
    
    
    this.branchCode = branchCode;
  }


  public WorkerBankAccountToAdd currencyCode(String currencyCode) {
    
    
    
    
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * The currency code for transactions.
   * @return currencyCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "USD", value = "The currency code for transactions.")

  public String getCurrencyCode() {
    return currencyCode;
  }


  public void setCurrencyCode(String currencyCode) {
    
    
    
    this.currencyCode = currencyCode;
  }


  public WorkerBankAccountToAdd bankBranchName(String bankBranchName) {
    
    
    
    
    this.bankBranchName = bankBranchName;
    return this;
  }

   /**
   * The name of the user&#39;s bank branch.
   * @return bankBranchName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Main Street Branch", value = "The name of the user's bank branch.")

  public String getBankBranchName() {
    return bankBranchName;
  }


  public void setBankBranchName(String bankBranchName) {
    
    
    
    this.bankBranchName = bankBranchName;
  }


  public WorkerBankAccountToAdd iban(String iban) {
    
    
    
    
    this.iban = iban;
    return this;
  }

   /**
   * The International Bank Account Number (IBAN).
   * @return iban
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "GB29NWBK60161331926819", value = "The International Bank Account Number (IBAN).")

  public String getIban() {
    return iban;
  }


  public void setIban(String iban) {
    
    
    
    this.iban = iban;
  }


  public WorkerBankAccountToAdd email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * The user&#39;s email address.
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "john.doe@example.com", value = "The user's email address.")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public WorkerBankAccountToAdd ribNumber(String ribNumber) {
    
    
    
    
    this.ribNumber = ribNumber;
    return this;
  }

   /**
   * The RIB(Relevé d&#39;Identité Bancaire).
   * @return ribNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "12345678901", value = "The RIB(Relevé d'Identité Bancaire).")

  public String getRibNumber() {
    return ribNumber;
  }


  public void setRibNumber(String ribNumber) {
    
    
    
    this.ribNumber = ribNumber;
  }


  public WorkerBankAccountToAdd accountType(String accountType) {
    
    
    
    
    this.accountType = accountType;
    return this;
  }

   /**
   * Bank account type.
   * @return accountType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "12345678901", value = "Bank account type.")

  public String getAccountType() {
    return accountType;
  }


  public void setAccountType(String accountType) {
    
    
    
    this.accountType = accountType;
  }


  public WorkerBankAccountToAdd achRoutingNumber(String achRoutingNumber) {
    
    
    
    
    this.achRoutingNumber = achRoutingNumber;
    return this;
  }

   /**
   * The ACH (Automated Clearing House) Routing Number.
   * @return achRoutingNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "12345678901", value = "The ACH (Automated Clearing House) Routing Number.")

  public String getAchRoutingNumber() {
    return achRoutingNumber;
  }


  public void setAchRoutingNumber(String achRoutingNumber) {
    
    
    
    this.achRoutingNumber = achRoutingNumber;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the WorkerBankAccountToAdd instance itself
   */
  public WorkerBankAccountToAdd putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkerBankAccountToAdd workerBankAccountToAdd = (WorkerBankAccountToAdd) o;
    return Objects.equals(this.fullName, workerBankAccountToAdd.fullName) &&
        Objects.equals(this.phone, workerBankAccountToAdd.phone) &&
        Objects.equals(this.addressLine1, workerBankAccountToAdd.addressLine1) &&
        Objects.equals(this.addressLine2, workerBankAccountToAdd.addressLine2) &&
        Objects.equals(this.city, workerBankAccountToAdd.city) &&
        Objects.equals(this.provinceState, workerBankAccountToAdd.provinceState) &&
        Objects.equals(this.postal, workerBankAccountToAdd.postal) &&
        Objects.equals(this.bankName, workerBankAccountToAdd.bankName) &&
        Objects.equals(this.countryCode, workerBankAccountToAdd.countryCode) &&
        Objects.equals(this.bankCountryCode, workerBankAccountToAdd.bankCountryCode) &&
        Objects.equals(this.swiftBic, workerBankAccountToAdd.swiftBic) &&
        Objects.equals(this.accountNumber, workerBankAccountToAdd.accountNumber) &&
        Objects.equals(this.bankCode, workerBankAccountToAdd.bankCode) &&
        Objects.equals(this.originalName, workerBankAccountToAdd.originalName) &&
        Objects.equals(this.taxId, workerBankAccountToAdd.taxId) &&
        Objects.equals(this.branchCode, workerBankAccountToAdd.branchCode) &&
        Objects.equals(this.currencyCode, workerBankAccountToAdd.currencyCode) &&
        Objects.equals(this.bankBranchName, workerBankAccountToAdd.bankBranchName) &&
        Objects.equals(this.iban, workerBankAccountToAdd.iban) &&
        Objects.equals(this.email, workerBankAccountToAdd.email) &&
        Objects.equals(this.ribNumber, workerBankAccountToAdd.ribNumber) &&
        Objects.equals(this.accountType, workerBankAccountToAdd.accountType) &&
        Objects.equals(this.achRoutingNumber, workerBankAccountToAdd.achRoutingNumber)&&
        Objects.equals(this.additionalProperties, workerBankAccountToAdd.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fullName, phone, addressLine1, addressLine2, city, provinceState, postal, bankName, countryCode, bankCountryCode, swiftBic, accountNumber, bankCode, originalName, taxId, branchCode, currencyCode, bankBranchName, iban, email, ribNumber, accountType, achRoutingNumber, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkerBankAccountToAdd {\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    addressLine1: ").append(toIndentedString(addressLine1)).append("\n");
    sb.append("    addressLine2: ").append(toIndentedString(addressLine2)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    provinceState: ").append(toIndentedString(provinceState)).append("\n");
    sb.append("    postal: ").append(toIndentedString(postal)).append("\n");
    sb.append("    bankName: ").append(toIndentedString(bankName)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    bankCountryCode: ").append(toIndentedString(bankCountryCode)).append("\n");
    sb.append("    swiftBic: ").append(toIndentedString(swiftBic)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    bankCode: ").append(toIndentedString(bankCode)).append("\n");
    sb.append("    originalName: ").append(toIndentedString(originalName)).append("\n");
    sb.append("    taxId: ").append(toIndentedString(taxId)).append("\n");
    sb.append("    branchCode: ").append(toIndentedString(branchCode)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    bankBranchName: ").append(toIndentedString(bankBranchName)).append("\n");
    sb.append("    iban: ").append(toIndentedString(iban)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    ribNumber: ").append(toIndentedString(ribNumber)).append("\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    achRoutingNumber: ").append(toIndentedString(achRoutingNumber)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("full_name");
    openapiFields.add("phone");
    openapiFields.add("address_line1");
    openapiFields.add("address_line2");
    openapiFields.add("city");
    openapiFields.add("province_state");
    openapiFields.add("postal");
    openapiFields.add("bank_name");
    openapiFields.add("country_code");
    openapiFields.add("bank_country_code");
    openapiFields.add("swift_bic");
    openapiFields.add("account_number");
    openapiFields.add("bank_code");
    openapiFields.add("original_name");
    openapiFields.add("tax_id");
    openapiFields.add("branch_code");
    openapiFields.add("currency_code");
    openapiFields.add("bank_branch_name");
    openapiFields.add("iban");
    openapiFields.add("email");
    openapiFields.add("rib_number");
    openapiFields.add("account_type");
    openapiFields.add("ach_routing_number");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WorkerBankAccountToAdd
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!WorkerBankAccountToAdd.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkerBankAccountToAdd is not found in the empty JSON string", WorkerBankAccountToAdd.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("full_name") != null && !jsonObj.get("full_name").isJsonNull()) && !jsonObj.get("full_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `full_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("full_name").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("address_line1") != null && !jsonObj.get("address_line1").isJsonNull()) && !jsonObj.get("address_line1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_line1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_line1").toString()));
      }
      if ((jsonObj.get("address_line2") != null && !jsonObj.get("address_line2").isJsonNull()) && !jsonObj.get("address_line2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_line2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_line2").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("province_state") != null && !jsonObj.get("province_state").isJsonNull()) && !jsonObj.get("province_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `province_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("province_state").toString()));
      }
      if ((jsonObj.get("postal") != null && !jsonObj.get("postal").isJsonNull()) && !jsonObj.get("postal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postal").toString()));
      }
      if ((jsonObj.get("bank_name") != null && !jsonObj.get("bank_name").isJsonNull()) && !jsonObj.get("bank_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bank_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bank_name").toString()));
      }
      if ((jsonObj.get("country_code") != null && !jsonObj.get("country_code").isJsonNull()) && !jsonObj.get("country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_code").toString()));
      }
      if ((jsonObj.get("bank_country_code") != null && !jsonObj.get("bank_country_code").isJsonNull()) && !jsonObj.get("bank_country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bank_country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bank_country_code").toString()));
      }
      if ((jsonObj.get("swift_bic") != null && !jsonObj.get("swift_bic").isJsonNull()) && !jsonObj.get("swift_bic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `swift_bic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("swift_bic").toString()));
      }
      if ((jsonObj.get("account_number") != null && !jsonObj.get("account_number").isJsonNull()) && !jsonObj.get("account_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_number").toString()));
      }
      if ((jsonObj.get("bank_code") != null && !jsonObj.get("bank_code").isJsonNull()) && !jsonObj.get("bank_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bank_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bank_code").toString()));
      }
      if ((jsonObj.get("original_name") != null && !jsonObj.get("original_name").isJsonNull()) && !jsonObj.get("original_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `original_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("original_name").toString()));
      }
      if ((jsonObj.get("tax_id") != null && !jsonObj.get("tax_id").isJsonNull()) && !jsonObj.get("tax_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_id").toString()));
      }
      if ((jsonObj.get("branch_code") != null && !jsonObj.get("branch_code").isJsonNull()) && !jsonObj.get("branch_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branch_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branch_code").toString()));
      }
      if ((jsonObj.get("currency_code") != null && !jsonObj.get("currency_code").isJsonNull()) && !jsonObj.get("currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency_code").toString()));
      }
      if ((jsonObj.get("bank_branch_name") != null && !jsonObj.get("bank_branch_name").isJsonNull()) && !jsonObj.get("bank_branch_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bank_branch_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bank_branch_name").toString()));
      }
      if ((jsonObj.get("iban") != null && !jsonObj.get("iban").isJsonNull()) && !jsonObj.get("iban").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iban` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iban").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("rib_number") != null && !jsonObj.get("rib_number").isJsonNull()) && !jsonObj.get("rib_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rib_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rib_number").toString()));
      }
      if ((jsonObj.get("account_type") != null && !jsonObj.get("account_type").isJsonNull()) && !jsonObj.get("account_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_type").toString()));
      }
      if ((jsonObj.get("ach_routing_number") != null && !jsonObj.get("ach_routing_number").isJsonNull()) && !jsonObj.get("ach_routing_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ach_routing_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ach_routing_number").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkerBankAccountToAdd.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkerBankAccountToAdd' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkerBankAccountToAdd> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkerBankAccountToAdd.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkerBankAccountToAdd>() {
           @Override
           public void write(JsonWriter out, WorkerBankAccountToAdd value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkerBankAccountToAdd read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             WorkerBankAccountToAdd instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WorkerBankAccountToAdd given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WorkerBankAccountToAdd
  * @throws IOException if the JSON string is invalid with respect to WorkerBankAccountToAdd
  */
  public static WorkerBankAccountToAdd fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkerBankAccountToAdd.class);
  }

 /**
  * Convert an instance of WorkerBankAccountToAdd to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

