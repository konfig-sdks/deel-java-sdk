/*
 * Deel REST API
 * API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AdminUserCreateContainer;
import com.konfigthis.client.model.AdminUserCreateRequest;
import com.konfigthis.client.model.AdminUsersContainer;
import com.konfigthis.client.model.CreateAdminUserResponseContainer;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ManagersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ManagersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ManagersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewManagerCall(AdminUserCreateContainer adminUserCreateContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminUserCreateContainer;

        // create path and map variables
        String localVarPath = "/managers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewManagerValidateBeforeCall(AdminUserCreateContainer adminUserCreateContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'adminUserCreateContainer' is set
        if (adminUserCreateContainer == null) {
            throw new ApiException("Missing the required parameter 'adminUserCreateContainer' when calling createNewManager(Async)");
        }

        return createNewManagerCall(adminUserCreateContainer, _callback);

    }


    private ApiResponse<CreateAdminUserResponseContainer> createNewManagerWithHttpInfo(AdminUserCreateContainer adminUserCreateContainer) throws ApiException {
        okhttp3.Call localVarCall = createNewManagerValidateBeforeCall(adminUserCreateContainer, null);
        Type localVarReturnType = new TypeToken<CreateAdminUserResponseContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewManagerAsync(AdminUserCreateContainer adminUserCreateContainer, final ApiCallback<CreateAdminUserResponseContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewManagerValidateBeforeCall(adminUserCreateContainer, _callback);
        Type localVarReturnType = new TypeToken<CreateAdminUserResponseContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewManagerRequestBuilder {
        private final AdminUserCreateRequest data;

        private CreateNewManagerRequestBuilder(AdminUserCreateRequest data) {
            this.data = data;
        }

        /**
         * Build call for createNewManager
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Basic information of the new admin user. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> A matching profile already exists. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminUserCreateContainer adminUserCreateContainer = buildBodyParams();
            return createNewManagerCall(adminUserCreateContainer, _callback);
        }

        private AdminUserCreateContainer buildBodyParams() {
            AdminUserCreateContainer adminUserCreateContainer = new AdminUserCreateContainer();
            adminUserCreateContainer.data(this.data);
            return adminUserCreateContainer;
        }

        /**
         * Execute createNewManager request
         * @return CreateAdminUserResponseContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Basic information of the new admin user. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> A matching profile already exists. </td><td>  -  </td></tr>
         </table>
         */
        public CreateAdminUserResponseContainer execute() throws ApiException {
            AdminUserCreateContainer adminUserCreateContainer = buildBodyParams();
            ApiResponse<CreateAdminUserResponseContainer> localVarResp = createNewManagerWithHttpInfo(adminUserCreateContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewManager request with HTTP info returned
         * @return ApiResponse&lt;CreateAdminUserResponseContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Basic information of the new admin user. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> A matching profile already exists. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateAdminUserResponseContainer> executeWithHttpInfo() throws ApiException {
            AdminUserCreateContainer adminUserCreateContainer = buildBodyParams();
            return createNewManagerWithHttpInfo(adminUserCreateContainer);
        }

        /**
         * Execute createNewManager request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Basic information of the new admin user. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> A matching profile already exists. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateAdminUserResponseContainer> _callback) throws ApiException {
            AdminUserCreateContainer adminUserCreateContainer = buildBodyParams();
            return createNewManagerAsync(adminUserCreateContainer, _callback);
        }
    }

    /**
     * Create a manager
     * Create a new organization manager.
     * @param adminUserCreateContainer Basic information of the new admin user. (required)
     * @return CreateNewManagerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Basic information of the new admin user. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A matching profile already exists. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewManagerRequestBuilder createNewManager(AdminUserCreateRequest data) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        return new CreateNewManagerRequestBuilder(data);
    }
    private okhttp3.Call listCall(String limit, String offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/managers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(String limit, String offset, final ApiCallback _callback) throws ApiException {
        return listCall(limit, offset, _callback);

    }


    private ApiResponse<AdminUsersContainer> listWithHttpInfo(String limit, String offset) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<AdminUsersContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(String limit, String offset, final ApiCallback<AdminUsersContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<AdminUsersContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private String limit;
        private String offset;

        private ListRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit Maximum number of records to return. (optional, default to 50)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder limit(String limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset/index of record for the next page of records to return. (optional, default to 0)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Basic information of the new admin user. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> A matching profile already exists. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(limit, offset, _callback);
        }


        /**
         * Execute list request
         * @return AdminUsersContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Basic information of the new admin user. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> A matching profile already exists. </td><td>  -  </td></tr>
         </table>
         */
        public AdminUsersContainer execute() throws ApiException {
            ApiResponse<AdminUsersContainer> localVarResp = listWithHttpInfo(limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;AdminUsersContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Basic information of the new admin user. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> A matching profile already exists. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminUsersContainer> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(limit, offset);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Basic information of the new admin user. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> A matching profile already exists. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminUsersContainer> _callback) throws ApiException {
            return listAsync(limit, offset, _callback);
        }
    }

    /**
     * List of managers
     * List all organization managers.
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Basic information of the new admin user. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A matching profile already exists. </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
}
