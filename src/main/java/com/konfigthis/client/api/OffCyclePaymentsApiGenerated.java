/*
 * Deel REST API
 * API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.GenericResultCreatedWithId;
import com.konfigthis.client.model.OffCyclePaymentContainer;
import com.konfigthis.client.model.OffCyclePaymentListContainer;
import com.konfigthis.client.model.OffCyclePaymentToCreate;
import com.konfigthis.client.model.OffCyclePaymentToCreateContainer;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OffCyclePaymentsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OffCyclePaymentsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public OffCyclePaymentsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addPaymentInvoiceCall(String contractId, OffCyclePaymentToCreateContainer offCyclePaymentToCreateContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = offCyclePaymentToCreateContainer;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/off-cycle-payments"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addPaymentInvoiceValidateBeforeCall(String contractId, OffCyclePaymentToCreateContainer offCyclePaymentToCreateContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling addPaymentInvoice(Async)");
        }

        return addPaymentInvoiceCall(contractId, offCyclePaymentToCreateContainer, _callback);

    }


    private ApiResponse<GenericResultCreatedWithId> addPaymentInvoiceWithHttpInfo(String contractId, OffCyclePaymentToCreateContainer offCyclePaymentToCreateContainer) throws ApiException {
        okhttp3.Call localVarCall = addPaymentInvoiceValidateBeforeCall(contractId, offCyclePaymentToCreateContainer, null);
        Type localVarReturnType = new TypeToken<GenericResultCreatedWithId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addPaymentInvoiceAsync(String contractId, OffCyclePaymentToCreateContainer offCyclePaymentToCreateContainer, final ApiCallback<GenericResultCreatedWithId> _callback) throws ApiException {

        okhttp3.Call localVarCall = addPaymentInvoiceValidateBeforeCall(contractId, offCyclePaymentToCreateContainer, _callback);
        Type localVarReturnType = new TypeToken<GenericResultCreatedWithId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddPaymentInvoiceRequestBuilder {
        private final OffCyclePaymentToCreate data;
        private final String contractId;

        private AddPaymentInvoiceRequestBuilder(OffCyclePaymentToCreate data, String contractId) {
            this.data = data;
            this.contractId = contractId;
        }

        /**
         * Build call for addPaymentInvoice
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OffCyclePaymentToCreateContainer offCyclePaymentToCreateContainer = buildBodyParams();
            return addPaymentInvoiceCall(contractId, offCyclePaymentToCreateContainer, _callback);
        }

        private OffCyclePaymentToCreateContainer buildBodyParams() {
            OffCyclePaymentToCreateContainer offCyclePaymentToCreateContainer = new OffCyclePaymentToCreateContainer();
            offCyclePaymentToCreateContainer.data(this.data);
            return offCyclePaymentToCreateContainer;
        }

        /**
         * Execute addPaymentInvoice request
         * @return GenericResultCreatedWithId
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GenericResultCreatedWithId execute() throws ApiException {
            OffCyclePaymentToCreateContainer offCyclePaymentToCreateContainer = buildBodyParams();
            ApiResponse<GenericResultCreatedWithId> localVarResp = addPaymentInvoiceWithHttpInfo(contractId, offCyclePaymentToCreateContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addPaymentInvoice request with HTTP info returned
         * @return ApiResponse&lt;GenericResultCreatedWithId&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GenericResultCreatedWithId> executeWithHttpInfo() throws ApiException {
            OffCyclePaymentToCreateContainer offCyclePaymentToCreateContainer = buildBodyParams();
            return addPaymentInvoiceWithHttpInfo(contractId, offCyclePaymentToCreateContainer);
        }

        /**
         * Execute addPaymentInvoice request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GenericResultCreatedWithId> _callback) throws ApiException {
            OffCyclePaymentToCreateContainer offCyclePaymentToCreateContainer = buildBodyParams();
            return addPaymentInvoiceAsync(contractId, offCyclePaymentToCreateContainer, _callback);
        }
    }

    /**
     * Add off-cycle payment
     * Add a new invoice line-item for the purpose of off-cycle payment for a given contract.
     * @param contractId Deel contract id. (required)
     * @return AddPaymentInvoiceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public AddPaymentInvoiceRequestBuilder addPaymentInvoice(OffCyclePaymentToCreate data, String contractId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        return new AddPaymentInvoiceRequestBuilder(data, contractId);
    }
    private okhttp3.Call getListCall(String contractId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/off-cycle-payments"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListValidateBeforeCall(String contractId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling getList(Async)");
        }

        return getListCall(contractId, _callback);

    }


    private ApiResponse<OffCyclePaymentListContainer> getListWithHttpInfo(String contractId) throws ApiException {
        okhttp3.Call localVarCall = getListValidateBeforeCall(contractId, null);
        Type localVarReturnType = new TypeToken<OffCyclePaymentListContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getListAsync(String contractId, final ApiCallback<OffCyclePaymentListContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListValidateBeforeCall(contractId, _callback);
        Type localVarReturnType = new TypeToken<OffCyclePaymentListContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetListRequestBuilder {
        private final String contractId;

        private GetListRequestBuilder(String contractId) {
            this.contractId = contractId;
        }

        /**
         * Build call for getList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListCall(contractId, _callback);
        }


        /**
         * Execute getList request
         * @return OffCyclePaymentListContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public OffCyclePaymentListContainer execute() throws ApiException {
            ApiResponse<OffCyclePaymentListContainer> localVarResp = getListWithHttpInfo(contractId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getList request with HTTP info returned
         * @return ApiResponse&lt;OffCyclePaymentListContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OffCyclePaymentListContainer> executeWithHttpInfo() throws ApiException {
            return getListWithHttpInfo(contractId);
        }

        /**
         * Execute getList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OffCyclePaymentListContainer> _callback) throws ApiException {
            return getListAsync(contractId, _callback);
        }
    }

    /**
     * List of off-cycle payments
     * Retrieve a list of off-cycle payments for the given contract id.
     * @param contractId Deel contract id. (required)
     * @return GetListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetListRequestBuilder getList(String contractId) throws IllegalArgumentException {
        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        return new GetListRequestBuilder(contractId);
    }
    private okhttp3.Call getSinglePaymentCall(String contractId, String offcyclePaymentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/off-cycle-payments/{offcycle_payment_id}"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()))
            .replace("{" + "offcycle_payment_id" + "}", localVarApiClient.escapeString(offcyclePaymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSinglePaymentValidateBeforeCall(String contractId, String offcyclePaymentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling getSinglePayment(Async)");
        }

        // verify the required parameter 'offcyclePaymentId' is set
        if (offcyclePaymentId == null) {
            throw new ApiException("Missing the required parameter 'offcyclePaymentId' when calling getSinglePayment(Async)");
        }

        return getSinglePaymentCall(contractId, offcyclePaymentId, _callback);

    }


    private ApiResponse<OffCyclePaymentContainer> getSinglePaymentWithHttpInfo(String contractId, String offcyclePaymentId) throws ApiException {
        okhttp3.Call localVarCall = getSinglePaymentValidateBeforeCall(contractId, offcyclePaymentId, null);
        Type localVarReturnType = new TypeToken<OffCyclePaymentContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSinglePaymentAsync(String contractId, String offcyclePaymentId, final ApiCallback<OffCyclePaymentContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSinglePaymentValidateBeforeCall(contractId, offcyclePaymentId, _callback);
        Type localVarReturnType = new TypeToken<OffCyclePaymentContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSinglePaymentRequestBuilder {
        private final String contractId;
        private final String offcyclePaymentId;

        private GetSinglePaymentRequestBuilder(String contractId, String offcyclePaymentId) {
            this.contractId = contractId;
            this.offcyclePaymentId = offcyclePaymentId;
        }

        /**
         * Build call for getSinglePayment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSinglePaymentCall(contractId, offcyclePaymentId, _callback);
        }


        /**
         * Execute getSinglePayment request
         * @return OffCyclePaymentContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public OffCyclePaymentContainer execute() throws ApiException {
            ApiResponse<OffCyclePaymentContainer> localVarResp = getSinglePaymentWithHttpInfo(contractId, offcyclePaymentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSinglePayment request with HTTP info returned
         * @return ApiResponse&lt;OffCyclePaymentContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OffCyclePaymentContainer> executeWithHttpInfo() throws ApiException {
            return getSinglePaymentWithHttpInfo(contractId, offcyclePaymentId);
        }

        /**
         * Execute getSinglePayment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OffCyclePaymentContainer> _callback) throws ApiException {
            return getSinglePaymentAsync(contractId, offcyclePaymentId, _callback);
        }
    }

    /**
     * Retrieve a single off-cycle payment
     * Retrieve a single off-cycle payment.
     * @param contractId Deel contract id. (required)
     * @param offcyclePaymentId ID of off-cycle payment to return (required)
     * @return GetSinglePaymentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetSinglePaymentRequestBuilder getSinglePayment(String contractId, String offcyclePaymentId) throws IllegalArgumentException {
        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        if (offcyclePaymentId == null) throw new IllegalArgumentException("\"offcyclePaymentId\" is required but got null");
            

        return new GetSinglePaymentRequestBuilder(contractId, offcyclePaymentId);
    }
}
