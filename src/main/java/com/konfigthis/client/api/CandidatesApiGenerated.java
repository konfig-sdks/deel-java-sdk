/*
 * Deel REST API
 * API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CandidateToCreate;
import com.konfigthis.client.model.CandidateToCreateContainer;
import com.konfigthis.client.model.CandidateToPatch;
import com.konfigthis.client.model.CandidateToPatchContainer;
import com.konfigthis.client.model.GenericResultCreated;
import com.konfigthis.client.model.GenericResultUpdated;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CandidatesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CandidatesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CandidatesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addCandidateToDeelCall(CandidateToCreateContainer candidateToCreateContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = candidateToCreateContainer;

        // create path and map variables
        String localVarPath = "/candidates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCandidateToDeelValidateBeforeCall(CandidateToCreateContainer candidateToCreateContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'candidateToCreateContainer' is set
        if (candidateToCreateContainer == null) {
            throw new ApiException("Missing the required parameter 'candidateToCreateContainer' when calling addCandidateToDeel(Async)");
        }

        return addCandidateToDeelCall(candidateToCreateContainer, _callback);

    }


    private ApiResponse<GenericResultCreated> addCandidateToDeelWithHttpInfo(CandidateToCreateContainer candidateToCreateContainer) throws ApiException {
        okhttp3.Call localVarCall = addCandidateToDeelValidateBeforeCall(candidateToCreateContainer, null);
        Type localVarReturnType = new TypeToken<GenericResultCreated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addCandidateToDeelAsync(CandidateToCreateContainer candidateToCreateContainer, final ApiCallback<GenericResultCreated> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCandidateToDeelValidateBeforeCall(candidateToCreateContainer, _callback);
        Type localVarReturnType = new TypeToken<GenericResultCreated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddCandidateToDeelRequestBuilder {
        private final CandidateToCreate data;

        private AddCandidateToDeelRequestBuilder(CandidateToCreate data) {
            this.data = data;
        }

        /**
         * Build call for addCandidateToDeel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CandidateToCreateContainer candidateToCreateContainer = buildBodyParams();
            return addCandidateToDeelCall(candidateToCreateContainer, _callback);
        }

        private CandidateToCreateContainer buildBodyParams() {
            CandidateToCreateContainer candidateToCreateContainer = new CandidateToCreateContainer();
            candidateToCreateContainer.data(this.data);
            return candidateToCreateContainer;
        }

        /**
         * Execute addCandidateToDeel request
         * @return GenericResultCreated
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GenericResultCreated execute() throws ApiException {
            CandidateToCreateContainer candidateToCreateContainer = buildBodyParams();
            ApiResponse<GenericResultCreated> localVarResp = addCandidateToDeelWithHttpInfo(candidateToCreateContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addCandidateToDeel request with HTTP info returned
         * @return ApiResponse&lt;GenericResultCreated&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GenericResultCreated> executeWithHttpInfo() throws ApiException {
            CandidateToCreateContainer candidateToCreateContainer = buildBodyParams();
            return addCandidateToDeelWithHttpInfo(candidateToCreateContainer);
        }

        /**
         * Execute addCandidateToDeel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GenericResultCreated> _callback) throws ApiException {
            CandidateToCreateContainer candidateToCreateContainer = buildBodyParams();
            return addCandidateToDeelAsync(candidateToCreateContainer, _callback);
        }
    }

    /**
     * Add Candidate
     * Add a candidate to Deel.
     * @param candidateToCreateContainer Add a candidate to Deel (required)
     * @return AddCandidateToDeelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public AddCandidateToDeelRequestBuilder addCandidateToDeel(CandidateToCreate data) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        return new AddCandidateToDeelRequestBuilder(data);
    }
    private okhttp3.Call updateCandidateByIdCall(String candidateId, CandidateToPatchContainer candidateToPatchContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = candidateToPatchContainer;

        // create path and map variables
        String localVarPath = "/candidates/{candidate_id}"
            .replace("{" + "candidate_id" + "}", localVarApiClient.escapeString(candidateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCandidateByIdValidateBeforeCall(String candidateId, CandidateToPatchContainer candidateToPatchContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'candidateId' is set
        if (candidateId == null) {
            throw new ApiException("Missing the required parameter 'candidateId' when calling updateCandidateById(Async)");
        }

        // verify the required parameter 'candidateToPatchContainer' is set
        if (candidateToPatchContainer == null) {
            throw new ApiException("Missing the required parameter 'candidateToPatchContainer' when calling updateCandidateById(Async)");
        }

        return updateCandidateByIdCall(candidateId, candidateToPatchContainer, _callback);

    }


    private ApiResponse<GenericResultUpdated> updateCandidateByIdWithHttpInfo(String candidateId, CandidateToPatchContainer candidateToPatchContainer) throws ApiException {
        okhttp3.Call localVarCall = updateCandidateByIdValidateBeforeCall(candidateId, candidateToPatchContainer, null);
        Type localVarReturnType = new TypeToken<GenericResultUpdated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCandidateByIdAsync(String candidateId, CandidateToPatchContainer candidateToPatchContainer, final ApiCallback<GenericResultUpdated> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCandidateByIdValidateBeforeCall(candidateId, candidateToPatchContainer, _callback);
        Type localVarReturnType = new TypeToken<GenericResultUpdated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCandidateByIdRequestBuilder {
        private final CandidateToPatch data;
        private final String candidateId;

        private UpdateCandidateByIdRequestBuilder(CandidateToPatch data, String candidateId) {
            this.data = data;
            this.candidateId = candidateId;
        }

        /**
         * Build call for updateCandidateById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CandidateToPatchContainer candidateToPatchContainer = buildBodyParams();
            return updateCandidateByIdCall(candidateId, candidateToPatchContainer, _callback);
        }

        private CandidateToPatchContainer buildBodyParams() {
            CandidateToPatchContainer candidateToPatchContainer = new CandidateToPatchContainer();
            candidateToPatchContainer.data(this.data);
            return candidateToPatchContainer;
        }

        /**
         * Execute updateCandidateById request
         * @return GenericResultUpdated
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GenericResultUpdated execute() throws ApiException {
            CandidateToPatchContainer candidateToPatchContainer = buildBodyParams();
            ApiResponse<GenericResultUpdated> localVarResp = updateCandidateByIdWithHttpInfo(candidateId, candidateToPatchContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCandidateById request with HTTP info returned
         * @return ApiResponse&lt;GenericResultUpdated&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GenericResultUpdated> executeWithHttpInfo() throws ApiException {
            CandidateToPatchContainer candidateToPatchContainer = buildBodyParams();
            return updateCandidateByIdWithHttpInfo(candidateId, candidateToPatchContainer);
        }

        /**
         * Execute updateCandidateById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GenericResultUpdated> _callback) throws ApiException {
            CandidateToPatchContainer candidateToPatchContainer = buildBodyParams();
            return updateCandidateByIdAsync(candidateId, candidateToPatchContainer, _callback);
        }
    }

    /**
     * Update Candidate
     * Update an existed candidate.
     * @param candidateId Candidate id. (required)
     * @param candidateToPatchContainer Update an existed candidate (required)
     * @return UpdateCandidateByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCandidateByIdRequestBuilder updateCandidateById(CandidateToPatch data, String candidateId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (candidateId == null) throw new IllegalArgumentException("\"candidateId\" is required but got null");
            

        return new UpdateCandidateByIdRequestBuilder(data, candidateId);
    }
}
