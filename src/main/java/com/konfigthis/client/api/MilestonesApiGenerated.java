/*
 * Deel REST API
 * API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.GenericResultCreated;
import com.konfigthis.client.model.GenericResultDeleted;
import com.konfigthis.client.model.MilestoneContainer;
import com.konfigthis.client.model.MilestoneListContainer;
import com.konfigthis.client.model.MilestoneProperties;
import com.konfigthis.client.model.MilestoneReviewToCreate;
import com.konfigthis.client.model.MilestoneReviewToCreateContainer;
import com.konfigthis.client.model.MilestoneReviewsToCreate;
import com.konfigthis.client.model.MilestoneReviewsToCreateContainer;
import com.konfigthis.client.model.MilestoneToCreateContainer;
import com.konfigthis.client.model.MilestoneToCreateFormWithFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MilestonesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MilestonesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public MilestonesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewMilestoneCall(String contractId, MilestoneToCreateContainer milestoneToCreateContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = milestoneToCreateContainer;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/milestones"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewMilestoneValidateBeforeCall(String contractId, MilestoneToCreateContainer milestoneToCreateContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling createNewMilestone(Async)");
        }

        return createNewMilestoneCall(contractId, milestoneToCreateContainer, _callback);

    }


    private ApiResponse<GenericResultCreated> createNewMilestoneWithHttpInfo(String contractId, MilestoneToCreateContainer milestoneToCreateContainer) throws ApiException {
        okhttp3.Call localVarCall = createNewMilestoneValidateBeforeCall(contractId, milestoneToCreateContainer, null);
        Type localVarReturnType = new TypeToken<GenericResultCreated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewMilestoneAsync(String contractId, MilestoneToCreateContainer milestoneToCreateContainer, final ApiCallback<GenericResultCreated> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewMilestoneValidateBeforeCall(contractId, milestoneToCreateContainer, _callback);
        Type localVarReturnType = new TypeToken<GenericResultCreated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewMilestoneRequestBuilder {
        private final MilestoneProperties data;
        private final String contractId;

        private CreateNewMilestoneRequestBuilder(MilestoneProperties data, String contractId) {
            this.data = data;
            this.contractId = contractId;
        }

        /**
         * Build call for createNewMilestone
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MilestoneToCreateContainer milestoneToCreateContainer = buildBodyParams();
            return createNewMilestoneCall(contractId, milestoneToCreateContainer, _callback);
        }

        private MilestoneToCreateContainer buildBodyParams() {
            MilestoneToCreateContainer milestoneToCreateContainer = new MilestoneToCreateContainer();
            milestoneToCreateContainer.data(this.data);
            return milestoneToCreateContainer;
        }

        /**
         * Execute createNewMilestone request
         * @return GenericResultCreated
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GenericResultCreated execute() throws ApiException {
            MilestoneToCreateContainer milestoneToCreateContainer = buildBodyParams();
            ApiResponse<GenericResultCreated> localVarResp = createNewMilestoneWithHttpInfo(contractId, milestoneToCreateContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewMilestone request with HTTP info returned
         * @return ApiResponse&lt;GenericResultCreated&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GenericResultCreated> executeWithHttpInfo() throws ApiException {
            MilestoneToCreateContainer milestoneToCreateContainer = buildBodyParams();
            return createNewMilestoneWithHttpInfo(contractId, milestoneToCreateContainer);
        }

        /**
         * Execute createNewMilestone request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GenericResultCreated> _callback) throws ApiException {
            MilestoneToCreateContainer milestoneToCreateContainer = buildBodyParams();
            return createNewMilestoneAsync(contractId, milestoneToCreateContainer, _callback);
        }
    }

    /**
     * Create a milestone
     * Add a new milestone to contract.
     * @param contractId Deel contract id. (required)
     * @return CreateNewMilestoneRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewMilestoneRequestBuilder createNewMilestone(MilestoneProperties data, String contractId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        return new CreateNewMilestoneRequestBuilder(data, contractId);
    }
    private okhttp3.Call createReviewCall(String contractId, String milestoneId, MilestoneReviewToCreateContainer milestoneReviewToCreateContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = milestoneReviewToCreateContainer;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/milestones/{milestone_id}/reviews"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()))
            .replace("{" + "milestone_id" + "}", localVarApiClient.escapeString(milestoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createReviewValidateBeforeCall(String contractId, String milestoneId, MilestoneReviewToCreateContainer milestoneReviewToCreateContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling createReview(Async)");
        }

        // verify the required parameter 'milestoneId' is set
        if (milestoneId == null) {
            throw new ApiException("Missing the required parameter 'milestoneId' when calling createReview(Async)");
        }

        return createReviewCall(contractId, milestoneId, milestoneReviewToCreateContainer, _callback);

    }


    private ApiResponse<GenericResultCreated> createReviewWithHttpInfo(String contractId, String milestoneId, MilestoneReviewToCreateContainer milestoneReviewToCreateContainer) throws ApiException {
        okhttp3.Call localVarCall = createReviewValidateBeforeCall(contractId, milestoneId, milestoneReviewToCreateContainer, null);
        Type localVarReturnType = new TypeToken<GenericResultCreated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createReviewAsync(String contractId, String milestoneId, MilestoneReviewToCreateContainer milestoneReviewToCreateContainer, final ApiCallback<GenericResultCreated> _callback) throws ApiException {

        okhttp3.Call localVarCall = createReviewValidateBeforeCall(contractId, milestoneId, milestoneReviewToCreateContainer, _callback);
        Type localVarReturnType = new TypeToken<GenericResultCreated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateReviewRequestBuilder {
        private final MilestoneReviewToCreate data;
        private final String contractId;
        private final String milestoneId;

        private CreateReviewRequestBuilder(MilestoneReviewToCreate data, String contractId, String milestoneId) {
            this.data = data;
            this.contractId = contractId;
            this.milestoneId = milestoneId;
        }

        /**
         * Build call for createReview
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MilestoneReviewToCreateContainer milestoneReviewToCreateContainer = buildBodyParams();
            return createReviewCall(contractId, milestoneId, milestoneReviewToCreateContainer, _callback);
        }

        private MilestoneReviewToCreateContainer buildBodyParams() {
            MilestoneReviewToCreateContainer milestoneReviewToCreateContainer = new MilestoneReviewToCreateContainer();
            milestoneReviewToCreateContainer.data(this.data);
            return milestoneReviewToCreateContainer;
        }

        /**
         * Execute createReview request
         * @return GenericResultCreated
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GenericResultCreated execute() throws ApiException {
            MilestoneReviewToCreateContainer milestoneReviewToCreateContainer = buildBodyParams();
            ApiResponse<GenericResultCreated> localVarResp = createReviewWithHttpInfo(contractId, milestoneId, milestoneReviewToCreateContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createReview request with HTTP info returned
         * @return ApiResponse&lt;GenericResultCreated&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GenericResultCreated> executeWithHttpInfo() throws ApiException {
            MilestoneReviewToCreateContainer milestoneReviewToCreateContainer = buildBodyParams();
            return createReviewWithHttpInfo(contractId, milestoneId, milestoneReviewToCreateContainer);
        }

        /**
         * Execute createReview request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GenericResultCreated> _callback) throws ApiException {
            MilestoneReviewToCreateContainer milestoneReviewToCreateContainer = buildBodyParams();
            return createReviewAsync(contractId, milestoneId, milestoneReviewToCreateContainer, _callback);
        }
    }

    /**
     * Review a single milestone
     * Review a milestone to approve or decline submitted work.
     * @param contractId Deel contract id. (required)
     * @param milestoneId ID of milestone to return (required)
     * @return CreateReviewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public CreateReviewRequestBuilder createReview(MilestoneReviewToCreate data, String contractId, String milestoneId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        if (milestoneId == null) throw new IllegalArgumentException("\"milestoneId\" is required but got null");
            

        return new CreateReviewRequestBuilder(data, contractId, milestoneId);
    }
    private okhttp3.Call deleteSingleMilestoneCall(String contractId, String milestoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/milestones/{milestone_id}"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()))
            .replace("{" + "milestone_id" + "}", localVarApiClient.escapeString(milestoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSingleMilestoneValidateBeforeCall(String contractId, String milestoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling deleteSingleMilestone(Async)");
        }

        // verify the required parameter 'milestoneId' is set
        if (milestoneId == null) {
            throw new ApiException("Missing the required parameter 'milestoneId' when calling deleteSingleMilestone(Async)");
        }

        return deleteSingleMilestoneCall(contractId, milestoneId, _callback);

    }


    private ApiResponse<GenericResultDeleted> deleteSingleMilestoneWithHttpInfo(String contractId, String milestoneId) throws ApiException {
        okhttp3.Call localVarCall = deleteSingleMilestoneValidateBeforeCall(contractId, milestoneId, null);
        Type localVarReturnType = new TypeToken<GenericResultDeleted>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteSingleMilestoneAsync(String contractId, String milestoneId, final ApiCallback<GenericResultDeleted> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSingleMilestoneValidateBeforeCall(contractId, milestoneId, _callback);
        Type localVarReturnType = new TypeToken<GenericResultDeleted>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteSingleMilestoneRequestBuilder {
        private final String contractId;
        private final String milestoneId;

        private DeleteSingleMilestoneRequestBuilder(String contractId, String milestoneId) {
            this.contractId = contractId;
            this.milestoneId = milestoneId;
        }

        /**
         * Build call for deleteSingleMilestone
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSingleMilestoneCall(contractId, milestoneId, _callback);
        }


        /**
         * Execute deleteSingleMilestone request
         * @return GenericResultDeleted
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GenericResultDeleted execute() throws ApiException {
            ApiResponse<GenericResultDeleted> localVarResp = deleteSingleMilestoneWithHttpInfo(contractId, milestoneId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteSingleMilestone request with HTTP info returned
         * @return ApiResponse&lt;GenericResultDeleted&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GenericResultDeleted> executeWithHttpInfo() throws ApiException {
            return deleteSingleMilestoneWithHttpInfo(contractId, milestoneId);
        }

        /**
         * Execute deleteSingleMilestone request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GenericResultDeleted> _callback) throws ApiException {
            return deleteSingleMilestoneAsync(contractId, milestoneId, _callback);
        }
    }

    /**
     * Delete a milestone
     * Delete a single milestone from a contract.
     * @param contractId Deel contract id. (required)
     * @param milestoneId ID of milestone to return (required)
     * @return DeleteSingleMilestoneRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSingleMilestoneRequestBuilder deleteSingleMilestone(String contractId, String milestoneId) throws IllegalArgumentException {
        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        if (milestoneId == null) throw new IllegalArgumentException("\"milestoneId\" is required but got null");
            

        return new DeleteSingleMilestoneRequestBuilder(contractId, milestoneId);
    }
    private okhttp3.Call getSingleMilestoneCall(String contractId, String milestoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/milestones/{milestone_id}"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()))
            .replace("{" + "milestone_id" + "}", localVarApiClient.escapeString(milestoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleMilestoneValidateBeforeCall(String contractId, String milestoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling getSingleMilestone(Async)");
        }

        // verify the required parameter 'milestoneId' is set
        if (milestoneId == null) {
            throw new ApiException("Missing the required parameter 'milestoneId' when calling getSingleMilestone(Async)");
        }

        return getSingleMilestoneCall(contractId, milestoneId, _callback);

    }


    private ApiResponse<MilestoneContainer> getSingleMilestoneWithHttpInfo(String contractId, String milestoneId) throws ApiException {
        okhttp3.Call localVarCall = getSingleMilestoneValidateBeforeCall(contractId, milestoneId, null);
        Type localVarReturnType = new TypeToken<MilestoneContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleMilestoneAsync(String contractId, String milestoneId, final ApiCallback<MilestoneContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleMilestoneValidateBeforeCall(contractId, milestoneId, _callback);
        Type localVarReturnType = new TypeToken<MilestoneContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleMilestoneRequestBuilder {
        private final String contractId;
        private final String milestoneId;

        private GetSingleMilestoneRequestBuilder(String contractId, String milestoneId) {
            this.contractId = contractId;
            this.milestoneId = milestoneId;
        }

        /**
         * Build call for getSingleMilestone
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleMilestoneCall(contractId, milestoneId, _callback);
        }


        /**
         * Execute getSingleMilestone request
         * @return MilestoneContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public MilestoneContainer execute() throws ApiException {
            ApiResponse<MilestoneContainer> localVarResp = getSingleMilestoneWithHttpInfo(contractId, milestoneId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleMilestone request with HTTP info returned
         * @return ApiResponse&lt;MilestoneContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MilestoneContainer> executeWithHttpInfo() throws ApiException {
            return getSingleMilestoneWithHttpInfo(contractId, milestoneId);
        }

        /**
         * Execute getSingleMilestone request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MilestoneContainer> _callback) throws ApiException {
            return getSingleMilestoneAsync(contractId, milestoneId, _callback);
        }
    }

    /**
     * Retrieve a single milestone
     * Retrieve a single milestone.
     * @param contractId Deel contract id. (required)
     * @param milestoneId ID of milestone to return (required)
     * @return GetSingleMilestoneRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleMilestoneRequestBuilder getSingleMilestone(String contractId, String milestoneId) throws IllegalArgumentException {
        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        if (milestoneId == null) throw new IllegalArgumentException("\"milestoneId\" is required but got null");
            

        return new GetSingleMilestoneRequestBuilder(contractId, milestoneId);
    }
    private okhttp3.Call listByContractCall(String contractId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/milestones"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listByContractValidateBeforeCall(String contractId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling listByContract(Async)");
        }

        return listByContractCall(contractId, _callback);

    }


    private ApiResponse<MilestoneListContainer> listByContractWithHttpInfo(String contractId) throws ApiException {
        okhttp3.Call localVarCall = listByContractValidateBeforeCall(contractId, null);
        Type localVarReturnType = new TypeToken<MilestoneListContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listByContractAsync(String contractId, final ApiCallback<MilestoneListContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = listByContractValidateBeforeCall(contractId, _callback);
        Type localVarReturnType = new TypeToken<MilestoneListContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListByContractRequestBuilder {
        private final String contractId;

        private ListByContractRequestBuilder(String contractId) {
            this.contractId = contractId;
        }

        /**
         * Build call for listByContract
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listByContractCall(contractId, _callback);
        }


        /**
         * Execute listByContract request
         * @return MilestoneListContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public MilestoneListContainer execute() throws ApiException {
            ApiResponse<MilestoneListContainer> localVarResp = listByContractWithHttpInfo(contractId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listByContract request with HTTP info returned
         * @return ApiResponse&lt;MilestoneListContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MilestoneListContainer> executeWithHttpInfo() throws ApiException {
            return listByContractWithHttpInfo(contractId);
        }

        /**
         * Execute listByContract request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MilestoneListContainer> _callback) throws ApiException {
            return listByContractAsync(contractId, _callback);
        }
    }

    /**
     * List of milestones by contract
     * Retrieve a list of milestones found for a contract.
     * @param contractId Deel contract id. (required)
     * @return ListByContractRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public ListByContractRequestBuilder listByContract(String contractId) throws IllegalArgumentException {
        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        return new ListByContractRequestBuilder(contractId);
    }
    private okhttp3.Call reviewMultipleCall(String contractId, MilestoneReviewsToCreateContainer milestoneReviewsToCreateContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = milestoneReviewsToCreateContainer;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/milestones/many/reviews"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reviewMultipleValidateBeforeCall(String contractId, MilestoneReviewsToCreateContainer milestoneReviewsToCreateContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling reviewMultiple(Async)");
        }

        return reviewMultipleCall(contractId, milestoneReviewsToCreateContainer, _callback);

    }


    private ApiResponse<GenericResultCreated> reviewMultipleWithHttpInfo(String contractId, MilestoneReviewsToCreateContainer milestoneReviewsToCreateContainer) throws ApiException {
        okhttp3.Call localVarCall = reviewMultipleValidateBeforeCall(contractId, milestoneReviewsToCreateContainer, null);
        Type localVarReturnType = new TypeToken<GenericResultCreated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call reviewMultipleAsync(String contractId, MilestoneReviewsToCreateContainer milestoneReviewsToCreateContainer, final ApiCallback<GenericResultCreated> _callback) throws ApiException {

        okhttp3.Call localVarCall = reviewMultipleValidateBeforeCall(contractId, milestoneReviewsToCreateContainer, _callback);
        Type localVarReturnType = new TypeToken<GenericResultCreated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ReviewMultipleRequestBuilder {
        private final MilestoneReviewsToCreate data;
        private final String contractId;

        private ReviewMultipleRequestBuilder(MilestoneReviewsToCreate data, String contractId) {
            this.data = data;
            this.contractId = contractId;
        }

        /**
         * Build call for reviewMultiple
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MilestoneReviewsToCreateContainer milestoneReviewsToCreateContainer = buildBodyParams();
            return reviewMultipleCall(contractId, milestoneReviewsToCreateContainer, _callback);
        }

        private MilestoneReviewsToCreateContainer buildBodyParams() {
            MilestoneReviewsToCreateContainer milestoneReviewsToCreateContainer = new MilestoneReviewsToCreateContainer();
            milestoneReviewsToCreateContainer.data(this.data);
            return milestoneReviewsToCreateContainer;
        }

        /**
         * Execute reviewMultiple request
         * @return GenericResultCreated
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GenericResultCreated execute() throws ApiException {
            MilestoneReviewsToCreateContainer milestoneReviewsToCreateContainer = buildBodyParams();
            ApiResponse<GenericResultCreated> localVarResp = reviewMultipleWithHttpInfo(contractId, milestoneReviewsToCreateContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute reviewMultiple request with HTTP info returned
         * @return ApiResponse&lt;GenericResultCreated&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GenericResultCreated> executeWithHttpInfo() throws ApiException {
            MilestoneReviewsToCreateContainer milestoneReviewsToCreateContainer = buildBodyParams();
            return reviewMultipleWithHttpInfo(contractId, milestoneReviewsToCreateContainer);
        }

        /**
         * Execute reviewMultiple request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GenericResultCreated> _callback) throws ApiException {
            MilestoneReviewsToCreateContainer milestoneReviewsToCreateContainer = buildBodyParams();
            return reviewMultipleAsync(contractId, milestoneReviewsToCreateContainer, _callback);
        }
    }

    /**
     * Review multiple milestones
     * Review a batch of milestones to approve or reject submitted work.
     * @param contractId Deel contract id. (required)
     * @return ReviewMultipleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public ReviewMultipleRequestBuilder reviewMultiple(MilestoneReviewsToCreate data, String contractId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        return new ReviewMultipleRequestBuilder(data, contractId);
    }
}
