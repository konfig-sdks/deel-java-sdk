/*
 * Deel REST API
 * API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateTimeoff;
import com.konfigthis.client.model.CreateTimeoffContainer;
import com.konfigthis.client.model.EorClientTimeoffsContainer;
import com.konfigthis.client.model.EorEntitlementsContainer;
import com.konfigthis.client.model.EorTimeoffsContainer;
import com.konfigthis.client.model.EorTimeoffsItemContainer;
import com.konfigthis.client.model.GenericResultDeleted;
import com.konfigthis.client.model.GenericResultUpdated;
import com.konfigthis.client.model.TimeoffReview;
import com.konfigthis.client.model.TimeoffToReviewContainer;
import com.konfigthis.client.model.TimeoffTypeListContainer;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TimeOffApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TimeOffApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TimeOffApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addRequestObsoleteCall(String contractId, CreateTimeoffContainer createTimeoffContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTimeoffContainer;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/time-offs"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addRequestObsoleteValidateBeforeCall(String contractId, CreateTimeoffContainer createTimeoffContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling addRequestObsolete(Async)");
        }

        return addRequestObsoleteCall(contractId, createTimeoffContainer, _callback);

    }


    private ApiResponse<EorTimeoffsItemContainer> addRequestObsoleteWithHttpInfo(String contractId, CreateTimeoffContainer createTimeoffContainer) throws ApiException {
        okhttp3.Call localVarCall = addRequestObsoleteValidateBeforeCall(contractId, createTimeoffContainer, null);
        Type localVarReturnType = new TypeToken<EorTimeoffsItemContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addRequestObsoleteAsync(String contractId, CreateTimeoffContainer createTimeoffContainer, final ApiCallback<EorTimeoffsItemContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = addRequestObsoleteValidateBeforeCall(contractId, createTimeoffContainer, _callback);
        Type localVarReturnType = new TypeToken<EorTimeoffsItemContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddRequestObsoleteRequestBuilder {
        private final CreateTimeoff data;
        private final String contractId;

        private AddRequestObsoleteRequestBuilder(CreateTimeoff data, String contractId) {
            this.data = data;
            this.contractId = contractId;
        }

        /**
         * Build call for addRequestObsolete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateTimeoffContainer createTimeoffContainer = buildBodyParams();
            return addRequestObsoleteCall(contractId, createTimeoffContainer, _callback);
        }

        private CreateTimeoffContainer buildBodyParams() {
            CreateTimeoffContainer createTimeoffContainer = new CreateTimeoffContainer();
            createTimeoffContainer.data(this.data);
            return createTimeoffContainer;
        }

        /**
         * Execute addRequestObsolete request
         * @return EorTimeoffsItemContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public EorTimeoffsItemContainer execute() throws ApiException {
            CreateTimeoffContainer createTimeoffContainer = buildBodyParams();
            ApiResponse<EorTimeoffsItemContainer> localVarResp = addRequestObsoleteWithHttpInfo(contractId, createTimeoffContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addRequestObsolete request with HTTP info returned
         * @return ApiResponse&lt;EorTimeoffsItemContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EorTimeoffsItemContainer> executeWithHttpInfo() throws ApiException {
            CreateTimeoffContainer createTimeoffContainer = buildBodyParams();
            return addRequestObsoleteWithHttpInfo(contractId, createTimeoffContainer);
        }

        /**
         * Execute addRequestObsolete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EorTimeoffsItemContainer> _callback) throws ApiException {
            CreateTimeoffContainer createTimeoffContainer = buildBodyParams();
            return addRequestObsoleteAsync(contractId, createTimeoffContainer, _callback);
        }
    }

    /**
     * Add a time off request (obsolete)
     * Add a time off request for a full-time employee.
     * @param contractId Deel contract id. (required)
     * @return AddRequestObsoleteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public AddRequestObsoleteRequestBuilder addRequestObsolete(CreateTimeoff data, String contractId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        return new AddRequestObsoleteRequestBuilder(data, contractId);
    }
    private okhttp3.Call cancelRequestObsoleteCall(String contractId, String timeoffId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/time-offs/{timeoff_id}"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()))
            .replace("{" + "timeoff_id" + "}", localVarApiClient.escapeString(timeoffId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelRequestObsoleteValidateBeforeCall(String contractId, String timeoffId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling cancelRequestObsolete(Async)");
        }

        // verify the required parameter 'timeoffId' is set
        if (timeoffId == null) {
            throw new ApiException("Missing the required parameter 'timeoffId' when calling cancelRequestObsolete(Async)");
        }

        return cancelRequestObsoleteCall(contractId, timeoffId, _callback);

    }


    private ApiResponse<GenericResultDeleted> cancelRequestObsoleteWithHttpInfo(String contractId, String timeoffId) throws ApiException {
        okhttp3.Call localVarCall = cancelRequestObsoleteValidateBeforeCall(contractId, timeoffId, null);
        Type localVarReturnType = new TypeToken<GenericResultDeleted>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call cancelRequestObsoleteAsync(String contractId, String timeoffId, final ApiCallback<GenericResultDeleted> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelRequestObsoleteValidateBeforeCall(contractId, timeoffId, _callback);
        Type localVarReturnType = new TypeToken<GenericResultDeleted>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CancelRequestObsoleteRequestBuilder {
        private final String contractId;
        private final String timeoffId;

        private CancelRequestObsoleteRequestBuilder(String contractId, String timeoffId) {
            this.contractId = contractId;
            this.timeoffId = timeoffId;
        }

        /**
         * Build call for cancelRequestObsolete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return cancelRequestObsoleteCall(contractId, timeoffId, _callback);
        }


        /**
         * Execute cancelRequestObsolete request
         * @return GenericResultDeleted
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GenericResultDeleted execute() throws ApiException {
            ApiResponse<GenericResultDeleted> localVarResp = cancelRequestObsoleteWithHttpInfo(contractId, timeoffId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute cancelRequestObsolete request with HTTP info returned
         * @return ApiResponse&lt;GenericResultDeleted&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GenericResultDeleted> executeWithHttpInfo() throws ApiException {
            return cancelRequestObsoleteWithHttpInfo(contractId, timeoffId);
        }

        /**
         * Execute cancelRequestObsolete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GenericResultDeleted> _callback) throws ApiException {
            return cancelRequestObsoleteAsync(contractId, timeoffId, _callback);
        }
    }

    /**
     * Cancel a time off request (obsolete)
     * Cancel a time off request for an employee.
     * @param contractId Deel contract id. (required)
     * @param timeoffId Time off Id (required)
     * @return CancelRequestObsoleteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public CancelRequestObsoleteRequestBuilder cancelRequestObsolete(String contractId, String timeoffId) throws IllegalArgumentException {
        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        if (timeoffId == null) throw new IllegalArgumentException("\"timeoffId\" is required but got null");
            

        return new CancelRequestObsoleteRequestBuilder(contractId, timeoffId);
    }
    private okhttp3.Call editRequestObsoleteCall(String contractId, String timeoffId, CreateTimeoffContainer createTimeoffContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTimeoffContainer;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/time-offs/{timeoff_id}"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()))
            .replace("{" + "timeoff_id" + "}", localVarApiClient.escapeString(timeoffId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editRequestObsoleteValidateBeforeCall(String contractId, String timeoffId, CreateTimeoffContainer createTimeoffContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling editRequestObsolete(Async)");
        }

        // verify the required parameter 'timeoffId' is set
        if (timeoffId == null) {
            throw new ApiException("Missing the required parameter 'timeoffId' when calling editRequestObsolete(Async)");
        }

        return editRequestObsoleteCall(contractId, timeoffId, createTimeoffContainer, _callback);

    }


    private ApiResponse<EorTimeoffsItemContainer> editRequestObsoleteWithHttpInfo(String contractId, String timeoffId, CreateTimeoffContainer createTimeoffContainer) throws ApiException {
        okhttp3.Call localVarCall = editRequestObsoleteValidateBeforeCall(contractId, timeoffId, createTimeoffContainer, null);
        Type localVarReturnType = new TypeToken<EorTimeoffsItemContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call editRequestObsoleteAsync(String contractId, String timeoffId, CreateTimeoffContainer createTimeoffContainer, final ApiCallback<EorTimeoffsItemContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = editRequestObsoleteValidateBeforeCall(contractId, timeoffId, createTimeoffContainer, _callback);
        Type localVarReturnType = new TypeToken<EorTimeoffsItemContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EditRequestObsoleteRequestBuilder {
        private final CreateTimeoff data;
        private final String contractId;
        private final String timeoffId;

        private EditRequestObsoleteRequestBuilder(CreateTimeoff data, String contractId, String timeoffId) {
            this.data = data;
            this.contractId = contractId;
            this.timeoffId = timeoffId;
        }

        /**
         * Build call for editRequestObsolete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateTimeoffContainer createTimeoffContainer = buildBodyParams();
            return editRequestObsoleteCall(contractId, timeoffId, createTimeoffContainer, _callback);
        }

        private CreateTimeoffContainer buildBodyParams() {
            CreateTimeoffContainer createTimeoffContainer = new CreateTimeoffContainer();
            createTimeoffContainer.data(this.data);
            return createTimeoffContainer;
        }

        /**
         * Execute editRequestObsolete request
         * @return EorTimeoffsItemContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public EorTimeoffsItemContainer execute() throws ApiException {
            CreateTimeoffContainer createTimeoffContainer = buildBodyParams();
            ApiResponse<EorTimeoffsItemContainer> localVarResp = editRequestObsoleteWithHttpInfo(contractId, timeoffId, createTimeoffContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute editRequestObsolete request with HTTP info returned
         * @return ApiResponse&lt;EorTimeoffsItemContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EorTimeoffsItemContainer> executeWithHttpInfo() throws ApiException {
            CreateTimeoffContainer createTimeoffContainer = buildBodyParams();
            return editRequestObsoleteWithHttpInfo(contractId, timeoffId, createTimeoffContainer);
        }

        /**
         * Execute editRequestObsolete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EorTimeoffsItemContainer> _callback) throws ApiException {
            CreateTimeoffContainer createTimeoffContainer = buildBodyParams();
            return editRequestObsoleteAsync(contractId, timeoffId, createTimeoffContainer, _callback);
        }
    }

    /**
     * Edit a time off request (obsolete)
     * Edit a time off request for a full-time employee.
     * @param contractId Deel contract id. (required)
     * @param timeoffId Time off Id (required)
     * @return EditRequestObsoleteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public EditRequestObsoleteRequestBuilder editRequestObsolete(CreateTimeoff data, String contractId, String timeoffId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        if (timeoffId == null) throw new IllegalArgumentException("\"timeoffId\" is required but got null");
            

        return new EditRequestObsoleteRequestBuilder(data, contractId, timeoffId);
    }
    private okhttp3.Call getAllObsoleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/time-offs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllObsoleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllObsoleteCall(_callback);

    }


    private ApiResponse<EorClientTimeoffsContainer> getAllObsoleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllObsoleteValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<EorClientTimeoffsContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllObsoleteAsync(final ApiCallback<EorClientTimeoffsContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllObsoleteValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<EorClientTimeoffsContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllObsoleteRequestBuilder {

        private GetAllObsoleteRequestBuilder() {
        }

        /**
         * Build call for getAllObsolete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllObsoleteCall(_callback);
        }


        /**
         * Execute getAllObsolete request
         * @return EorClientTimeoffsContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public EorClientTimeoffsContainer execute() throws ApiException {
            ApiResponse<EorClientTimeoffsContainer> localVarResp = getAllObsoleteWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllObsolete request with HTTP info returned
         * @return ApiResponse&lt;EorClientTimeoffsContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EorClientTimeoffsContainer> executeWithHttpInfo() throws ApiException {
            return getAllObsoleteWithHttpInfo();
        }

        /**
         * Execute getAllObsolete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EorClientTimeoffsContainer> _callback) throws ApiException {
            return getAllObsoleteAsync(_callback);
        }
    }

    /**
     * List of time offs (obsolete)
     * List of time offs for all employees in your organization.
     * @return GetAllObsoleteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetAllObsoleteRequestBuilder getAllObsolete() throws IllegalArgumentException {
        return new GetAllObsoleteRequestBuilder();
    }
    private okhttp3.Call getTimeOffTypesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lookups/time-off-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTimeOffTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getTimeOffTypesCall(_callback);

    }


    private ApiResponse<TimeoffTypeListContainer> getTimeOffTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getTimeOffTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<TimeoffTypeListContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTimeOffTypesAsync(final ApiCallback<TimeoffTypeListContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTimeOffTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<TimeoffTypeListContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTimeOffTypesRequestBuilder {

        private GetTimeOffTypesRequestBuilder() {
        }

        /**
         * Build call for getTimeOffTypes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTimeOffTypesCall(_callback);
        }


        /**
         * Execute getTimeOffTypes request
         * @return TimeoffTypeListContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public TimeoffTypeListContainer execute() throws ApiException {
            ApiResponse<TimeoffTypeListContainer> localVarResp = getTimeOffTypesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTimeOffTypes request with HTTP info returned
         * @return ApiResponse&lt;TimeoffTypeListContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeoffTypeListContainer> executeWithHttpInfo() throws ApiException {
            return getTimeOffTypesWithHttpInfo();
        }

        /**
         * Execute getTimeOffTypes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeoffTypeListContainer> _callback) throws ApiException {
            return getTimeOffTypesAsync(_callback);
        }
    }

    /**
     * Time-off types
     * Retrieve a list of pre-defined time off types to register in Deel platform.
     * @return GetTimeOffTypesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetTimeOffTypesRequestBuilder getTimeOffTypes() throws IllegalArgumentException {
        return new GetTimeOffTypesRequestBuilder();
    }
    private okhttp3.Call listByContractCall(String contractId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/time-offs"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listByContractValidateBeforeCall(String contractId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling listByContract(Async)");
        }

        return listByContractCall(contractId, _callback);

    }


    private ApiResponse<EorTimeoffsContainer> listByContractWithHttpInfo(String contractId) throws ApiException {
        okhttp3.Call localVarCall = listByContractValidateBeforeCall(contractId, null);
        Type localVarReturnType = new TypeToken<EorTimeoffsContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listByContractAsync(String contractId, final ApiCallback<EorTimeoffsContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = listByContractValidateBeforeCall(contractId, _callback);
        Type localVarReturnType = new TypeToken<EorTimeoffsContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListByContractRequestBuilder {
        private final String contractId;

        private ListByContractRequestBuilder(String contractId) {
            this.contractId = contractId;
        }

        /**
         * Build call for listByContract
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listByContractCall(contractId, _callback);
        }


        /**
         * Execute listByContract request
         * @return EorTimeoffsContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public EorTimeoffsContainer execute() throws ApiException {
            ApiResponse<EorTimeoffsContainer> localVarResp = listByContractWithHttpInfo(contractId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listByContract request with HTTP info returned
         * @return ApiResponse&lt;EorTimeoffsContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EorTimeoffsContainer> executeWithHttpInfo() throws ApiException {
            return listByContractWithHttpInfo(contractId);
        }

        /**
         * Execute listByContract request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EorTimeoffsContainer> _callback) throws ApiException {
            return listByContractAsync(contractId, _callback);
        }
    }

    /**
     * List time off by contract (obsolete)
     * Retrieve the list of time off requests by an employee.
     * @param contractId Deel contract id. (required)
     * @return ListByContractRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public ListByContractRequestBuilder listByContract(String contractId) throws IllegalArgumentException {
        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        return new ListByContractRequestBuilder(contractId);
    }
    private okhttp3.Call listEntitlementsCall(String contractId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/entitlements"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEntitlementsValidateBeforeCall(String contractId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling listEntitlements(Async)");
        }

        return listEntitlementsCall(contractId, _callback);

    }


    private ApiResponse<EorEntitlementsContainer> listEntitlementsWithHttpInfo(String contractId) throws ApiException {
        okhttp3.Call localVarCall = listEntitlementsValidateBeforeCall(contractId, null);
        Type localVarReturnType = new TypeToken<EorEntitlementsContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listEntitlementsAsync(String contractId, final ApiCallback<EorEntitlementsContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEntitlementsValidateBeforeCall(contractId, _callback);
        Type localVarReturnType = new TypeToken<EorEntitlementsContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListEntitlementsRequestBuilder {
        private final String contractId;

        private ListEntitlementsRequestBuilder(String contractId) {
            this.contractId = contractId;
        }

        /**
         * Build call for listEntitlements
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listEntitlementsCall(contractId, _callback);
        }


        /**
         * Execute listEntitlements request
         * @return EorEntitlementsContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public EorEntitlementsContainer execute() throws ApiException {
            ApiResponse<EorEntitlementsContainer> localVarResp = listEntitlementsWithHttpInfo(contractId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listEntitlements request with HTTP info returned
         * @return ApiResponse&lt;EorEntitlementsContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EorEntitlementsContainer> executeWithHttpInfo() throws ApiException {
            return listEntitlementsWithHttpInfo(contractId);
        }

        /**
         * Execute listEntitlements request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EorEntitlementsContainer> _callback) throws ApiException {
            return listEntitlementsAsync(contractId, _callback);
        }
    }

    /**
     * List time off entitlements (obsolete)
     * Retrieve a list of time off entitlements for a full-time employee.
     * @param contractId Deel contract id. (required)
     * @return ListEntitlementsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public ListEntitlementsRequestBuilder listEntitlements(String contractId) throws IllegalArgumentException {
        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        return new ListEntitlementsRequestBuilder(contractId);
    }
    private okhttp3.Call manageRequestCall(String timeoffId, TimeoffToReviewContainer timeoffToReviewContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeoffToReviewContainer;

        // create path and map variables
        String localVarPath = "/time-offs/{timeoff_id}/review"
            .replace("{" + "timeoff_id" + "}", localVarApiClient.escapeString(timeoffId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call manageRequestValidateBeforeCall(String timeoffId, TimeoffToReviewContainer timeoffToReviewContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timeoffId' is set
        if (timeoffId == null) {
            throw new ApiException("Missing the required parameter 'timeoffId' when calling manageRequest(Async)");
        }

        // verify the required parameter 'timeoffToReviewContainer' is set
        if (timeoffToReviewContainer == null) {
            throw new ApiException("Missing the required parameter 'timeoffToReviewContainer' when calling manageRequest(Async)");
        }

        return manageRequestCall(timeoffId, timeoffToReviewContainer, _callback);

    }


    private ApiResponse<GenericResultUpdated> manageRequestWithHttpInfo(String timeoffId, TimeoffToReviewContainer timeoffToReviewContainer) throws ApiException {
        okhttp3.Call localVarCall = manageRequestValidateBeforeCall(timeoffId, timeoffToReviewContainer, null);
        Type localVarReturnType = new TypeToken<GenericResultUpdated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call manageRequestAsync(String timeoffId, TimeoffToReviewContainer timeoffToReviewContainer, final ApiCallback<GenericResultUpdated> _callback) throws ApiException {

        okhttp3.Call localVarCall = manageRequestValidateBeforeCall(timeoffId, timeoffToReviewContainer, _callback);
        Type localVarReturnType = new TypeToken<GenericResultUpdated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ManageRequestRequestBuilder {
        private final TimeoffReview data;
        private final String timeoffId;

        private ManageRequestRequestBuilder(TimeoffReview data, String timeoffId) {
            this.data = data;
            this.timeoffId = timeoffId;
        }

        /**
         * Build call for manageRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeoffToReviewContainer timeoffToReviewContainer = buildBodyParams();
            return manageRequestCall(timeoffId, timeoffToReviewContainer, _callback);
        }

        private TimeoffToReviewContainer buildBodyParams() {
            TimeoffToReviewContainer timeoffToReviewContainer = new TimeoffToReviewContainer();
            timeoffToReviewContainer.data(this.data);
            return timeoffToReviewContainer;
        }

        /**
         * Execute manageRequest request
         * @return GenericResultUpdated
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GenericResultUpdated execute() throws ApiException {
            TimeoffToReviewContainer timeoffToReviewContainer = buildBodyParams();
            ApiResponse<GenericResultUpdated> localVarResp = manageRequestWithHttpInfo(timeoffId, timeoffToReviewContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute manageRequest request with HTTP info returned
         * @return ApiResponse&lt;GenericResultUpdated&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GenericResultUpdated> executeWithHttpInfo() throws ApiException {
            TimeoffToReviewContainer timeoffToReviewContainer = buildBodyParams();
            return manageRequestWithHttpInfo(timeoffId, timeoffToReviewContainer);
        }

        /**
         * Execute manageRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GenericResultUpdated> _callback) throws ApiException {
            TimeoffToReviewContainer timeoffToReviewContainer = buildBodyParams();
            return manageRequestAsync(timeoffId, timeoffToReviewContainer, _callback);
        }
    }

    /**
     * Review a time off request (obsolete)
     * Approve or decline an employee&#39;s time off request.
     * @param timeoffId Time off Id (required)
     * @param timeoffToReviewContainer Timeoff acceptance approve or decline. (required)
     * @return ManageRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public ManageRequestRequestBuilder manageRequest(TimeoffReview data, String timeoffId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (timeoffId == null) throw new IllegalArgumentException("\"timeoffId\" is required but got null");
            

        return new ManageRequestRequestBuilder(data, timeoffId);
    }
}
