/*
 * Deel REST API
 * API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ContractContainer;
import com.konfigthis.client.model.ContractContainerOngoingTimeBased;
import com.konfigthis.client.model.ContractContainerPayAsYouGoTimeBased;
import com.konfigthis.client.model.ContractContainerPaygMilestones;
import com.konfigthis.client.model.ContractContainerPaygTasks;
import com.konfigthis.client.model.ContractDetailsToAmend;
import com.konfigthis.client.model.ContractTerminationResultContainer;
import com.konfigthis.client.model.ContractToAmendDetailsContainer;
import com.konfigthis.client.model.ContractToCreateContainer;
import com.konfigthis.client.model.ContractToCreateContainerOngoingTimeBased;
import com.konfigthis.client.model.ContractToCreateContainerPayAsYouGoTimeBased;
import com.konfigthis.client.model.ContractToCreateContainerPaygMilestones;
import com.konfigthis.client.model.ContractToCreateContainerPaygTasks;
import com.konfigthis.client.model.ContractToCreateOngoingTimeBased;
import com.konfigthis.client.model.ContractToCreatePayAsYouGoTimeBased;
import com.konfigthis.client.model.ContractToCreatePaygMilestones;
import com.konfigthis.client.model.ContractToCreatePaygTasks;
import com.konfigthis.client.model.ContractToTerminate;
import com.konfigthis.client.model.ContractToTerminateContainer;
import com.konfigthis.client.model.GenericResultCreated;
import com.konfigthis.client.model.GenericResultDeleted;
import com.konfigthis.client.model.PremiumResultAddedContainer;
import com.konfigthis.client.model.PremiumToAdd;
import com.konfigthis.client.model.PremiumToAddContainer;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ContractorsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContractorsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ContractorsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call amendContractDetailsCall(String contractId, ContractToAmendDetailsContainer contractToAmendDetailsContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contractToAmendDetailsContainer;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/amendments"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call amendContractDetailsValidateBeforeCall(String contractId, ContractToAmendDetailsContainer contractToAmendDetailsContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling amendContractDetails(Async)");
        }

        // verify the required parameter 'contractToAmendDetailsContainer' is set
        if (contractToAmendDetailsContainer == null) {
            throw new ApiException("Missing the required parameter 'contractToAmendDetailsContainer' when calling amendContractDetails(Async)");
        }

        return amendContractDetailsCall(contractId, contractToAmendDetailsContainer, _callback);

    }


    private ApiResponse<GenericResultCreated> amendContractDetailsWithHttpInfo(String contractId, ContractToAmendDetailsContainer contractToAmendDetailsContainer) throws ApiException {
        okhttp3.Call localVarCall = amendContractDetailsValidateBeforeCall(contractId, contractToAmendDetailsContainer, null);
        Type localVarReturnType = new TypeToken<GenericResultCreated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call amendContractDetailsAsync(String contractId, ContractToAmendDetailsContainer contractToAmendDetailsContainer, final ApiCallback<GenericResultCreated> _callback) throws ApiException {

        okhttp3.Call localVarCall = amendContractDetailsValidateBeforeCall(contractId, contractToAmendDetailsContainer, _callback);
        Type localVarReturnType = new TypeToken<GenericResultCreated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AmendContractDetailsRequestBuilder {
        private final ContractDetailsToAmend data;
        private final String contractId;

        private AmendContractDetailsRequestBuilder(ContractDetailsToAmend data, String contractId) {
            this.data = data;
            this.contractId = contractId;
        }

        /**
         * Build call for amendContractDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ContractToAmendDetailsContainer contractToAmendDetailsContainer = buildBodyParams();
            return amendContractDetailsCall(contractId, contractToAmendDetailsContainer, _callback);
        }

        private ContractToAmendDetailsContainer buildBodyParams() {
            ContractToAmendDetailsContainer contractToAmendDetailsContainer = new ContractToAmendDetailsContainer();
            contractToAmendDetailsContainer.data(this.data);
            return contractToAmendDetailsContainer;
        }

        /**
         * Execute amendContractDetails request
         * @return GenericResultCreated
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GenericResultCreated execute() throws ApiException {
            ContractToAmendDetailsContainer contractToAmendDetailsContainer = buildBodyParams();
            ApiResponse<GenericResultCreated> localVarResp = amendContractDetailsWithHttpInfo(contractId, contractToAmendDetailsContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute amendContractDetails request with HTTP info returned
         * @return ApiResponse&lt;GenericResultCreated&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GenericResultCreated> executeWithHttpInfo() throws ApiException {
            ContractToAmendDetailsContainer contractToAmendDetailsContainer = buildBodyParams();
            return amendContractDetailsWithHttpInfo(contractId, contractToAmendDetailsContainer);
        }

        /**
         * Execute amendContractDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GenericResultCreated> _callback) throws ApiException {
            ContractToAmendDetailsContainer contractToAmendDetailsContainer = buildBodyParams();
            return amendContractDetailsAsync(contractId, contractToAmendDetailsContainer, _callback);
        }
    }

    /**
     * Amend contract
     * Amend the details of a contract. Please note that if the contract is already signed or active, then the update will have to be approved and re-signed for to take effect.
     * @param contractId Deel contract id. (required)
     * @param contractToAmendDetailsContainer Contract object that needs to be amended (required)
     * @return AmendContractDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public AmendContractDetailsRequestBuilder amendContractDetails(ContractDetailsToAmend data, String contractId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        return new AmendContractDetailsRequestBuilder(data, contractId);
    }
    private okhttp3.Call createNewDeelContractCall(ContractToCreateContainer contractToCreateContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contractToCreateContainer;

        // create path and map variables
        String localVarPath = "/contracts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewDeelContractValidateBeforeCall(ContractToCreateContainer contractToCreateContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractToCreateContainer' is set
        if (contractToCreateContainer == null) {
            throw new ApiException("Missing the required parameter 'contractToCreateContainer' when calling createNewDeelContract(Async)");
        }

        return createNewDeelContractCall(contractToCreateContainer, _callback);

    }


    private ApiResponse<ContractContainer> createNewDeelContractWithHttpInfo(ContractToCreateContainer contractToCreateContainer) throws ApiException {
        okhttp3.Call localVarCall = createNewDeelContractValidateBeforeCall(contractToCreateContainer, null);
        Type localVarReturnType = new TypeToken<ContractContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewDeelContractAsync(ContractToCreateContainer contractToCreateContainer, final ApiCallback<ContractContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewDeelContractValidateBeforeCall(contractToCreateContainer, _callback);
        Type localVarReturnType = new TypeToken<ContractContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewDeelContractRequestBuilder {
        private final Object data;

        private CreateNewDeelContractRequestBuilder(Object data) {
            this.data = data;
        }

        /**
         * Build call for createNewDeelContract
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ContractToCreateContainer contractToCreateContainer = buildBodyParams();
            return createNewDeelContractCall(contractToCreateContainer, _callback);
        }

        private ContractToCreateContainer buildBodyParams() {
            ContractToCreateContainer contractToCreateContainer = new ContractToCreateContainer();
            contractToCreateContainer.data(this.data);
            return contractToCreateContainer;
        }

        /**
         * Execute createNewDeelContract request
         * @return ContractContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ContractContainer execute() throws ApiException {
            ContractToCreateContainer contractToCreateContainer = buildBodyParams();
            ApiResponse<ContractContainer> localVarResp = createNewDeelContractWithHttpInfo(contractToCreateContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewDeelContract request with HTTP info returned
         * @return ApiResponse&lt;ContractContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContractContainer> executeWithHttpInfo() throws ApiException {
            ContractToCreateContainer contractToCreateContainer = buildBodyParams();
            return createNewDeelContractWithHttpInfo(contractToCreateContainer);
        }

        /**
         * Execute createNewDeelContract request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContractContainer> _callback) throws ApiException {
            ContractToCreateContainer contractToCreateContainer = buildBodyParams();
            return createNewDeelContractAsync(contractToCreateContainer, _callback);
        }
    }

    /**
     * Create a new contract
     * Create a new Deel contract.
     * @param contractToCreateContainer Contract object that needs to be created (required)
     * @return CreateNewDeelContractRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewDeelContractRequestBuilder createNewDeelContract(Object data) throws IllegalArgumentException {
        
        return new CreateNewDeelContractRequestBuilder(data);
    }
    private okhttp3.Call createNewFixedRateContractCall(ContractToCreateContainerOngoingTimeBased contractToCreateContainerOngoingTimeBased, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contractToCreateContainerOngoingTimeBased;

        // create path and map variables
        String localVarPath = "/contracts/fixed-rate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewFixedRateContractValidateBeforeCall(ContractToCreateContainerOngoingTimeBased contractToCreateContainerOngoingTimeBased, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractToCreateContainerOngoingTimeBased' is set
        if (contractToCreateContainerOngoingTimeBased == null) {
            throw new ApiException("Missing the required parameter 'contractToCreateContainerOngoingTimeBased' when calling createNewFixedRateContract(Async)");
        }

        return createNewFixedRateContractCall(contractToCreateContainerOngoingTimeBased, _callback);

    }


    private ApiResponse<ContractContainerOngoingTimeBased> createNewFixedRateContractWithHttpInfo(ContractToCreateContainerOngoingTimeBased contractToCreateContainerOngoingTimeBased) throws ApiException {
        okhttp3.Call localVarCall = createNewFixedRateContractValidateBeforeCall(contractToCreateContainerOngoingTimeBased, null);
        Type localVarReturnType = new TypeToken<ContractContainerOngoingTimeBased>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewFixedRateContractAsync(ContractToCreateContainerOngoingTimeBased contractToCreateContainerOngoingTimeBased, final ApiCallback<ContractContainerOngoingTimeBased> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewFixedRateContractValidateBeforeCall(contractToCreateContainerOngoingTimeBased, _callback);
        Type localVarReturnType = new TypeToken<ContractContainerOngoingTimeBased>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewFixedRateContractRequestBuilder {
        private final ContractToCreateOngoingTimeBased data;

        private CreateNewFixedRateContractRequestBuilder(ContractToCreateOngoingTimeBased data) {
            this.data = data;
        }

        /**
         * Build call for createNewFixedRateContract
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ContractToCreateContainerOngoingTimeBased contractToCreateContainerOngoingTimeBased = buildBodyParams();
            return createNewFixedRateContractCall(contractToCreateContainerOngoingTimeBased, _callback);
        }

        private ContractToCreateContainerOngoingTimeBased buildBodyParams() {
            ContractToCreateContainerOngoingTimeBased contractToCreateContainerOngoingTimeBased = new ContractToCreateContainerOngoingTimeBased();
            contractToCreateContainerOngoingTimeBased.data(this.data);
            return contractToCreateContainerOngoingTimeBased;
        }

        /**
         * Execute createNewFixedRateContract request
         * @return ContractContainerOngoingTimeBased
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ContractContainerOngoingTimeBased execute() throws ApiException {
            ContractToCreateContainerOngoingTimeBased contractToCreateContainerOngoingTimeBased = buildBodyParams();
            ApiResponse<ContractContainerOngoingTimeBased> localVarResp = createNewFixedRateContractWithHttpInfo(contractToCreateContainerOngoingTimeBased);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewFixedRateContract request with HTTP info returned
         * @return ApiResponse&lt;ContractContainerOngoingTimeBased&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContractContainerOngoingTimeBased> executeWithHttpInfo() throws ApiException {
            ContractToCreateContainerOngoingTimeBased contractToCreateContainerOngoingTimeBased = buildBodyParams();
            return createNewFixedRateContractWithHttpInfo(contractToCreateContainerOngoingTimeBased);
        }

        /**
         * Execute createNewFixedRateContract request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContractContainerOngoingTimeBased> _callback) throws ApiException {
            ContractToCreateContainerOngoingTimeBased contractToCreateContainerOngoingTimeBased = buildBodyParams();
            return createNewFixedRateContractAsync(contractToCreateContainerOngoingTimeBased, _callback);
        }
    }

    /**
     * Create a new contract (fixed-rate)
     * 
     * @param contractToCreateContainerOngoingTimeBased Contract object that needs to be created (required)
     * @return CreateNewFixedRateContractRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewFixedRateContractRequestBuilder createNewFixedRateContract(ContractToCreateOngoingTimeBased data) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        return new CreateNewFixedRateContractRequestBuilder(data);
    }
    private okhttp3.Call createNewMilestoneContractCall(ContractToCreateContainerPaygMilestones contractToCreateContainerPaygMilestones, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contractToCreateContainerPaygMilestones;

        // create path and map variables
        String localVarPath = "/contracts/milestone-based";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewMilestoneContractValidateBeforeCall(ContractToCreateContainerPaygMilestones contractToCreateContainerPaygMilestones, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractToCreateContainerPaygMilestones' is set
        if (contractToCreateContainerPaygMilestones == null) {
            throw new ApiException("Missing the required parameter 'contractToCreateContainerPaygMilestones' when calling createNewMilestoneContract(Async)");
        }

        return createNewMilestoneContractCall(contractToCreateContainerPaygMilestones, _callback);

    }


    private ApiResponse<ContractContainerPaygMilestones> createNewMilestoneContractWithHttpInfo(ContractToCreateContainerPaygMilestones contractToCreateContainerPaygMilestones) throws ApiException {
        okhttp3.Call localVarCall = createNewMilestoneContractValidateBeforeCall(contractToCreateContainerPaygMilestones, null);
        Type localVarReturnType = new TypeToken<ContractContainerPaygMilestones>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewMilestoneContractAsync(ContractToCreateContainerPaygMilestones contractToCreateContainerPaygMilestones, final ApiCallback<ContractContainerPaygMilestones> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewMilestoneContractValidateBeforeCall(contractToCreateContainerPaygMilestones, _callback);
        Type localVarReturnType = new TypeToken<ContractContainerPaygMilestones>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewMilestoneContractRequestBuilder {
        private final ContractToCreatePaygMilestones data;

        private CreateNewMilestoneContractRequestBuilder(ContractToCreatePaygMilestones data) {
            this.data = data;
        }

        /**
         * Build call for createNewMilestoneContract
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ContractToCreateContainerPaygMilestones contractToCreateContainerPaygMilestones = buildBodyParams();
            return createNewMilestoneContractCall(contractToCreateContainerPaygMilestones, _callback);
        }

        private ContractToCreateContainerPaygMilestones buildBodyParams() {
            ContractToCreateContainerPaygMilestones contractToCreateContainerPaygMilestones = new ContractToCreateContainerPaygMilestones();
            contractToCreateContainerPaygMilestones.data(this.data);
            return contractToCreateContainerPaygMilestones;
        }

        /**
         * Execute createNewMilestoneContract request
         * @return ContractContainerPaygMilestones
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ContractContainerPaygMilestones execute() throws ApiException {
            ContractToCreateContainerPaygMilestones contractToCreateContainerPaygMilestones = buildBodyParams();
            ApiResponse<ContractContainerPaygMilestones> localVarResp = createNewMilestoneContractWithHttpInfo(contractToCreateContainerPaygMilestones);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewMilestoneContract request with HTTP info returned
         * @return ApiResponse&lt;ContractContainerPaygMilestones&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContractContainerPaygMilestones> executeWithHttpInfo() throws ApiException {
            ContractToCreateContainerPaygMilestones contractToCreateContainerPaygMilestones = buildBodyParams();
            return createNewMilestoneContractWithHttpInfo(contractToCreateContainerPaygMilestones);
        }

        /**
         * Execute createNewMilestoneContract request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContractContainerPaygMilestones> _callback) throws ApiException {
            ContractToCreateContainerPaygMilestones contractToCreateContainerPaygMilestones = buildBodyParams();
            return createNewMilestoneContractAsync(contractToCreateContainerPaygMilestones, _callback);
        }
    }

    /**
     * Create a new contract (milestone-based)
     * 
     * @param contractToCreateContainerPaygMilestones Contract object that needs to be created (required)
     * @return CreateNewMilestoneContractRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewMilestoneContractRequestBuilder createNewMilestoneContract(ContractToCreatePaygMilestones data) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        return new CreateNewMilestoneContractRequestBuilder(data);
    }
    private okhttp3.Call createNewTaskBasedContractCall(ContractToCreateContainerPaygTasks contractToCreateContainerPaygTasks, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contractToCreateContainerPaygTasks;

        // create path and map variables
        String localVarPath = "/contracts/task-based";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewTaskBasedContractValidateBeforeCall(ContractToCreateContainerPaygTasks contractToCreateContainerPaygTasks, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractToCreateContainerPaygTasks' is set
        if (contractToCreateContainerPaygTasks == null) {
            throw new ApiException("Missing the required parameter 'contractToCreateContainerPaygTasks' when calling createNewTaskBasedContract(Async)");
        }

        return createNewTaskBasedContractCall(contractToCreateContainerPaygTasks, _callback);

    }


    private ApiResponse<ContractContainerPaygTasks> createNewTaskBasedContractWithHttpInfo(ContractToCreateContainerPaygTasks contractToCreateContainerPaygTasks) throws ApiException {
        okhttp3.Call localVarCall = createNewTaskBasedContractValidateBeforeCall(contractToCreateContainerPaygTasks, null);
        Type localVarReturnType = new TypeToken<ContractContainerPaygTasks>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewTaskBasedContractAsync(ContractToCreateContainerPaygTasks contractToCreateContainerPaygTasks, final ApiCallback<ContractContainerPaygTasks> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewTaskBasedContractValidateBeforeCall(contractToCreateContainerPaygTasks, _callback);
        Type localVarReturnType = new TypeToken<ContractContainerPaygTasks>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewTaskBasedContractRequestBuilder {
        private final ContractToCreatePaygTasks data;

        private CreateNewTaskBasedContractRequestBuilder(ContractToCreatePaygTasks data) {
            this.data = data;
        }

        /**
         * Build call for createNewTaskBasedContract
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ContractToCreateContainerPaygTasks contractToCreateContainerPaygTasks = buildBodyParams();
            return createNewTaskBasedContractCall(contractToCreateContainerPaygTasks, _callback);
        }

        private ContractToCreateContainerPaygTasks buildBodyParams() {
            ContractToCreateContainerPaygTasks contractToCreateContainerPaygTasks = new ContractToCreateContainerPaygTasks();
            contractToCreateContainerPaygTasks.data(this.data);
            return contractToCreateContainerPaygTasks;
        }

        /**
         * Execute createNewTaskBasedContract request
         * @return ContractContainerPaygTasks
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ContractContainerPaygTasks execute() throws ApiException {
            ContractToCreateContainerPaygTasks contractToCreateContainerPaygTasks = buildBodyParams();
            ApiResponse<ContractContainerPaygTasks> localVarResp = createNewTaskBasedContractWithHttpInfo(contractToCreateContainerPaygTasks);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewTaskBasedContract request with HTTP info returned
         * @return ApiResponse&lt;ContractContainerPaygTasks&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContractContainerPaygTasks> executeWithHttpInfo() throws ApiException {
            ContractToCreateContainerPaygTasks contractToCreateContainerPaygTasks = buildBodyParams();
            return createNewTaskBasedContractWithHttpInfo(contractToCreateContainerPaygTasks);
        }

        /**
         * Execute createNewTaskBasedContract request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContractContainerPaygTasks> _callback) throws ApiException {
            ContractToCreateContainerPaygTasks contractToCreateContainerPaygTasks = buildBodyParams();
            return createNewTaskBasedContractAsync(contractToCreateContainerPaygTasks, _callback);
        }
    }

    /**
     * Create a new contract (task-based)
     * 
     * @param contractToCreateContainerPaygTasks Contract object that needs to be created (required)
     * @return CreateNewTaskBasedContractRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewTaskBasedContractRequestBuilder createNewTaskBasedContract(ContractToCreatePaygTasks data) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        return new CreateNewTaskBasedContractRequestBuilder(data);
    }
    private okhttp3.Call createNewTimeBasedContractCall(ContractToCreateContainerPayAsYouGoTimeBased contractToCreateContainerPayAsYouGoTimeBased, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contractToCreateContainerPayAsYouGoTimeBased;

        // create path and map variables
        String localVarPath = "/contracts/time-based";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewTimeBasedContractValidateBeforeCall(ContractToCreateContainerPayAsYouGoTimeBased contractToCreateContainerPayAsYouGoTimeBased, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractToCreateContainerPayAsYouGoTimeBased' is set
        if (contractToCreateContainerPayAsYouGoTimeBased == null) {
            throw new ApiException("Missing the required parameter 'contractToCreateContainerPayAsYouGoTimeBased' when calling createNewTimeBasedContract(Async)");
        }

        return createNewTimeBasedContractCall(contractToCreateContainerPayAsYouGoTimeBased, _callback);

    }


    private ApiResponse<ContractContainerPayAsYouGoTimeBased> createNewTimeBasedContractWithHttpInfo(ContractToCreateContainerPayAsYouGoTimeBased contractToCreateContainerPayAsYouGoTimeBased) throws ApiException {
        okhttp3.Call localVarCall = createNewTimeBasedContractValidateBeforeCall(contractToCreateContainerPayAsYouGoTimeBased, null);
        Type localVarReturnType = new TypeToken<ContractContainerPayAsYouGoTimeBased>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewTimeBasedContractAsync(ContractToCreateContainerPayAsYouGoTimeBased contractToCreateContainerPayAsYouGoTimeBased, final ApiCallback<ContractContainerPayAsYouGoTimeBased> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewTimeBasedContractValidateBeforeCall(contractToCreateContainerPayAsYouGoTimeBased, _callback);
        Type localVarReturnType = new TypeToken<ContractContainerPayAsYouGoTimeBased>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewTimeBasedContractRequestBuilder {
        private final ContractToCreatePayAsYouGoTimeBased data;

        private CreateNewTimeBasedContractRequestBuilder(ContractToCreatePayAsYouGoTimeBased data) {
            this.data = data;
        }

        /**
         * Build call for createNewTimeBasedContract
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ContractToCreateContainerPayAsYouGoTimeBased contractToCreateContainerPayAsYouGoTimeBased = buildBodyParams();
            return createNewTimeBasedContractCall(contractToCreateContainerPayAsYouGoTimeBased, _callback);
        }

        private ContractToCreateContainerPayAsYouGoTimeBased buildBodyParams() {
            ContractToCreateContainerPayAsYouGoTimeBased contractToCreateContainerPayAsYouGoTimeBased = new ContractToCreateContainerPayAsYouGoTimeBased();
            contractToCreateContainerPayAsYouGoTimeBased.data(this.data);
            return contractToCreateContainerPayAsYouGoTimeBased;
        }

        /**
         * Execute createNewTimeBasedContract request
         * @return ContractContainerPayAsYouGoTimeBased
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ContractContainerPayAsYouGoTimeBased execute() throws ApiException {
            ContractToCreateContainerPayAsYouGoTimeBased contractToCreateContainerPayAsYouGoTimeBased = buildBodyParams();
            ApiResponse<ContractContainerPayAsYouGoTimeBased> localVarResp = createNewTimeBasedContractWithHttpInfo(contractToCreateContainerPayAsYouGoTimeBased);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewTimeBasedContract request with HTTP info returned
         * @return ApiResponse&lt;ContractContainerPayAsYouGoTimeBased&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContractContainerPayAsYouGoTimeBased> executeWithHttpInfo() throws ApiException {
            ContractToCreateContainerPayAsYouGoTimeBased contractToCreateContainerPayAsYouGoTimeBased = buildBodyParams();
            return createNewTimeBasedContractWithHttpInfo(contractToCreateContainerPayAsYouGoTimeBased);
        }

        /**
         * Execute createNewTimeBasedContract request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContractContainerPayAsYouGoTimeBased> _callback) throws ApiException {
            ContractToCreateContainerPayAsYouGoTimeBased contractToCreateContainerPayAsYouGoTimeBased = buildBodyParams();
            return createNewTimeBasedContractAsync(contractToCreateContainerPayAsYouGoTimeBased, _callback);
        }
    }

    /**
     * Create a new contract (time-based)
     * 
     * @param contractToCreateContainerPayAsYouGoTimeBased Contract object that needs to be created (required)
     * @return CreateNewTimeBasedContractRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewTimeBasedContractRequestBuilder createNewTimeBasedContract(ContractToCreatePayAsYouGoTimeBased data) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        return new CreateNewTimeBasedContractRequestBuilder(data);
    }
    private okhttp3.Call getContractPreviewCall(String contractId, String templateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/preview"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (templateId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateId", templateId));
        }

        final String[] localVarAccepts = {
            "text/html",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContractPreviewValidateBeforeCall(String contractId, String templateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling getContractPreview(Async)");
        }

        return getContractPreviewCall(contractId, templateId, _callback);

    }


    private ApiResponse<String> getContractPreviewWithHttpInfo(String contractId, String templateId) throws ApiException {
        okhttp3.Call localVarCall = getContractPreviewValidateBeforeCall(contractId, templateId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getContractPreviewAsync(String contractId, String templateId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContractPreviewValidateBeforeCall(contractId, templateId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetContractPreviewRequestBuilder {
        private final String contractId;
        private String templateId;

        private GetContractPreviewRequestBuilder(String contractId) {
            this.contractId = contractId;
        }

        /**
         * Set templateId
         * @param templateId ID of an existing contract template. (optional)
         * @return GetContractPreviewRequestBuilder
         */
        public GetContractPreviewRequestBuilder templateId(String templateId) {
            this.templateId = templateId;
            return this;
        }
        
        /**
         * Build call for getContractPreview
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getContractPreviewCall(contractId, templateId, _callback);
        }


        /**
         * Execute getContractPreview request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getContractPreviewWithHttpInfo(contractId, templateId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getContractPreview request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getContractPreviewWithHttpInfo(contractId, templateId);
        }

        /**
         * Execute getContractPreview request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getContractPreviewAsync(contractId, templateId, _callback);
        }
    }

    /**
     * Preview a contract agreement
     * Retrieve an IC and EOR contract agreement content in HTML. If no template is specified, the default or currently assigned template will be used. This endpoint does not support Global Payroll contract type.
     * @param contractId Deel contract id. (required)
     * @return GetContractPreviewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetContractPreviewRequestBuilder getContractPreview(String contractId) throws IllegalArgumentException {
        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        return new GetContractPreviewRequestBuilder(contractId);
    }
    private okhttp3.Call removePremiumCall(String contractId, String reason, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/premium"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reason", reason));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removePremiumValidateBeforeCall(String contractId, String reason, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling removePremium(Async)");
        }

        return removePremiumCall(contractId, reason, _callback);

    }


    private ApiResponse<GenericResultDeleted> removePremiumWithHttpInfo(String contractId, String reason) throws ApiException {
        okhttp3.Call localVarCall = removePremiumValidateBeforeCall(contractId, reason, null);
        Type localVarReturnType = new TypeToken<GenericResultDeleted>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removePremiumAsync(String contractId, String reason, final ApiCallback<GenericResultDeleted> _callback) throws ApiException {

        okhttp3.Call localVarCall = removePremiumValidateBeforeCall(contractId, reason, _callback);
        Type localVarReturnType = new TypeToken<GenericResultDeleted>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemovePremiumRequestBuilder {
        private final String contractId;
        private String reason;

        private RemovePremiumRequestBuilder(String contractId) {
            this.contractId = contractId;
        }

        /**
         * Set reason
         * @param reason Reason for deleting an existing Deel Premium from a contract. (optional)
         * @return RemovePremiumRequestBuilder
         */
        public RemovePremiumRequestBuilder reason(String reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Build call for removePremium
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removePremiumCall(contractId, reason, _callback);
        }


        /**
         * Execute removePremium request
         * @return GenericResultDeleted
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GenericResultDeleted execute() throws ApiException {
            ApiResponse<GenericResultDeleted> localVarResp = removePremiumWithHttpInfo(contractId, reason);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removePremium request with HTTP info returned
         * @return ApiResponse&lt;GenericResultDeleted&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GenericResultDeleted> executeWithHttpInfo() throws ApiException {
            return removePremiumWithHttpInfo(contractId, reason);
        }

        /**
         * Execute removePremium request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GenericResultDeleted> _callback) throws ApiException {
            return removePremiumAsync(contractId, reason, _callback);
        }
    }

    /**
     * Downgrade from Premium
     * Remove Deel Premium from an existing contract.
     * @param contractId Deel contract id. (required)
     * @return RemovePremiumRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public RemovePremiumRequestBuilder removePremium(String contractId) throws IllegalArgumentException {
        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        return new RemovePremiumRequestBuilder(contractId);
    }
    private okhttp3.Call terminateContractCall(String contractId, ContractToTerminateContainer contractToTerminateContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contractToTerminateContainer;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/terminations"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call terminateContractValidateBeforeCall(String contractId, ContractToTerminateContainer contractToTerminateContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling terminateContract(Async)");
        }

        // verify the required parameter 'contractToTerminateContainer' is set
        if (contractToTerminateContainer == null) {
            throw new ApiException("Missing the required parameter 'contractToTerminateContainer' when calling terminateContract(Async)");
        }

        return terminateContractCall(contractId, contractToTerminateContainer, _callback);

    }


    private ApiResponse<ContractTerminationResultContainer> terminateContractWithHttpInfo(String contractId, ContractToTerminateContainer contractToTerminateContainer) throws ApiException {
        okhttp3.Call localVarCall = terminateContractValidateBeforeCall(contractId, contractToTerminateContainer, null);
        Type localVarReturnType = new TypeToken<ContractTerminationResultContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call terminateContractAsync(String contractId, ContractToTerminateContainer contractToTerminateContainer, final ApiCallback<ContractTerminationResultContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = terminateContractValidateBeforeCall(contractId, contractToTerminateContainer, _callback);
        Type localVarReturnType = new TypeToken<ContractTerminationResultContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TerminateContractRequestBuilder {
        private final ContractToTerminate data;
        private final String contractId;

        private TerminateContractRequestBuilder(ContractToTerminate data, String contractId) {
            this.data = data;
            this.contractId = contractId;
        }

        /**
         * Build call for terminateContract
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ContractToTerminateContainer contractToTerminateContainer = buildBodyParams();
            return terminateContractCall(contractId, contractToTerminateContainer, _callback);
        }

        private ContractToTerminateContainer buildBodyParams() {
            ContractToTerminateContainer contractToTerminateContainer = new ContractToTerminateContainer();
            contractToTerminateContainer.data(this.data);
            return contractToTerminateContainer;
        }

        /**
         * Execute terminateContract request
         * @return ContractTerminationResultContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ContractTerminationResultContainer execute() throws ApiException {
            ContractToTerminateContainer contractToTerminateContainer = buildBodyParams();
            ApiResponse<ContractTerminationResultContainer> localVarResp = terminateContractWithHttpInfo(contractId, contractToTerminateContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute terminateContract request with HTTP info returned
         * @return ApiResponse&lt;ContractTerminationResultContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContractTerminationResultContainer> executeWithHttpInfo() throws ApiException {
            ContractToTerminateContainer contractToTerminateContainer = buildBodyParams();
            return terminateContractWithHttpInfo(contractId, contractToTerminateContainer);
        }

        /**
         * Execute terminateContract request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContractTerminationResultContainer> _callback) throws ApiException {
            ContractToTerminateContainer contractToTerminateContainer = buildBodyParams();
            return terminateContractAsync(contractId, contractToTerminateContainer, _callback);
        }
    }

    /**
     * Terminate contract
     * Terminate an active contract.
     * @param contractId Deel contract id. (required)
     * @param contractToTerminateContainer Contract that needs to be terminated and when. (required)
     * @return TerminateContractRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public TerminateContractRequestBuilder terminateContract(ContractToTerminate data, String contractId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        return new TerminateContractRequestBuilder(data, contractId);
    }
    private okhttp3.Call upgradeToPremiumCall(String contractId, PremiumToAddContainer premiumToAddContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = premiumToAddContainer;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/premium"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upgradeToPremiumValidateBeforeCall(String contractId, PremiumToAddContainer premiumToAddContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling upgradeToPremium(Async)");
        }

        return upgradeToPremiumCall(contractId, premiumToAddContainer, _callback);

    }


    private ApiResponse<PremiumResultAddedContainer> upgradeToPremiumWithHttpInfo(String contractId, PremiumToAddContainer premiumToAddContainer) throws ApiException {
        okhttp3.Call localVarCall = upgradeToPremiumValidateBeforeCall(contractId, premiumToAddContainer, null);
        Type localVarReturnType = new TypeToken<PremiumResultAddedContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call upgradeToPremiumAsync(String contractId, PremiumToAddContainer premiumToAddContainer, final ApiCallback<PremiumResultAddedContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = upgradeToPremiumValidateBeforeCall(contractId, premiumToAddContainer, _callback);
        Type localVarReturnType = new TypeToken<PremiumResultAddedContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpgradeToPremiumRequestBuilder {
        private final PremiumToAdd data;
        private final String contractId;

        private UpgradeToPremiumRequestBuilder(PremiumToAdd data, String contractId) {
            this.data = data;
            this.contractId = contractId;
        }

        /**
         * Build call for upgradeToPremium
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PremiumToAddContainer premiumToAddContainer = buildBodyParams();
            return upgradeToPremiumCall(contractId, premiumToAddContainer, _callback);
        }

        private PremiumToAddContainer buildBodyParams() {
            PremiumToAddContainer premiumToAddContainer = new PremiumToAddContainer();
            premiumToAddContainer.data(this.data);
            return premiumToAddContainer;
        }

        /**
         * Execute upgradeToPremium request
         * @return PremiumResultAddedContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public PremiumResultAddedContainer execute() throws ApiException {
            PremiumToAddContainer premiumToAddContainer = buildBodyParams();
            ApiResponse<PremiumResultAddedContainer> localVarResp = upgradeToPremiumWithHttpInfo(contractId, premiumToAddContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute upgradeToPremium request with HTTP info returned
         * @return ApiResponse&lt;PremiumResultAddedContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PremiumResultAddedContainer> executeWithHttpInfo() throws ApiException {
            PremiumToAddContainer premiumToAddContainer = buildBodyParams();
            return upgradeToPremiumWithHttpInfo(contractId, premiumToAddContainer);
        }

        /**
         * Execute upgradeToPremium request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PremiumResultAddedContainer> _callback) throws ApiException {
            PremiumToAddContainer premiumToAddContainer = buildBodyParams();
            return upgradeToPremiumAsync(contractId, premiumToAddContainer, _callback);
        }
    }

    /**
     * Upgrade to Premium
     * Add additional protection against misclassification by upgrading to Deel Premium.
     * @param contractId Deel contract id. (required)
     * @return UpgradeToPremiumRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public UpgradeToPremiumRequestBuilder upgradeToPremium(PremiumToAdd data, String contractId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        return new UpgradeToPremiumRequestBuilder(data, contractId);
    }
}
