/*
 * Deel REST API
 * API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateClientUser;
import com.konfigthis.client.model.CreateClientUserName;
import com.konfigthis.client.model.Email;
import com.konfigthis.client.model.EnterpriseUser;
import com.konfigthis.client.model.Name;
import com.konfigthis.client.model.PatchOperation;
import com.konfigthis.client.model.SearchRequest;
import com.konfigthis.client.model.User;
import com.konfigthis.client.model.UserExtension;
import com.konfigthis.client.model.UserMeta;
import com.konfigthis.client.model.UserPatch;
import com.konfigthis.client.model.UserResponse;
import com.konfigthis.client.model.UserSearchResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UserApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UserApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createUserCall(CreateClientUser body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/Users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/scim+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/scim+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUserValidateBeforeCall(CreateClientUser body, final ApiCallback _callback) throws ApiException {
        return createUserCall(body, _callback);

    }


    private ApiResponse<UserResponse> createUserWithHttpInfo(CreateClientUser body) throws ApiException {
        okhttp3.Call localVarCall = createUserValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<UserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createUserAsync(CreateClientUser body, final ApiCallback<UserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUserValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<UserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateUserRequestBuilder {
        private final List<String> schemas;
        private final String userName;
        private final CreateClientUserName name;
        private final String userType;

        private CreateUserRequestBuilder(List<String> schemas, String userName, CreateClientUserName name, String userType) {
            this.schemas = schemas;
            this.userName = userName;
            this.name = name;
            this.userType = userType;
        }

        /**
         * Build call for createUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successfully created user </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateClientUser body = buildBodyParams();
            return createUserCall(body, _callback);
        }

        private CreateClientUser buildBodyParams() {
            CreateClientUser body = new CreateClientUser();
            if (this.schemas != null)
            body.schemas(CreateClientUser.SchemasEnum.fromValue(this.schemas));
            body.userName(this.userName);
            body.name(this.name);
            if (this.userType != null)
            body.userType(CreateClientUser.UserTypeEnum.fromValue(this.userType));
            return body;
        }

        /**
         * Execute createUser request
         * @return UserResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successfully created user </td><td>  -  </td></tr>
         </table>
         */
        public UserResponse execute() throws ApiException {
            CreateClientUser body = buildBodyParams();
            ApiResponse<UserResponse> localVarResp = createUserWithHttpInfo(body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createUser request with HTTP info returned
         * @return ApiResponse&lt;UserResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successfully created user </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserResponse> executeWithHttpInfo() throws ApiException {
            CreateClientUser body = buildBodyParams();
            return createUserWithHttpInfo(body);
        }

        /**
         * Execute createUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successfully created user </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserResponse> _callback) throws ApiException {
            CreateClientUser body = buildBodyParams();
            return createUserAsync(body, _callback);
        }
    }

    /**
     * Create a user
     * 
     * @return CreateUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successfully created user </td><td>  -  </td></tr>
     </table>
     */
    public CreateUserRequestBuilder createUser(List<String> schemas, String userName, CreateClientUserName name, String userType) throws IllegalArgumentException {
        if (schemas == null) throw new IllegalArgumentException("\"schemas\" is required but got null");
        if (userName == null) throw new IllegalArgumentException("\"userName\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
        if (userType == null) throw new IllegalArgumentException("\"userType\" is required but got null");
            

        return new CreateUserRequestBuilder(schemas, userName, name, userType);
    }
    private okhttp3.Call deleteUserCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Users/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/scim+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteUser(Async)");
        }

        return deleteUserCall(id, _callback);

    }


    private ApiResponse<Object> deleteUserWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteUserAsync(String id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteUserRequestBuilder {
        private final String id;

        private DeleteUserRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for deleteUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteUserCall(id, _callback);
        }


        /**
         * Execute deleteUser request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = deleteUserWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteUser request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return deleteUserWithHttpInfo(id);
        }

        /**
         * Execute deleteUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return deleteUserAsync(id, _callback);
        }
    }

    /**
     * Delete a user
     * 
     * @param id user id (required)
     * @return DeleteUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public DeleteUserRequestBuilder deleteUser(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new DeleteUserRequestBuilder(id);
    }
    private okhttp3.Call getByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Users/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/scim+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getById(Async)");
        }

        return getByIdCall(id, _callback);

    }


    private ApiResponse<UserResponse> getByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<UserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String id, final ApiCallback<UserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<UserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String id;

        private GetByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(id, _callback);
        }


        /**
         * Execute getById request
         * @return UserResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public UserResponse execute() throws ApiException {
            ApiResponse<UserResponse> localVarResp = getByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;UserResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserResponse> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(id);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserResponse> _callback) throws ApiException {
            return getByIdAsync(id, _callback);
        }
    }

    /**
     * Retrieve a single User
     * Retrieve a single user by id.
     * @param id Retrieve a single user by id. (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetByIdRequestBuilder(id);
    }
    private okhttp3.Call listDeelUsersCall(String filter, Integer startIndex, Integer count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/scim+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDeelUsersValidateBeforeCall(String filter, Integer startIndex, Integer count, final ApiCallback _callback) throws ApiException {
        return listDeelUsersCall(filter, startIndex, count, _callback);

    }


    private ApiResponse<UserSearchResponse> listDeelUsersWithHttpInfo(String filter, Integer startIndex, Integer count) throws ApiException {
        okhttp3.Call localVarCall = listDeelUsersValidateBeforeCall(filter, startIndex, count, null);
        Type localVarReturnType = new TypeToken<UserSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listDeelUsersAsync(String filter, Integer startIndex, Integer count, final ApiCallback<UserSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDeelUsersValidateBeforeCall(filter, startIndex, count, _callback);
        Type localVarReturnType = new TypeToken<UserSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListDeelUsersRequestBuilder {
        private String filter;
        private Integer startIndex;
        private Integer count;

        private ListDeelUsersRequestBuilder() {
        }

        /**
         * Set filter
         * @param filter Filter results by a given value. For now, only supports equal (eq) expression for \&quot;email\&quot; filter. (optional)
         * @return ListDeelUsersRequestBuilder
         */
        public ListDeelUsersRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set startIndex
         * @param startIndex Start index. (1-based) (optional, default to 1)
         * @return ListDeelUsersRequestBuilder
         */
        public ListDeelUsersRequestBuilder startIndex(Integer startIndex) {
            this.startIndex = startIndex;
            return this;
        }
        
        /**
         * Set count
         * @param count Page size. (optional, default to 50)
         * @return ListDeelUsersRequestBuilder
         */
        public ListDeelUsersRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Build call for listDeelUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listDeelUsersCall(filter, startIndex, count, _callback);
        }


        /**
         * Execute listDeelUsers request
         * @return UserSearchResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public UserSearchResponse execute() throws ApiException {
            ApiResponse<UserSearchResponse> localVarResp = listDeelUsersWithHttpInfo(filter, startIndex, count);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listDeelUsers request with HTTP info returned
         * @return ApiResponse&lt;UserSearchResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserSearchResponse> executeWithHttpInfo() throws ApiException {
            return listDeelUsersWithHttpInfo(filter, startIndex, count);
        }

        /**
         * Execute listDeelUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserSearchResponse> _callback) throws ApiException {
            return listDeelUsersAsync(filter, startIndex, count, _callback);
        }
    }

    /**
     * List users
     * Retrieve a list of users in Deel HR.
     * @return ListDeelUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public ListDeelUsersRequestBuilder listDeelUsers() throws IllegalArgumentException {
        return new ListDeelUsersRequestBuilder();
    }
    private okhttp3.Call partiallyUpdateUserCall(String id, UserPatch body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/Users/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/scim+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/scim+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partiallyUpdateUserValidateBeforeCall(String id, UserPatch body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling partiallyUpdateUser(Async)");
        }

        return partiallyUpdateUserCall(id, body, _callback);

    }


    private ApiResponse<UserResponse> partiallyUpdateUserWithHttpInfo(String id, UserPatch body) throws ApiException {
        okhttp3.Call localVarCall = partiallyUpdateUserValidateBeforeCall(id, body, null);
        Type localVarReturnType = new TypeToken<UserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call partiallyUpdateUserAsync(String id, UserPatch body, final ApiCallback<UserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = partiallyUpdateUserValidateBeforeCall(id, body, _callback);
        Type localVarReturnType = new TypeToken<UserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PartiallyUpdateUserRequestBuilder {
        private final List<PatchOperation> operations;
        private final List<String> schemas;
        private final String id;

        private PartiallyUpdateUserRequestBuilder(List<PatchOperation> operations, List<String> schemas, String id) {
            this.operations = operations;
            this.schemas = schemas;
            this.id = id;
        }

        /**
         * Build call for partiallyUpdateUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successfully partially updated user </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UserPatch body = buildBodyParams();
            return partiallyUpdateUserCall(id, body, _callback);
        }

        private UserPatch buildBodyParams() {
            UserPatch body = new UserPatch();
            body.operations(this.operations);
            if (this.schemas != null)
            body.schemas(UserPatch.SchemasEnum.fromValue(this.schemas));
            return body;
        }

        /**
         * Execute partiallyUpdateUser request
         * @return UserResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successfully partially updated user </td><td>  -  </td></tr>
         </table>
         */
        public UserResponse execute() throws ApiException {
            UserPatch body = buildBodyParams();
            ApiResponse<UserResponse> localVarResp = partiallyUpdateUserWithHttpInfo(id, body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute partiallyUpdateUser request with HTTP info returned
         * @return ApiResponse&lt;UserResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successfully partially updated user </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserResponse> executeWithHttpInfo() throws ApiException {
            UserPatch body = buildBodyParams();
            return partiallyUpdateUserWithHttpInfo(id, body);
        }

        /**
         * Execute partiallyUpdateUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successfully partially updated user </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserResponse> _callback) throws ApiException {
            UserPatch body = buildBodyParams();
            return partiallyUpdateUserAsync(id, body, _callback);
        }
    }

    /**
     * Partially update/patch a user
     * 
     * @param id user id (required)
     * @return PartiallyUpdateUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successfully partially updated user </td><td>  -  </td></tr>
     </table>
     */
    public PartiallyUpdateUserRequestBuilder partiallyUpdateUser(List<PatchOperation> operations, List<String> schemas, String id) throws IllegalArgumentException {
        if (operations == null) throw new IllegalArgumentException("\"operations\" is required but got null");
        if (schemas == null) throw new IllegalArgumentException("\"schemas\" is required but got null");
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new PartiallyUpdateUserRequestBuilder(operations, schemas, id);
    }
    private okhttp3.Call searchOrListCall(SearchRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/Users/.search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/scim+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/scim+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchOrListValidateBeforeCall(SearchRequest body, final ApiCallback _callback) throws ApiException {
        return searchOrListCall(body, _callback);

    }


    private ApiResponse<UserSearchResponse> searchOrListWithHttpInfo(SearchRequest body) throws ApiException {
        okhttp3.Call localVarCall = searchOrListValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<UserSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchOrListAsync(SearchRequest body, final ApiCallback<UserSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchOrListValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<UserSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchOrListRequestBuilder {
        private Integer count;
        private String filter;
        private List<String> schemas;
        private Integer startIndex;

        private SearchOrListRequestBuilder() {
        }

        /**
         * Set count
         * @param count page size (optional)
         * @return SearchOrListRequestBuilder
         */
        public SearchOrListRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set filter
         * @param filter only support &#39;userName&#39; or &#39;email&#39; filter expressions for now (optional)
         * @return SearchOrListRequestBuilder
         */
        public SearchOrListRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set schemas
         * @param schemas  (optional)
         * @return SearchOrListRequestBuilder
         */
        public SearchOrListRequestBuilder schemas(List<String> schemas) {
            this.schemas = schemas;
            return this;
        }
        
        /**
         * Set startIndex
         * @param startIndex start index (1-based) (optional)
         * @return SearchOrListRequestBuilder
         */
        public SearchOrListRequestBuilder startIndex(Integer startIndex) {
            this.startIndex = startIndex;
            return this;
        }
        
        /**
         * Build call for searchOrList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SearchRequest body = buildBodyParams();
            return searchOrListCall(body, _callback);
        }

        private SearchRequest buildBodyParams() {
            SearchRequest body = new SearchRequest();
            body.count(this.count);
            body.filter(this.filter);
            if (this.schemas != null)
            body.schemas(SearchRequest.SchemasEnum.fromValue(this.schemas));
            body.startIndex(this.startIndex);
            return body;
        }

        /**
         * Execute searchOrList request
         * @return UserSearchResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public UserSearchResponse execute() throws ApiException {
            SearchRequest body = buildBodyParams();
            ApiResponse<UserSearchResponse> localVarResp = searchOrListWithHttpInfo(body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchOrList request with HTTP info returned
         * @return ApiResponse&lt;UserSearchResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserSearchResponse> executeWithHttpInfo() throws ApiException {
            SearchRequest body = buildBodyParams();
            return searchOrListWithHttpInfo(body);
        }

        /**
         * Execute searchOrList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserSearchResponse> _callback) throws ApiException {
            SearchRequest body = buildBodyParams();
            return searchOrListAsync(body, _callback);
        }
    }

    /**
     * Search or list users
     * 
     * @return SearchOrListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SearchOrListRequestBuilder searchOrList() throws IllegalArgumentException {
        return new SearchOrListRequestBuilder();
    }
    private okhttp3.Call updateUserByIdCall(String id, User body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/Users/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/scim+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/scim+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserByIdValidateBeforeCall(String id, User body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateUserById(Async)");
        }

        return updateUserByIdCall(id, body, _callback);

    }


    private ApiResponse<UserResponse> updateUserByIdWithHttpInfo(String id, User body) throws ApiException {
        okhttp3.Call localVarCall = updateUserByIdValidateBeforeCall(id, body, null);
        Type localVarReturnType = new TypeToken<UserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateUserByIdAsync(String id, User body, final ApiCallback<UserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserByIdValidateBeforeCall(id, body, _callback);
        Type localVarReturnType = new TypeToken<UserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateUserByIdRequestBuilder {
        private final List<Email> emails;
        private final Name name;
        private final List<String> schemas;
        private final String userName;
        private final UserMeta meta;
        private final String id;
        private String title;
        private Boolean active;
        private String userType;
        private String id;
        private EnterpriseUser urnColonIetfColonParamsColonScimColonSchemasColonExtensionColonEnterpriseColon20ColonUser;
        private UserExtension urnColonIetfColonParamsColonScimColonSchemasColonExtensionColon20ColonUser;

        private UpdateUserByIdRequestBuilder(List<Email> emails, Name name, List<String> schemas, String userName, UserMeta meta, String id) {
            this.emails = emails;
            this.name = name;
            this.schemas = schemas;
            this.userName = userName;
            this.meta = meta;
            this.id = id;
        }

        /**
         * Set title
         * @param title Job title. (optional)
         * @return UpdateUserByIdRequestBuilder
         */
        public UpdateUserByIdRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set active
         * @param active Hiring status. True if user employment is active. False if employment is not active. (optional, default to false)
         * @return UpdateUserByIdRequestBuilder
         */
        public UpdateUserByIdRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Set userType
         * @param userType User type. (optional)
         * @return UpdateUserByIdRequestBuilder
         */
        public UpdateUserByIdRequestBuilder userType(String userType) {
            this.userType = userType;
            return this;
        }
        
        /**
         * Set id
         * @param id Unique resource id (UUID) defined by Deel. (optional)
         * @return UpdateUserByIdRequestBuilder
         */
        public UpdateUserByIdRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set urnColonIetfColonParamsColonScimColonSchemasColonExtensionColonEnterpriseColon20ColonUser
         * @param urnColonIetfColonParamsColonScimColonSchemasColonExtensionColonEnterpriseColon20ColonUser  (optional)
         * @return UpdateUserByIdRequestBuilder
         */
        public UpdateUserByIdRequestBuilder urnColonIetfColonParamsColonScimColonSchemasColonExtensionColonEnterpriseColon20ColonUser(EnterpriseUser urnColonIetfColonParamsColonScimColonSchemasColonExtensionColonEnterpriseColon20ColonUser) {
            this.urnColonIetfColonParamsColonScimColonSchemasColonExtensionColonEnterpriseColon20ColonUser = urnColonIetfColonParamsColonScimColonSchemasColonExtensionColonEnterpriseColon20ColonUser;
            return this;
        }
        
        /**
         * Set urnColonIetfColonParamsColonScimColonSchemasColonExtensionColon20ColonUser
         * @param urnColonIetfColonParamsColonScimColonSchemasColonExtensionColon20ColonUser  (optional)
         * @return UpdateUserByIdRequestBuilder
         */
        public UpdateUserByIdRequestBuilder urnColonIetfColonParamsColonScimColonSchemasColonExtensionColon20ColonUser(UserExtension urnColonIetfColonParamsColonScimColonSchemasColonExtensionColon20ColonUser) {
            this.urnColonIetfColonParamsColonScimColonSchemasColonExtensionColon20ColonUser = urnColonIetfColonParamsColonScimColonSchemasColonExtensionColon20ColonUser;
            return this;
        }
        
        /**
         * Build call for updateUserById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successfully fully updated a user </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            User body = buildBodyParams();
            return updateUserByIdCall(id, body, _callback);
        }

        private User buildBodyParams() {
            User body = new User();
            body.title(this.title);
            body.active(this.active);
            body.emails(this.emails);
            body.userType(this.userType);
            body.id(this.id);
            body.name(this.name);
            if (this.schemas != null)
            body.schemas(User.SchemasEnum.fromValue(this.schemas));
            body.urnColonIetfColonParamsColonScimColonSchemasColonExtensionColonEnterpriseColon20ColonUser(this.urnColonIetfColonParamsColonScimColonSchemasColonExtensionColonEnterpriseColon20ColonUser);
            body.urnColonIetfColonParamsColonScimColonSchemasColonExtensionColon20ColonUser(this.urnColonIetfColonParamsColonScimColonSchemasColonExtensionColon20ColonUser);
            body.userName(this.userName);
            body.meta(this.meta);
            return body;
        }

        /**
         * Execute updateUserById request
         * @return UserResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successfully fully updated a user </td><td>  -  </td></tr>
         </table>
         */
        public UserResponse execute() throws ApiException {
            User body = buildBodyParams();
            ApiResponse<UserResponse> localVarResp = updateUserByIdWithHttpInfo(id, body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateUserById request with HTTP info returned
         * @return ApiResponse&lt;UserResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successfully fully updated a user </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserResponse> executeWithHttpInfo() throws ApiException {
            User body = buildBodyParams();
            return updateUserByIdWithHttpInfo(id, body);
        }

        /**
         * Execute updateUserById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successfully fully updated a user </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserResponse> _callback) throws ApiException {
            User body = buildBodyParams();
            return updateUserByIdAsync(id, body, _callback);
        }
    }

    /**
     * Fully update/replace a user
     * 
     * @param id user id (required)
     * @return UpdateUserByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successfully fully updated a user </td><td>  -  </td></tr>
     </table>
     */
    public UpdateUserByIdRequestBuilder updateUserById(List<Email> emails, Name name, List<String> schemas, String userName, UserMeta meta, String id) throws IllegalArgumentException {
        if (emails == null) throw new IllegalArgumentException("\"emails\" is required but got null");
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
        if (schemas == null) throw new IllegalArgumentException("\"schemas\" is required but got null");
        if (userName == null) throw new IllegalArgumentException("\"userName\" is required but got null");
            

        if (meta == null) throw new IllegalArgumentException("\"meta\" is required but got null");
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateUserByIdRequestBuilder(emails, name, schemas, userName, meta, id);
    }
}
