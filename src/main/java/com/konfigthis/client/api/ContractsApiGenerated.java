/*
 * Deel REST API
 * API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AlternateEmailItem;
import com.konfigthis.client.model.ContractContainer;
import com.konfigthis.client.model.ContractDocumentContainer;
import com.konfigthis.client.model.ContractExternalIdToPatch;
import com.konfigthis.client.model.ContractInvitationToCreate;
import com.konfigthis.client.model.ContractInvitationToCreateContainer;
import com.konfigthis.client.model.ContractListContainer;
import com.konfigthis.client.model.ContractSignatureToCreate;
import com.konfigthis.client.model.ContractSignatureToCreateContainer;
import com.konfigthis.client.model.ContractStatusEnum;
import com.konfigthis.client.model.ContractTemplateListContainer;
import com.konfigthis.client.model.ContractTypeEnum;
import com.konfigthis.client.model.ContractsSortByEnum;
import com.konfigthis.client.model.EstimateFirstPayment;
import com.konfigthis.client.model.EstimateFirstPaymentContainer;
import java.io.File;
import com.konfigthis.client.model.FileObject;
import com.konfigthis.client.model.FinalPaymentCalculatedContainer;
import com.konfigthis.client.model.GenericResultCreated;
import com.konfigthis.client.model.GenericResultDeleted;
import com.konfigthis.client.model.GenericResultUpdated;
import com.konfigthis.client.model.InputToPatchContractExternalId;
import java.time.LocalDate;
import com.konfigthis.client.model.ResponseEstimateFirstPaymentContainer;
import com.konfigthis.client.model.SortDirEnum;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ContractsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContractsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ContractsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addExternalIdCall(String contractId, InputToPatchContractExternalId inputToPatchContractExternalId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inputToPatchContractExternalId;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addExternalIdValidateBeforeCall(String contractId, InputToPatchContractExternalId inputToPatchContractExternalId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling addExternalId(Async)");
        }

        // verify the required parameter 'inputToPatchContractExternalId' is set
        if (inputToPatchContractExternalId == null) {
            throw new ApiException("Missing the required parameter 'inputToPatchContractExternalId' when calling addExternalId(Async)");
        }

        return addExternalIdCall(contractId, inputToPatchContractExternalId, _callback);

    }


    private ApiResponse<GenericResultCreated> addExternalIdWithHttpInfo(String contractId, InputToPatchContractExternalId inputToPatchContractExternalId) throws ApiException {
        okhttp3.Call localVarCall = addExternalIdValidateBeforeCall(contractId, inputToPatchContractExternalId, null);
        Type localVarReturnType = new TypeToken<GenericResultCreated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addExternalIdAsync(String contractId, InputToPatchContractExternalId inputToPatchContractExternalId, final ApiCallback<GenericResultCreated> _callback) throws ApiException {

        okhttp3.Call localVarCall = addExternalIdValidateBeforeCall(contractId, inputToPatchContractExternalId, _callback);
        Type localVarReturnType = new TypeToken<GenericResultCreated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddExternalIdRequestBuilder {
        private final ContractExternalIdToPatch data;
        private final String contractId;

        private AddExternalIdRequestBuilder(ContractExternalIdToPatch data, String contractId) {
            this.data = data;
            this.contractId = contractId;
        }

        /**
         * Build call for addExternalId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            InputToPatchContractExternalId inputToPatchContractExternalId = buildBodyParams();
            return addExternalIdCall(contractId, inputToPatchContractExternalId, _callback);
        }

        private InputToPatchContractExternalId buildBodyParams() {
            InputToPatchContractExternalId inputToPatchContractExternalId = new InputToPatchContractExternalId();
            inputToPatchContractExternalId.data(this.data);
            return inputToPatchContractExternalId;
        }

        /**
         * Execute addExternalId request
         * @return GenericResultCreated
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GenericResultCreated execute() throws ApiException {
            InputToPatchContractExternalId inputToPatchContractExternalId = buildBodyParams();
            ApiResponse<GenericResultCreated> localVarResp = addExternalIdWithHttpInfo(contractId, inputToPatchContractExternalId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addExternalId request with HTTP info returned
         * @return ApiResponse&lt;GenericResultCreated&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GenericResultCreated> executeWithHttpInfo() throws ApiException {
            InputToPatchContractExternalId inputToPatchContractExternalId = buildBodyParams();
            return addExternalIdWithHttpInfo(contractId, inputToPatchContractExternalId);
        }

        /**
         * Execute addExternalId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GenericResultCreated> _callback) throws ApiException {
            InputToPatchContractExternalId inputToPatchContractExternalId = buildBodyParams();
            return addExternalIdAsync(contractId, inputToPatchContractExternalId, _callback);
        }
    }

    /**
     * External Id
     * Add an external Id to a Deel contract. You can use this to add a Deel contract&#39;s refernece Id in your platform. External Id can be passed as a query parameter in List contract endpoint to find this conract later.
     * @param contractId Deel contract id. (required)
     * @param inputToPatchContractExternalId Contract object that needs to be created (required)
     * @return AddExternalIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public AddExternalIdRequestBuilder addExternalId(ContractExternalIdToPatch data, String contractId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        return new AddExternalIdRequestBuilder(data, contractId);
    }
    private okhttp3.Call archiveContractCall(String contractId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/archive"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call archiveContractValidateBeforeCall(String contractId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling archiveContract(Async)");
        }

        return archiveContractCall(contractId, _callback);

    }


    private ApiResponse<GenericResultUpdated> archiveContractWithHttpInfo(String contractId) throws ApiException {
        okhttp3.Call localVarCall = archiveContractValidateBeforeCall(contractId, null);
        Type localVarReturnType = new TypeToken<GenericResultUpdated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call archiveContractAsync(String contractId, final ApiCallback<GenericResultUpdated> _callback) throws ApiException {

        okhttp3.Call localVarCall = archiveContractValidateBeforeCall(contractId, _callback);
        Type localVarReturnType = new TypeToken<GenericResultUpdated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ArchiveContractRequestBuilder {
        private final String contractId;

        private ArchiveContractRequestBuilder(String contractId) {
            this.contractId = contractId;
        }

        /**
         * Build call for archiveContract
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return archiveContractCall(contractId, _callback);
        }


        /**
         * Execute archiveContract request
         * @return GenericResultUpdated
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public GenericResultUpdated execute() throws ApiException {
            ApiResponse<GenericResultUpdated> localVarResp = archiveContractWithHttpInfo(contractId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute archiveContract request with HTTP info returned
         * @return ApiResponse&lt;GenericResultUpdated&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<GenericResultUpdated> executeWithHttpInfo() throws ApiException {
            return archiveContractWithHttpInfo(contractId);
        }

        /**
         * Execute archiveContract request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<GenericResultUpdated> _callback) throws ApiException {
            return archiveContractAsync(contractId, _callback);
        }
    }

    /**
     * Archive a contract
     * Archive a terminated, cancelled or completed contract.
     * @param contractId Deel contract id. (required)
     * @return ArchiveContractRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ArchiveContractRequestBuilder archiveContract(String contractId) throws IllegalArgumentException {
        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        return new ArchiveContractRequestBuilder(contractId);
    }
    private okhttp3.Call attachFileToDocumentCall(String contractId, FileObject fileObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fileObject;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/documents"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attachFileToDocumentValidateBeforeCall(String contractId, FileObject fileObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling attachFileToDocument(Async)");
        }

        return attachFileToDocumentCall(contractId, fileObject, _callback);

    }


    private ApiResponse<ContractDocumentContainer> attachFileToDocumentWithHttpInfo(String contractId, FileObject fileObject) throws ApiException {
        okhttp3.Call localVarCall = attachFileToDocumentValidateBeforeCall(contractId, fileObject, null);
        Type localVarReturnType = new TypeToken<ContractDocumentContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call attachFileToDocumentAsync(String contractId, FileObject fileObject, final ApiCallback<ContractDocumentContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = attachFileToDocumentValidateBeforeCall(contractId, fileObject, _callback);
        Type localVarReturnType = new TypeToken<ContractDocumentContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AttachFileToDocumentRequestBuilder {
        private final String contractId;
        private File _file;

        private AttachFileToDocumentRequestBuilder(String contractId) {
            this.contractId = contractId;
        }

        /**
         * Set _file
         * @param _file Upload the file you want to attach to this entry. (optional)
         * @return AttachFileToDocumentRequestBuilder
         */
        public AttachFileToDocumentRequestBuilder _file(File _file) {
            this._file = _file;
            return this;
        }
        
        /**
         * Build call for attachFileToDocument
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FileObject fileObject = buildBodyParams();
            return attachFileToDocumentCall(contractId, fileObject, _callback);
        }

        private FileObject buildBodyParams() {
            FileObject fileObject = new FileObject();
            fileObject._file(this._file);
            return fileObject;
        }

        /**
         * Execute attachFileToDocument request
         * @return ContractDocumentContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ContractDocumentContainer execute() throws ApiException {
            FileObject fileObject = buildBodyParams();
            ApiResponse<ContractDocumentContainer> localVarResp = attachFileToDocumentWithHttpInfo(contractId, fileObject);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute attachFileToDocument request with HTTP info returned
         * @return ApiResponse&lt;ContractDocumentContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContractDocumentContainer> executeWithHttpInfo() throws ApiException {
            FileObject fileObject = buildBodyParams();
            return attachFileToDocumentWithHttpInfo(contractId, fileObject);
        }

        /**
         * Execute attachFileToDocument request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContractDocumentContainer> _callback) throws ApiException {
            FileObject fileObject = buildBodyParams();
            return attachFileToDocumentAsync(contractId, fileObject, _callback);
        }
    }

    /**
     * Attach a file to contract
     * Attach a file to contract document.
     * @param contractId Deel contract id. (required)
     * @return AttachFileToDocumentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public AttachFileToDocumentRequestBuilder attachFileToDocument(String contractId) throws IllegalArgumentException {
        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        return new AttachFileToDocumentRequestBuilder(contractId);
    }
    private okhttp3.Call calculateFinalPaymentAmountCall(String contractId, LocalDate endDate, String calculationType, String workweekStart, String workweekEnd, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/final-payments"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (calculationType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculation_type", calculationType));
        }

        if (workweekStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workweek_start", workweekStart));
        }

        if (workweekEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workweek_end", workweekEnd));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculateFinalPaymentAmountValidateBeforeCall(String contractId, LocalDate endDate, String calculationType, String workweekStart, String workweekEnd, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling calculateFinalPaymentAmount(Async)");
        }

        return calculateFinalPaymentAmountCall(contractId, endDate, calculationType, workweekStart, workweekEnd, _callback);

    }


    private ApiResponse<FinalPaymentCalculatedContainer> calculateFinalPaymentAmountWithHttpInfo(String contractId, LocalDate endDate, String calculationType, String workweekStart, String workweekEnd) throws ApiException {
        okhttp3.Call localVarCall = calculateFinalPaymentAmountValidateBeforeCall(contractId, endDate, calculationType, workweekStart, workweekEnd, null);
        Type localVarReturnType = new TypeToken<FinalPaymentCalculatedContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call calculateFinalPaymentAmountAsync(String contractId, LocalDate endDate, String calculationType, String workweekStart, String workweekEnd, final ApiCallback<FinalPaymentCalculatedContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculateFinalPaymentAmountValidateBeforeCall(contractId, endDate, calculationType, workweekStart, workweekEnd, _callback);
        Type localVarReturnType = new TypeToken<FinalPaymentCalculatedContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CalculateFinalPaymentAmountRequestBuilder {
        private final String contractId;
        private LocalDate endDate;
        private String calculationType;
        private String workweekStart;
        private String workweekEnd;

        private CalculateFinalPaymentAmountRequestBuilder(String contractId) {
            this.contractId = contractId;
        }

        /**
         * Set endDate
         * @param endDate The day to end the contract. (optional)
         * @return CalculateFinalPaymentAmountRequestBuilder
         */
        public CalculateFinalPaymentAmountRequestBuilder endDate(LocalDate endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set calculationType
         * @param calculationType The days to calculate. (optional)
         * @return CalculateFinalPaymentAmountRequestBuilder
         */
        public CalculateFinalPaymentAmountRequestBuilder calculationType(String calculationType) {
            this.calculationType = calculationType;
            return this;
        }
        
        /**
         * Set workweekStart
         * @param workweekStart The day the work week starts, 0 to 6 (optional)
         * @return CalculateFinalPaymentAmountRequestBuilder
         */
        public CalculateFinalPaymentAmountRequestBuilder workweekStart(String workweekStart) {
            this.workweekStart = workweekStart;
            return this;
        }
        
        /**
         * Set workweekEnd
         * @param workweekEnd The day the work week ends, 0 to 6 (optional)
         * @return CalculateFinalPaymentAmountRequestBuilder
         */
        public CalculateFinalPaymentAmountRequestBuilder workweekEnd(String workweekEnd) {
            this.workweekEnd = workweekEnd;
            return this;
        }
        
        /**
         * Build call for calculateFinalPaymentAmount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return calculateFinalPaymentAmountCall(contractId, endDate, calculationType, workweekStart, workweekEnd, _callback);
        }


        /**
         * Execute calculateFinalPaymentAmount request
         * @return FinalPaymentCalculatedContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public FinalPaymentCalculatedContainer execute() throws ApiException {
            ApiResponse<FinalPaymentCalculatedContainer> localVarResp = calculateFinalPaymentAmountWithHttpInfo(contractId, endDate, calculationType, workweekStart, workweekEnd);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute calculateFinalPaymentAmount request with HTTP info returned
         * @return ApiResponse&lt;FinalPaymentCalculatedContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FinalPaymentCalculatedContainer> executeWithHttpInfo() throws ApiException {
            return calculateFinalPaymentAmountWithHttpInfo(contractId, endDate, calculationType, workweekStart, workweekEnd);
        }

        /**
         * Execute calculateFinalPaymentAmount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FinalPaymentCalculatedContainer> _callback) throws ApiException {
            return calculateFinalPaymentAmountAsync(contractId, endDate, calculationType, workweekStart, workweekEnd, _callback);
        }
    }

    /**
     * Calculate final payment
     * Calculate the final payment due to the contractor when ending the contract.
     * @param contractId Deel contract id. (required)
     * @return CalculateFinalPaymentAmountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public CalculateFinalPaymentAmountRequestBuilder calculateFinalPaymentAmount(String contractId) throws IllegalArgumentException {
        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        return new CalculateFinalPaymentAmountRequestBuilder(contractId);
    }
    private okhttp3.Call calculateFirstPaymentAmountCall(EstimateFirstPaymentContainer estimateFirstPaymentContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = estimateFirstPaymentContainer;

        // create path and map variables
        String localVarPath = "/contracts/estimate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculateFirstPaymentAmountValidateBeforeCall(EstimateFirstPaymentContainer estimateFirstPaymentContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'estimateFirstPaymentContainer' is set
        if (estimateFirstPaymentContainer == null) {
            throw new ApiException("Missing the required parameter 'estimateFirstPaymentContainer' when calling calculateFirstPaymentAmount(Async)");
        }

        return calculateFirstPaymentAmountCall(estimateFirstPaymentContainer, _callback);

    }


    private ApiResponse<ResponseEstimateFirstPaymentContainer> calculateFirstPaymentAmountWithHttpInfo(EstimateFirstPaymentContainer estimateFirstPaymentContainer) throws ApiException {
        okhttp3.Call localVarCall = calculateFirstPaymentAmountValidateBeforeCall(estimateFirstPaymentContainer, null);
        Type localVarReturnType = new TypeToken<ResponseEstimateFirstPaymentContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call calculateFirstPaymentAmountAsync(EstimateFirstPaymentContainer estimateFirstPaymentContainer, final ApiCallback<ResponseEstimateFirstPaymentContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculateFirstPaymentAmountValidateBeforeCall(estimateFirstPaymentContainer, _callback);
        Type localVarReturnType = new TypeToken<ResponseEstimateFirstPaymentContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CalculateFirstPaymentAmountRequestBuilder {
        private final EstimateFirstPayment data;

        private CalculateFirstPaymentAmountRequestBuilder(EstimateFirstPayment data) {
            this.data = data;
        }

        /**
         * Build call for calculateFirstPaymentAmount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EstimateFirstPaymentContainer estimateFirstPaymentContainer = buildBodyParams();
            return calculateFirstPaymentAmountCall(estimateFirstPaymentContainer, _callback);
        }

        private EstimateFirstPaymentContainer buildBodyParams() {
            EstimateFirstPaymentContainer estimateFirstPaymentContainer = new EstimateFirstPaymentContainer();
            estimateFirstPaymentContainer.data(this.data);
            return estimateFirstPaymentContainer;
        }

        /**
         * Execute calculateFirstPaymentAmount request
         * @return ResponseEstimateFirstPaymentContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ResponseEstimateFirstPaymentContainer execute() throws ApiException {
            EstimateFirstPaymentContainer estimateFirstPaymentContainer = buildBodyParams();
            ApiResponse<ResponseEstimateFirstPaymentContainer> localVarResp = calculateFirstPaymentAmountWithHttpInfo(estimateFirstPaymentContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute calculateFirstPaymentAmount request with HTTP info returned
         * @return ApiResponse&lt;ResponseEstimateFirstPaymentContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResponseEstimateFirstPaymentContainer> executeWithHttpInfo() throws ApiException {
            EstimateFirstPaymentContainer estimateFirstPaymentContainer = buildBodyParams();
            return calculateFirstPaymentAmountWithHttpInfo(estimateFirstPaymentContainer);
        }

        /**
         * Execute calculateFirstPaymentAmount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResponseEstimateFirstPaymentContainer> _callback) throws ApiException {
            EstimateFirstPaymentContainer estimateFirstPaymentContainer = buildBodyParams();
            return calculateFirstPaymentAmountAsync(estimateFirstPaymentContainer, _callback);
        }
    }

    /**
     * Calculate first payment amount
     * First payment is calculated from the number of working/calendar days between their start date and the start of the payment cycle.
     * @param estimateFirstPaymentContainer Pro-rata payment object that needs to estimated payment (required)
     * @return CalculateFirstPaymentAmountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public CalculateFirstPaymentAmountRequestBuilder calculateFirstPaymentAmount(EstimateFirstPayment data) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        return new CalculateFirstPaymentAmountRequestBuilder(data);
    }
    private okhttp3.Call clientSignContractCall(String contractId, ContractSignatureToCreateContainer contractSignatureToCreateContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contractSignatureToCreateContainer;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/signatures"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientSignContractValidateBeforeCall(String contractId, ContractSignatureToCreateContainer contractSignatureToCreateContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling clientSignContract(Async)");
        }

        // verify the required parameter 'contractSignatureToCreateContainer' is set
        if (contractSignatureToCreateContainer == null) {
            throw new ApiException("Missing the required parameter 'contractSignatureToCreateContainer' when calling clientSignContract(Async)");
        }

        return clientSignContractCall(contractId, contractSignatureToCreateContainer, _callback);

    }


    private ApiResponse<GenericResultCreated> clientSignContractWithHttpInfo(String contractId, ContractSignatureToCreateContainer contractSignatureToCreateContainer) throws ApiException {
        okhttp3.Call localVarCall = clientSignContractValidateBeforeCall(contractId, contractSignatureToCreateContainer, null);
        Type localVarReturnType = new TypeToken<GenericResultCreated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call clientSignContractAsync(String contractId, ContractSignatureToCreateContainer contractSignatureToCreateContainer, final ApiCallback<GenericResultCreated> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientSignContractValidateBeforeCall(contractId, contractSignatureToCreateContainer, _callback);
        Type localVarReturnType = new TypeToken<GenericResultCreated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ClientSignContractRequestBuilder {
        private final ContractSignatureToCreate data;
        private final String contractId;

        private ClientSignContractRequestBuilder(ContractSignatureToCreate data, String contractId) {
            this.data = data;
            this.contractId = contractId;
        }

        /**
         * Build call for clientSignContract
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ContractSignatureToCreateContainer contractSignatureToCreateContainer = buildBodyParams();
            return clientSignContractCall(contractId, contractSignatureToCreateContainer, _callback);
        }

        private ContractSignatureToCreateContainer buildBodyParams() {
            ContractSignatureToCreateContainer contractSignatureToCreateContainer = new ContractSignatureToCreateContainer();
            contractSignatureToCreateContainer.data(this.data);
            return contractSignatureToCreateContainer;
        }

        /**
         * Execute clientSignContract request
         * @return GenericResultCreated
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GenericResultCreated execute() throws ApiException {
            ContractSignatureToCreateContainer contractSignatureToCreateContainer = buildBodyParams();
            ApiResponse<GenericResultCreated> localVarResp = clientSignContractWithHttpInfo(contractId, contractSignatureToCreateContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute clientSignContract request with HTTP info returned
         * @return ApiResponse&lt;GenericResultCreated&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GenericResultCreated> executeWithHttpInfo() throws ApiException {
            ContractSignatureToCreateContainer contractSignatureToCreateContainer = buildBodyParams();
            return clientSignContractWithHttpInfo(contractId, contractSignatureToCreateContainer);
        }

        /**
         * Execute clientSignContract request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GenericResultCreated> _callback) throws ApiException {
            ContractSignatureToCreateContainer contractSignatureToCreateContainer = buildBodyParams();
            return clientSignContractAsync(contractId, contractSignatureToCreateContainer, _callback);
        }
    }

    /**
     * Sign a contract
     * Sign a contract as a client.
     * @param contractId Deel contract id. (required)
     * @param contractSignatureToCreateContainer Contract signature object that needs to be created (required)
     * @return ClientSignContractRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public ClientSignContractRequestBuilder clientSignContract(ContractSignatureToCreate data, String contractId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        return new ClientSignContractRequestBuilder(data, contractId);
    }
    private okhttp3.Call editFileAttachmentCall(String contractId, FileObject fileObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fileObject;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/documents"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editFileAttachmentValidateBeforeCall(String contractId, FileObject fileObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling editFileAttachment(Async)");
        }

        return editFileAttachmentCall(contractId, fileObject, _callback);

    }


    private ApiResponse<ContractDocumentContainer> editFileAttachmentWithHttpInfo(String contractId, FileObject fileObject) throws ApiException {
        okhttp3.Call localVarCall = editFileAttachmentValidateBeforeCall(contractId, fileObject, null);
        Type localVarReturnType = new TypeToken<ContractDocumentContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call editFileAttachmentAsync(String contractId, FileObject fileObject, final ApiCallback<ContractDocumentContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = editFileAttachmentValidateBeforeCall(contractId, fileObject, _callback);
        Type localVarReturnType = new TypeToken<ContractDocumentContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EditFileAttachmentRequestBuilder {
        private final String contractId;
        private File _file;

        private EditFileAttachmentRequestBuilder(String contractId) {
            this.contractId = contractId;
        }

        /**
         * Set _file
         * @param _file Upload the file you want to attach to this entry. (optional)
         * @return EditFileAttachmentRequestBuilder
         */
        public EditFileAttachmentRequestBuilder _file(File _file) {
            this._file = _file;
            return this;
        }
        
        /**
         * Build call for editFileAttachment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FileObject fileObject = buildBodyParams();
            return editFileAttachmentCall(contractId, fileObject, _callback);
        }

        private FileObject buildBodyParams() {
            FileObject fileObject = new FileObject();
            fileObject._file(this._file);
            return fileObject;
        }

        /**
         * Execute editFileAttachment request
         * @return ContractDocumentContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ContractDocumentContainer execute() throws ApiException {
            FileObject fileObject = buildBodyParams();
            ApiResponse<ContractDocumentContainer> localVarResp = editFileAttachmentWithHttpInfo(contractId, fileObject);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute editFileAttachment request with HTTP info returned
         * @return ApiResponse&lt;ContractDocumentContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContractDocumentContainer> executeWithHttpInfo() throws ApiException {
            FileObject fileObject = buildBodyParams();
            return editFileAttachmentWithHttpInfo(contractId, fileObject);
        }

        /**
         * Execute editFileAttachment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContractDocumentContainer> _callback) throws ApiException {
            FileObject fileObject = buildBodyParams();
            return editFileAttachmentAsync(contractId, fileObject, _callback);
        }
    }

    /**
     * Edit the file attached to contract document.
     * Overwrite the file currently attached to contract document.
     * @param contractId Deel contract id. (required)
     * @return EditFileAttachmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public EditFileAttachmentRequestBuilder editFileAttachment(String contractId) throws IllegalArgumentException {
        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        return new EditFileAttachmentRequestBuilder(contractId);
    }
    private okhttp3.Call findEmailsByIdCall(String contractId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/alternate_emails"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findEmailsByIdValidateBeforeCall(String contractId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling findEmailsById(Async)");
        }

        return findEmailsByIdCall(contractId, _callback);

    }


    private ApiResponse<List<AlternateEmailItem>> findEmailsByIdWithHttpInfo(String contractId) throws ApiException {
        okhttp3.Call localVarCall = findEmailsByIdValidateBeforeCall(contractId, null);
        Type localVarReturnType = new TypeToken<List<AlternateEmailItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findEmailsByIdAsync(String contractId, final ApiCallback<List<AlternateEmailItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findEmailsByIdValidateBeforeCall(contractId, _callback);
        Type localVarReturnType = new TypeToken<List<AlternateEmailItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindEmailsByIdRequestBuilder {
        private final String contractId;

        private FindEmailsByIdRequestBuilder(String contractId) {
            this.contractId = contractId;
        }

        /**
         * Build call for findEmailsById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findEmailsByIdCall(contractId, _callback);
        }


        /**
         * Execute findEmailsById request
         * @return List&lt;AlternateEmailItem&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public List<AlternateEmailItem> execute() throws ApiException {
            ApiResponse<List<AlternateEmailItem>> localVarResp = findEmailsByIdWithHttpInfo(contractId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findEmailsById request with HTTP info returned
         * @return ApiResponse&lt;List&lt;AlternateEmailItem&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<AlternateEmailItem>> executeWithHttpInfo() throws ApiException {
            return findEmailsByIdWithHttpInfo(contractId);
        }

        /**
         * Execute findEmailsById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<AlternateEmailItem>> _callback) throws ApiException {
            return findEmailsByIdAsync(contractId, _callback);
        }
    }

    /**
     * Find contract emails by ID
     * Returns an array of alternate email objects
     * @param contractId Deel contract id. (required)
     * @return FindEmailsByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public FindEmailsByIdRequestBuilder findEmailsById(String contractId) throws IllegalArgumentException {
        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        return new FindEmailsByIdRequestBuilder(contractId);
    }
    private okhttp3.Call getListCall(String afterCursor, Double limit, SortDirEnum orderDirection, List<ContractTypeEnum> types, List<ContractStatusEnum> statuses, String teamId, String externalId, List<String> countries, Object currencies, String search, ContractsSortByEnum sortBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contracts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (afterCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after_cursor", afterCursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (orderDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_direction", orderDirection));
        }

        if (types != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "types", types));
        }

        if (statuses != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "statuses", statuses));
        }

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        if (externalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("external_id", externalId));
        }

        if (countries != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "countries", countries));
        }

        if (currencies != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currencies", currencies));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListValidateBeforeCall(String afterCursor, Double limit, SortDirEnum orderDirection, List<ContractTypeEnum> types, List<ContractStatusEnum> statuses, String teamId, String externalId, List<String> countries, Object currencies, String search, ContractsSortByEnum sortBy, final ApiCallback _callback) throws ApiException {
        return getListCall(afterCursor, limit, orderDirection, types, statuses, teamId, externalId, countries, currencies, search, sortBy, _callback);

    }


    private ApiResponse<ContractListContainer> getListWithHttpInfo(String afterCursor, Double limit, SortDirEnum orderDirection, List<ContractTypeEnum> types, List<ContractStatusEnum> statuses, String teamId, String externalId, List<String> countries, Object currencies, String search, ContractsSortByEnum sortBy) throws ApiException {
        okhttp3.Call localVarCall = getListValidateBeforeCall(afterCursor, limit, orderDirection, types, statuses, teamId, externalId, countries, currencies, search, sortBy, null);
        Type localVarReturnType = new TypeToken<ContractListContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getListAsync(String afterCursor, Double limit, SortDirEnum orderDirection, List<ContractTypeEnum> types, List<ContractStatusEnum> statuses, String teamId, String externalId, List<String> countries, Object currencies, String search, ContractsSortByEnum sortBy, final ApiCallback<ContractListContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListValidateBeforeCall(afterCursor, limit, orderDirection, types, statuses, teamId, externalId, countries, currencies, search, sortBy, _callback);
        Type localVarReturnType = new TypeToken<ContractListContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetListRequestBuilder {
        private String afterCursor;
        private Double limit;
        private SortDirEnum orderDirection;
        private List<ContractTypeEnum> types;
        private List<ContractStatusEnum> statuses;
        private String teamId;
        private String externalId;
        private List<String> countries;
        private Object currencies;
        private String search;
        private ContractsSortByEnum sortBy;

        private GetListRequestBuilder() {
        }

        /**
         * Set afterCursor
         * @param afterCursor Return next page of results after given cursor. (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder afterCursor(String afterCursor) {
            this.afterCursor = afterCursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Return a page of results with given number of records; NOTE: technically ALL query parameters are strings or array of strings (optional, default to 10)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder limit(Double limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set orderDirection
         * @param orderDirection Order direction of results; ascending or descending. (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder orderDirection(SortDirEnum orderDirection) {
            this.orderDirection = orderDirection;
            return this;
        }
        
        /**
         * Set types
         * @param types You can filter contracts by type, a contract is included in results if its type is in this list. (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder types(List<ContractTypeEnum> types) {
            this.types = types;
            return this;
        }
        
        /**
         * Set statuses
         * @param statuses You can filter contracts by current status, a contract is included in results if its status is in this list. (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder statuses(List<ContractStatusEnum> statuses) {
            this.statuses = statuses;
            return this;
        }
        
        /**
         * Set teamId
         * @param teamId Filter contracts for given team ID; NOTE: technically ALL query parameters are strings or array of strings (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder teamId(String teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Set externalId
         * @param externalId Filter contracts for given external ID (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder externalId(String externalId) {
            this.externalId = externalId;
            return this;
        }
        
        /**
         * Set countries
         * @param countries Country codes of contracts to filter. (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder countries(List<String> countries) {
            this.countries = countries;
            return this;
        }
        
        /**
         * Set currencies
         * @param currencies Currency codes of contracts to filter. (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder currencies(Object currencies) {
            this.currencies = currencies;
            return this;
        }
        
        /**
         * Set search
         * @param search Include a contract if by name or contractor name contains given search term. (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Set sortBy
         * @param sortBy Sort contracts by given field name. (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder sortBy(ContractsSortByEnum sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Build call for getList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListCall(afterCursor, limit, orderDirection, types, statuses, teamId, externalId, countries, currencies, search, sortBy, _callback);
        }


        /**
         * Execute getList request
         * @return ContractListContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ContractListContainer execute() throws ApiException {
            ApiResponse<ContractListContainer> localVarResp = getListWithHttpInfo(afterCursor, limit, orderDirection, types, statuses, teamId, externalId, countries, currencies, search, sortBy);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getList request with HTTP info returned
         * @return ApiResponse&lt;ContractListContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContractListContainer> executeWithHttpInfo() throws ApiException {
            return getListWithHttpInfo(afterCursor, limit, orderDirection, types, statuses, teamId, externalId, countries, currencies, search, sortBy);
        }

        /**
         * Execute getList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContractListContainer> _callback) throws ApiException {
            return getListAsync(afterCursor, limit, orderDirection, types, statuses, teamId, externalId, countries, currencies, search, sortBy, _callback);
        }
    }

    /**
     * List of contracts
     * Retrieve a list of contracts.
     * @return GetListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetListRequestBuilder getList() throws IllegalArgumentException {
        return new GetListRequestBuilder();
    }
    private okhttp3.Call getList_0Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contract-templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getList_0ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getList_0Call(_callback);

    }


    private ApiResponse<ContractTemplateListContainer> getList_0WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getList_0ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ContractTemplateListContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getList_0Async(final ApiCallback<ContractTemplateListContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getList_0ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ContractTemplateListContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetList0RequestBuilder {

        private GetList0RequestBuilder() {
        }

        /**
         * Build call for getList_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getList_0Call(_callback);
        }


        /**
         * Execute getList_0 request
         * @return ContractTemplateListContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ContractTemplateListContainer execute() throws ApiException {
            ApiResponse<ContractTemplateListContainer> localVarResp = getList_0WithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getList_0 request with HTTP info returned
         * @return ApiResponse&lt;ContractTemplateListContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContractTemplateListContainer> executeWithHttpInfo() throws ApiException {
            return getList_0WithHttpInfo();
        }

        /**
         * Execute getList_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContractTemplateListContainer> _callback) throws ApiException {
            return getList_0Async(_callback);
        }
    }

    /**
     * Get contract templates
     * Retrieve a list of contract templates in your organization.
     * @return GetList0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetList0RequestBuilder getList_0() throws IllegalArgumentException {
        return new GetList0RequestBuilder();
    }
    private okhttp3.Call getSingleContractCall(String contractId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleContractValidateBeforeCall(String contractId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling getSingleContract(Async)");
        }

        return getSingleContractCall(contractId, _callback);

    }


    private ApiResponse<ContractContainer> getSingleContractWithHttpInfo(String contractId) throws ApiException {
        okhttp3.Call localVarCall = getSingleContractValidateBeforeCall(contractId, null);
        Type localVarReturnType = new TypeToken<ContractContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleContractAsync(String contractId, final ApiCallback<ContractContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleContractValidateBeforeCall(contractId, _callback);
        Type localVarReturnType = new TypeToken<ContractContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleContractRequestBuilder {
        private final String contractId;

        private GetSingleContractRequestBuilder(String contractId) {
            this.contractId = contractId;
        }

        /**
         * Build call for getSingleContract
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleContractCall(contractId, _callback);
        }


        /**
         * Execute getSingleContract request
         * @return ContractContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ContractContainer execute() throws ApiException {
            ApiResponse<ContractContainer> localVarResp = getSingleContractWithHttpInfo(contractId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleContract request with HTTP info returned
         * @return ApiResponse&lt;ContractContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContractContainer> executeWithHttpInfo() throws ApiException {
            return getSingleContractWithHttpInfo(contractId);
        }

        /**
         * Execute getSingleContract request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContractContainer> _callback) throws ApiException {
            return getSingleContractAsync(contractId, _callback);
        }
    }

    /**
     * Retrieve a single contract
     * Retrieve a single contract.
     * @param contractId Deel contract id. (required)
     * @return GetSingleContractRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleContractRequestBuilder getSingleContract(String contractId) throws IllegalArgumentException {
        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        return new GetSingleContractRequestBuilder(contractId);
    }
    private okhttp3.Call inviteWorkerToSignCall(String contractId, ContractInvitationToCreateContainer contractInvitationToCreateContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contractInvitationToCreateContainer;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/invitations"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inviteWorkerToSignValidateBeforeCall(String contractId, ContractInvitationToCreateContainer contractInvitationToCreateContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling inviteWorkerToSign(Async)");
        }

        // verify the required parameter 'contractInvitationToCreateContainer' is set
        if (contractInvitationToCreateContainer == null) {
            throw new ApiException("Missing the required parameter 'contractInvitationToCreateContainer' when calling inviteWorkerToSign(Async)");
        }

        return inviteWorkerToSignCall(contractId, contractInvitationToCreateContainer, _callback);

    }


    private ApiResponse<GenericResultCreated> inviteWorkerToSignWithHttpInfo(String contractId, ContractInvitationToCreateContainer contractInvitationToCreateContainer) throws ApiException {
        okhttp3.Call localVarCall = inviteWorkerToSignValidateBeforeCall(contractId, contractInvitationToCreateContainer, null);
        Type localVarReturnType = new TypeToken<GenericResultCreated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call inviteWorkerToSignAsync(String contractId, ContractInvitationToCreateContainer contractInvitationToCreateContainer, final ApiCallback<GenericResultCreated> _callback) throws ApiException {

        okhttp3.Call localVarCall = inviteWorkerToSignValidateBeforeCall(contractId, contractInvitationToCreateContainer, _callback);
        Type localVarReturnType = new TypeToken<GenericResultCreated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class InviteWorkerToSignRequestBuilder {
        private final ContractInvitationToCreate data;
        private final String contractId;

        private InviteWorkerToSignRequestBuilder(ContractInvitationToCreate data, String contractId) {
            this.data = data;
            this.contractId = contractId;
        }

        /**
         * Build call for inviteWorkerToSign
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ContractInvitationToCreateContainer contractInvitationToCreateContainer = buildBodyParams();
            return inviteWorkerToSignCall(contractId, contractInvitationToCreateContainer, _callback);
        }

        private ContractInvitationToCreateContainer buildBodyParams() {
            ContractInvitationToCreateContainer contractInvitationToCreateContainer = new ContractInvitationToCreateContainer();
            contractInvitationToCreateContainer.data(this.data);
            return contractInvitationToCreateContainer;
        }

        /**
         * Execute inviteWorkerToSign request
         * @return GenericResultCreated
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GenericResultCreated execute() throws ApiException {
            ContractInvitationToCreateContainer contractInvitationToCreateContainer = buildBodyParams();
            ApiResponse<GenericResultCreated> localVarResp = inviteWorkerToSignWithHttpInfo(contractId, contractInvitationToCreateContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute inviteWorkerToSign request with HTTP info returned
         * @return ApiResponse&lt;GenericResultCreated&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GenericResultCreated> executeWithHttpInfo() throws ApiException {
            ContractInvitationToCreateContainer contractInvitationToCreateContainer = buildBodyParams();
            return inviteWorkerToSignWithHttpInfo(contractId, contractInvitationToCreateContainer);
        }

        /**
         * Execute inviteWorkerToSign request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GenericResultCreated> _callback) throws ApiException {
            ContractInvitationToCreateContainer contractInvitationToCreateContainer = buildBodyParams();
            return inviteWorkerToSignAsync(contractId, contractInvitationToCreateContainer, _callback);
        }
    }

    /**
     * Send contract to worker
     * Invite a worker to sign the contract. Worker will be notified via email.
     * @param contractId Deel contract id. (required)
     * @param contractInvitationToCreateContainer Contract invitation object that needs to be created (required)
     * @return InviteWorkerToSignRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public InviteWorkerToSignRequestBuilder inviteWorkerToSign(ContractInvitationToCreate data, String contractId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        return new InviteWorkerToSignRequestBuilder(data, contractId);
    }
    private okhttp3.Call removeInviteCall(String contractId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/invitations"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeInviteValidateBeforeCall(String contractId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling removeInvite(Async)");
        }

        return removeInviteCall(contractId, _callback);

    }


    private ApiResponse<GenericResultDeleted> removeInviteWithHttpInfo(String contractId) throws ApiException {
        okhttp3.Call localVarCall = removeInviteValidateBeforeCall(contractId, null);
        Type localVarReturnType = new TypeToken<GenericResultDeleted>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeInviteAsync(String contractId, final ApiCallback<GenericResultDeleted> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeInviteValidateBeforeCall(contractId, _callback);
        Type localVarReturnType = new TypeToken<GenericResultDeleted>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveInviteRequestBuilder {
        private final String contractId;

        private RemoveInviteRequestBuilder(String contractId) {
            this.contractId = contractId;
        }

        /**
         * Build call for removeInvite
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeInviteCall(contractId, _callback);
        }


        /**
         * Execute removeInvite request
         * @return GenericResultDeleted
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GenericResultDeleted execute() throws ApiException {
            ApiResponse<GenericResultDeleted> localVarResp = removeInviteWithHttpInfo(contractId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeInvite request with HTTP info returned
         * @return ApiResponse&lt;GenericResultDeleted&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GenericResultDeleted> executeWithHttpInfo() throws ApiException {
            return removeInviteWithHttpInfo(contractId);
        }

        /**
         * Execute removeInvite request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GenericResultDeleted> _callback) throws ApiException {
            return removeInviteAsync(contractId, _callback);
        }
    }

    /**
     * Remove invite
     * Remove invite in order to re-invite a worker to sign the contract.
     * @param contractId Deel contract id. (required)
     * @return RemoveInviteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveInviteRequestBuilder removeInvite(String contractId) throws IllegalArgumentException {
        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        return new RemoveInviteRequestBuilder(contractId);
    }
}
