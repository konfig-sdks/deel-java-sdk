/*
 * Deel REST API
 * API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ContractTypeEnum;
import com.konfigthis.client.model.GenericResultCreated;
import com.konfigthis.client.model.GenericResultDeleted;
import com.konfigthis.client.model.GenericResultUpdated;
import com.konfigthis.client.model.InvoiceAdjustmentCreatedContainer;
import java.time.LocalDate;
import com.konfigthis.client.model.TimesheetContainer;
import com.konfigthis.client.model.TimesheetListContainer;
import com.konfigthis.client.model.TimesheetReviewToCreate;
import com.konfigthis.client.model.TimesheetReviewToCreateContainer;
import com.konfigthis.client.model.TimesheetReviewsToCreate;
import com.konfigthis.client.model.TimesheetReviewsToCreateContainer;
import com.konfigthis.client.model.TimesheetSharedProperties;
import com.konfigthis.client.model.TimesheetStatusEnum;
import com.konfigthis.client.model.TimesheetToCreateContainer;
import com.konfigthis.client.model.TimesheetToCreateWithFile;
import com.konfigthis.client.model.TimesheetToUpdate;
import com.konfigthis.client.model.TimesheetToUpdateContainer;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TimesheetsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TimesheetsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TimesheetsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteEntryCall(Double timesheetId, String reason, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/timesheets/{timesheet_id}"
            .replace("{" + "timesheet_id" + "}", localVarApiClient.escapeString(timesheetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reason", reason));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEntryValidateBeforeCall(Double timesheetId, String reason, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timesheetId' is set
        if (timesheetId == null) {
            throw new ApiException("Missing the required parameter 'timesheetId' when calling deleteEntry(Async)");
        }

        return deleteEntryCall(timesheetId, reason, _callback);

    }


    private ApiResponse<GenericResultDeleted> deleteEntryWithHttpInfo(Double timesheetId, String reason) throws ApiException {
        okhttp3.Call localVarCall = deleteEntryValidateBeforeCall(timesheetId, reason, null);
        Type localVarReturnType = new TypeToken<GenericResultDeleted>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteEntryAsync(Double timesheetId, String reason, final ApiCallback<GenericResultDeleted> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEntryValidateBeforeCall(timesheetId, reason, _callback);
        Type localVarReturnType = new TypeToken<GenericResultDeleted>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteEntryRequestBuilder {
        private final Double timesheetId;
        private String reason;

        private DeleteEntryRequestBuilder(double timesheetId) {
            this.timesheetId = timesheetId;
        }

        /**
         * Set reason
         * @param reason Reason for deleting an existing timesheet (optional)
         * @return DeleteEntryRequestBuilder
         */
        public DeleteEntryRequestBuilder reason(String reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Build call for deleteEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteEntryCall(timesheetId, reason, _callback);
        }


        /**
         * Execute deleteEntry request
         * @return GenericResultDeleted
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GenericResultDeleted execute() throws ApiException {
            ApiResponse<GenericResultDeleted> localVarResp = deleteEntryWithHttpInfo(timesheetId, reason);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteEntry request with HTTP info returned
         * @return ApiResponse&lt;GenericResultDeleted&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GenericResultDeleted> executeWithHttpInfo() throws ApiException {
            return deleteEntryWithHttpInfo(timesheetId, reason);
        }

        /**
         * Execute deleteEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GenericResultDeleted> _callback) throws ApiException {
            return deleteEntryAsync(timesheetId, reason, _callback);
        }
    }

    /**
     * Delete a timesheet entry
     * Delete a single timesheet entry.
     * @param timesheetId ID of an existing timesheet (required)
     * @return DeleteEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteEntryRequestBuilder deleteEntry(double timesheetId) throws IllegalArgumentException {
        
        return new DeleteEntryRequestBuilder(timesheetId);
    }
    private okhttp3.Call getListCall(String contractId, List<ContractTypeEnum> contractTypes, List<TimesheetStatusEnum> statuses, Double reporterId, LocalDate dateFrom, LocalDate dateTo, Double limit, Double offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/timesheets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contractId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contract_id", contractId));
        }

        if (contractTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contract_types", contractTypes));
        }

        if (statuses != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "statuses", statuses));
        }

        if (reporterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reporter_id", reporterId));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_from", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_to", dateTo));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListValidateBeforeCall(String contractId, List<ContractTypeEnum> contractTypes, List<TimesheetStatusEnum> statuses, Double reporterId, LocalDate dateFrom, LocalDate dateTo, Double limit, Double offset, final ApiCallback _callback) throws ApiException {
        return getListCall(contractId, contractTypes, statuses, reporterId, dateFrom, dateTo, limit, offset, _callback);

    }


    private ApiResponse<TimesheetListContainer> getListWithHttpInfo(String contractId, List<ContractTypeEnum> contractTypes, List<TimesheetStatusEnum> statuses, Double reporterId, LocalDate dateFrom, LocalDate dateTo, Double limit, Double offset) throws ApiException {
        okhttp3.Call localVarCall = getListValidateBeforeCall(contractId, contractTypes, statuses, reporterId, dateFrom, dateTo, limit, offset, null);
        Type localVarReturnType = new TypeToken<TimesheetListContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getListAsync(String contractId, List<ContractTypeEnum> contractTypes, List<TimesheetStatusEnum> statuses, Double reporterId, LocalDate dateFrom, LocalDate dateTo, Double limit, Double offset, final ApiCallback<TimesheetListContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListValidateBeforeCall(contractId, contractTypes, statuses, reporterId, dateFrom, dateTo, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<TimesheetListContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetListRequestBuilder {
        private String contractId;
        private List<ContractTypeEnum> contractTypes;
        private List<TimesheetStatusEnum> statuses;
        private Double reporterId;
        private LocalDate dateFrom;
        private LocalDate dateTo;
        private Double limit;
        private Double offset;

        private GetListRequestBuilder() {
        }

        /**
         * Set contractId
         * @param contractId Id of a Deel contract. (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder contractId(String contractId) {
            this.contractId = contractId;
            return this;
        }
        
        /**
         * Set contractTypes
         * @param contractTypes Types of contracts to filter. (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder contractTypes(List<ContractTypeEnum> contractTypes) {
            this.contractTypes = contractTypes;
            return this;
        }
        
        /**
         * Set statuses
         * @param statuses Statuses of timesheets to filter. (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder statuses(List<TimesheetStatusEnum> statuses) {
            this.statuses = statuses;
            return this;
        }
        
        /**
         * Set reporterId
         * @param reporterId ID of an existing profile; NOTE: technically ALL query parameters are strings or array of strings (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder reporterId(Double reporterId) {
            this.reporterId = reporterId;
            return this;
        }
        
        /**
         * Set dateFrom
         * @param dateFrom Filtered results will include records created on or after the provided date. (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder dateFrom(LocalDate dateFrom) {
            this.dateFrom = dateFrom;
            return this;
        }
        
        /**
         * Set dateTo
         * @param dateTo Filtered results will include records created before the provided date. (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder dateTo(LocalDate dateTo) {
            this.dateTo = dateTo;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Return a page of results with given number of records; NOTE: technically ALL query parameters are strings or array of strings (optional, default to 99)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder limit(Double limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Return a page of results after given index of row (optional, default to 0)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder offset(Double offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListCall(contractId, contractTypes, statuses, reporterId, dateFrom, dateTo, limit, offset, _callback);
        }


        /**
         * Execute getList request
         * @return TimesheetListContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public TimesheetListContainer execute() throws ApiException {
            ApiResponse<TimesheetListContainer> localVarResp = getListWithHttpInfo(contractId, contractTypes, statuses, reporterId, dateFrom, dateTo, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getList request with HTTP info returned
         * @return ApiResponse&lt;TimesheetListContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimesheetListContainer> executeWithHttpInfo() throws ApiException {
            return getListWithHttpInfo(contractId, contractTypes, statuses, reporterId, dateFrom, dateTo, limit, offset);
        }

        /**
         * Execute getList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimesheetListContainer> _callback) throws ApiException {
            return getListAsync(contractId, contractTypes, statuses, reporterId, dateFrom, dateTo, limit, offset, _callback);
        }
    }

    /**
     * List of timesheets
     * Retrieve a list of timesheets in your Deel account. You can filter the list by providing additional paramters e.g. contract_id, contract_type etc.
     * @return GetListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetListRequestBuilder getList() throws IllegalArgumentException {
        return new GetListRequestBuilder();
    }
    private okhttp3.Call getSingleEntryCall(Double timesheetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/timesheets/{timesheet_id}"
            .replace("{" + "timesheet_id" + "}", localVarApiClient.escapeString(timesheetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleEntryValidateBeforeCall(Double timesheetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timesheetId' is set
        if (timesheetId == null) {
            throw new ApiException("Missing the required parameter 'timesheetId' when calling getSingleEntry(Async)");
        }

        return getSingleEntryCall(timesheetId, _callback);

    }


    private ApiResponse<TimesheetContainer> getSingleEntryWithHttpInfo(Double timesheetId) throws ApiException {
        okhttp3.Call localVarCall = getSingleEntryValidateBeforeCall(timesheetId, null);
        Type localVarReturnType = new TypeToken<TimesheetContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleEntryAsync(Double timesheetId, final ApiCallback<TimesheetContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleEntryValidateBeforeCall(timesheetId, _callback);
        Type localVarReturnType = new TypeToken<TimesheetContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleEntryRequestBuilder {
        private final Double timesheetId;

        private GetSingleEntryRequestBuilder(double timesheetId) {
            this.timesheetId = timesheetId;
        }

        /**
         * Build call for getSingleEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleEntryCall(timesheetId, _callback);
        }


        /**
         * Execute getSingleEntry request
         * @return TimesheetContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public TimesheetContainer execute() throws ApiException {
            ApiResponse<TimesheetContainer> localVarResp = getSingleEntryWithHttpInfo(timesheetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleEntry request with HTTP info returned
         * @return ApiResponse&lt;TimesheetContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimesheetContainer> executeWithHttpInfo() throws ApiException {
            return getSingleEntryWithHttpInfo(timesheetId);
        }

        /**
         * Execute getSingleEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimesheetContainer> _callback) throws ApiException {
            return getSingleEntryAsync(timesheetId, _callback);
        }
    }

    /**
     * Retrieve a single timesheet entry
     * Retrieve a single timesheet entry by Id.
     * @param timesheetId ID of an existing timesheet (required)
     * @return GetSingleEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleEntryRequestBuilder getSingleEntry(double timesheetId) throws IllegalArgumentException {
        
        return new GetSingleEntryRequestBuilder(timesheetId);
    }
    private okhttp3.Call listByContractCall(String contractId, List<ContractTypeEnum> contractTypes, List<TimesheetStatusEnum> statuses, Double reporterId, LocalDate dateFrom, LocalDate dateTo, Double limit, Double offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/timesheets"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contractTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contract_types", contractTypes));
        }

        if (statuses != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "statuses", statuses));
        }

        if (reporterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reporter_id", reporterId));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_from", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_to", dateTo));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listByContractValidateBeforeCall(String contractId, List<ContractTypeEnum> contractTypes, List<TimesheetStatusEnum> statuses, Double reporterId, LocalDate dateFrom, LocalDate dateTo, Double limit, Double offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling listByContract(Async)");
        }

        return listByContractCall(contractId, contractTypes, statuses, reporterId, dateFrom, dateTo, limit, offset, _callback);

    }


    private ApiResponse<TimesheetListContainer> listByContractWithHttpInfo(String contractId, List<ContractTypeEnum> contractTypes, List<TimesheetStatusEnum> statuses, Double reporterId, LocalDate dateFrom, LocalDate dateTo, Double limit, Double offset) throws ApiException {
        okhttp3.Call localVarCall = listByContractValidateBeforeCall(contractId, contractTypes, statuses, reporterId, dateFrom, dateTo, limit, offset, null);
        Type localVarReturnType = new TypeToken<TimesheetListContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listByContractAsync(String contractId, List<ContractTypeEnum> contractTypes, List<TimesheetStatusEnum> statuses, Double reporterId, LocalDate dateFrom, LocalDate dateTo, Double limit, Double offset, final ApiCallback<TimesheetListContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = listByContractValidateBeforeCall(contractId, contractTypes, statuses, reporterId, dateFrom, dateTo, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<TimesheetListContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListByContractRequestBuilder {
        private final String contractId;
        private List<ContractTypeEnum> contractTypes;
        private List<TimesheetStatusEnum> statuses;
        private Double reporterId;
        private LocalDate dateFrom;
        private LocalDate dateTo;
        private Double limit;
        private Double offset;

        private ListByContractRequestBuilder(String contractId) {
            this.contractId = contractId;
        }

        /**
         * Set contractTypes
         * @param contractTypes Types of contracts to filter. (optional)
         * @return ListByContractRequestBuilder
         */
        public ListByContractRequestBuilder contractTypes(List<ContractTypeEnum> contractTypes) {
            this.contractTypes = contractTypes;
            return this;
        }
        
        /**
         * Set statuses
         * @param statuses Statuses of timesheets to filter. (optional)
         * @return ListByContractRequestBuilder
         */
        public ListByContractRequestBuilder statuses(List<TimesheetStatusEnum> statuses) {
            this.statuses = statuses;
            return this;
        }
        
        /**
         * Set reporterId
         * @param reporterId ID of an existing profile; NOTE: technically ALL query parameters are strings or array of strings (optional)
         * @return ListByContractRequestBuilder
         */
        public ListByContractRequestBuilder reporterId(Double reporterId) {
            this.reporterId = reporterId;
            return this;
        }
        
        /**
         * Set dateFrom
         * @param dateFrom Filtered results will include records created on or after the provided date. (optional)
         * @return ListByContractRequestBuilder
         */
        public ListByContractRequestBuilder dateFrom(LocalDate dateFrom) {
            this.dateFrom = dateFrom;
            return this;
        }
        
        /**
         * Set dateTo
         * @param dateTo Filtered results will include records created before the provided date. (optional)
         * @return ListByContractRequestBuilder
         */
        public ListByContractRequestBuilder dateTo(LocalDate dateTo) {
            this.dateTo = dateTo;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Return a page of results with given number of records; NOTE: technically ALL query parameters are strings or array of strings (optional, default to 99)
         * @return ListByContractRequestBuilder
         */
        public ListByContractRequestBuilder limit(Double limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Return a page of results after given index of row (optional, default to 0)
         * @return ListByContractRequestBuilder
         */
        public ListByContractRequestBuilder offset(Double offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for listByContract
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listByContractCall(contractId, contractTypes, statuses, reporterId, dateFrom, dateTo, limit, offset, _callback);
        }


        /**
         * Execute listByContract request
         * @return TimesheetListContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public TimesheetListContainer execute() throws ApiException {
            ApiResponse<TimesheetListContainer> localVarResp = listByContractWithHttpInfo(contractId, contractTypes, statuses, reporterId, dateFrom, dateTo, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listByContract request with HTTP info returned
         * @return ApiResponse&lt;TimesheetListContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimesheetListContainer> executeWithHttpInfo() throws ApiException {
            return listByContractWithHttpInfo(contractId, contractTypes, statuses, reporterId, dateFrom, dateTo, limit, offset);
        }

        /**
         * Execute listByContract request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimesheetListContainer> _callback) throws ApiException {
            return listByContractAsync(contractId, contractTypes, statuses, reporterId, dateFrom, dateTo, limit, offset, _callback);
        }
    }

    /**
     * List of timesheets by contract
     * Retrieve a list of timesheets found for a contract.
     * @param contractId Deel contract id. (required)
     * @return ListByContractRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public ListByContractRequestBuilder listByContract(String contractId) throws IllegalArgumentException {
        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        return new ListByContractRequestBuilder(contractId);
    }
    private okhttp3.Call reviewMultipleCall(TimesheetReviewsToCreateContainer timesheetReviewsToCreateContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timesheetReviewsToCreateContainer;

        // create path and map variables
        String localVarPath = "/timesheets/many/reviews";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reviewMultipleValidateBeforeCall(TimesheetReviewsToCreateContainer timesheetReviewsToCreateContainer, final ApiCallback _callback) throws ApiException {
        return reviewMultipleCall(timesheetReviewsToCreateContainer, _callback);

    }


    private ApiResponse<GenericResultCreated> reviewMultipleWithHttpInfo(TimesheetReviewsToCreateContainer timesheetReviewsToCreateContainer) throws ApiException {
        okhttp3.Call localVarCall = reviewMultipleValidateBeforeCall(timesheetReviewsToCreateContainer, null);
        Type localVarReturnType = new TypeToken<GenericResultCreated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call reviewMultipleAsync(TimesheetReviewsToCreateContainer timesheetReviewsToCreateContainer, final ApiCallback<GenericResultCreated> _callback) throws ApiException {

        okhttp3.Call localVarCall = reviewMultipleValidateBeforeCall(timesheetReviewsToCreateContainer, _callback);
        Type localVarReturnType = new TypeToken<GenericResultCreated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ReviewMultipleRequestBuilder {
        private final TimesheetReviewsToCreate data;

        private ReviewMultipleRequestBuilder(TimesheetReviewsToCreate data) {
            this.data = data;
        }

        /**
         * Build call for reviewMultiple
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimesheetReviewsToCreateContainer timesheetReviewsToCreateContainer = buildBodyParams();
            return reviewMultipleCall(timesheetReviewsToCreateContainer, _callback);
        }

        private TimesheetReviewsToCreateContainer buildBodyParams() {
            TimesheetReviewsToCreateContainer timesheetReviewsToCreateContainer = new TimesheetReviewsToCreateContainer();
            timesheetReviewsToCreateContainer.data(this.data);
            return timesheetReviewsToCreateContainer;
        }

        /**
         * Execute reviewMultiple request
         * @return GenericResultCreated
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GenericResultCreated execute() throws ApiException {
            TimesheetReviewsToCreateContainer timesheetReviewsToCreateContainer = buildBodyParams();
            ApiResponse<GenericResultCreated> localVarResp = reviewMultipleWithHttpInfo(timesheetReviewsToCreateContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute reviewMultiple request with HTTP info returned
         * @return ApiResponse&lt;GenericResultCreated&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GenericResultCreated> executeWithHttpInfo() throws ApiException {
            TimesheetReviewsToCreateContainer timesheetReviewsToCreateContainer = buildBodyParams();
            return reviewMultipleWithHttpInfo(timesheetReviewsToCreateContainer);
        }

        /**
         * Execute reviewMultiple request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GenericResultCreated> _callback) throws ApiException {
            TimesheetReviewsToCreateContainer timesheetReviewsToCreateContainer = buildBodyParams();
            return reviewMultipleAsync(timesheetReviewsToCreateContainer, _callback);
        }
    }

    /**
     * Review multiple timesheets
     * Review a batch of timesheets to approve or reject submitted work.
     * @return ReviewMultipleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public ReviewMultipleRequestBuilder reviewMultiple(TimesheetReviewsToCreate data) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        return new ReviewMultipleRequestBuilder(data);
    }
    private okhttp3.Call reviewSingleTimesheetCall(Double timesheetId, TimesheetReviewToCreateContainer timesheetReviewToCreateContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timesheetReviewToCreateContainer;

        // create path and map variables
        String localVarPath = "/timesheets/{timesheet_id}/reviews"
            .replace("{" + "timesheet_id" + "}", localVarApiClient.escapeString(timesheetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reviewSingleTimesheetValidateBeforeCall(Double timesheetId, TimesheetReviewToCreateContainer timesheetReviewToCreateContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timesheetId' is set
        if (timesheetId == null) {
            throw new ApiException("Missing the required parameter 'timesheetId' when calling reviewSingleTimesheet(Async)");
        }

        return reviewSingleTimesheetCall(timesheetId, timesheetReviewToCreateContainer, _callback);

    }


    private ApiResponse<GenericResultCreated> reviewSingleTimesheetWithHttpInfo(Double timesheetId, TimesheetReviewToCreateContainer timesheetReviewToCreateContainer) throws ApiException {
        okhttp3.Call localVarCall = reviewSingleTimesheetValidateBeforeCall(timesheetId, timesheetReviewToCreateContainer, null);
        Type localVarReturnType = new TypeToken<GenericResultCreated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call reviewSingleTimesheetAsync(Double timesheetId, TimesheetReviewToCreateContainer timesheetReviewToCreateContainer, final ApiCallback<GenericResultCreated> _callback) throws ApiException {

        okhttp3.Call localVarCall = reviewSingleTimesheetValidateBeforeCall(timesheetId, timesheetReviewToCreateContainer, _callback);
        Type localVarReturnType = new TypeToken<GenericResultCreated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ReviewSingleTimesheetRequestBuilder {
        private final TimesheetReviewToCreate data;
        private final Double timesheetId;

        private ReviewSingleTimesheetRequestBuilder(TimesheetReviewToCreate data, double timesheetId) {
            this.data = data;
            this.timesheetId = timesheetId;
        }

        /**
         * Build call for reviewSingleTimesheet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimesheetReviewToCreateContainer timesheetReviewToCreateContainer = buildBodyParams();
            return reviewSingleTimesheetCall(timesheetId, timesheetReviewToCreateContainer, _callback);
        }

        private TimesheetReviewToCreateContainer buildBodyParams() {
            TimesheetReviewToCreateContainer timesheetReviewToCreateContainer = new TimesheetReviewToCreateContainer();
            timesheetReviewToCreateContainer.data(this.data);
            return timesheetReviewToCreateContainer;
        }

        /**
         * Execute reviewSingleTimesheet request
         * @return GenericResultCreated
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GenericResultCreated execute() throws ApiException {
            TimesheetReviewToCreateContainer timesheetReviewToCreateContainer = buildBodyParams();
            ApiResponse<GenericResultCreated> localVarResp = reviewSingleTimesheetWithHttpInfo(timesheetId, timesheetReviewToCreateContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute reviewSingleTimesheet request with HTTP info returned
         * @return ApiResponse&lt;GenericResultCreated&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GenericResultCreated> executeWithHttpInfo() throws ApiException {
            TimesheetReviewToCreateContainer timesheetReviewToCreateContainer = buildBodyParams();
            return reviewSingleTimesheetWithHttpInfo(timesheetId, timesheetReviewToCreateContainer);
        }

        /**
         * Execute reviewSingleTimesheet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GenericResultCreated> _callback) throws ApiException {
            TimesheetReviewToCreateContainer timesheetReviewToCreateContainer = buildBodyParams();
            return reviewSingleTimesheetAsync(timesheetId, timesheetReviewToCreateContainer, _callback);
        }
    }

    /**
     * Review a single timesheet
     * Review a timesheet to approve or decline submitted work.
     * @param timesheetId ID of an existing timesheet (required)
     * @return ReviewSingleTimesheetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public ReviewSingleTimesheetRequestBuilder reviewSingleTimesheet(TimesheetReviewToCreate data, double timesheetId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        
        return new ReviewSingleTimesheetRequestBuilder(data, timesheetId);
    }
    private okhttp3.Call submitWorkForContractorCall(TimesheetToCreateContainer timesheetToCreateContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timesheetToCreateContainer;

        // create path and map variables
        String localVarPath = "/timesheets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitWorkForContractorValidateBeforeCall(TimesheetToCreateContainer timesheetToCreateContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timesheetToCreateContainer' is set
        if (timesheetToCreateContainer == null) {
            throw new ApiException("Missing the required parameter 'timesheetToCreateContainer' when calling submitWorkForContractor(Async)");
        }

        return submitWorkForContractorCall(timesheetToCreateContainer, _callback);

    }


    private ApiResponse<InvoiceAdjustmentCreatedContainer> submitWorkForContractorWithHttpInfo(TimesheetToCreateContainer timesheetToCreateContainer) throws ApiException {
        okhttp3.Call localVarCall = submitWorkForContractorValidateBeforeCall(timesheetToCreateContainer, null);
        Type localVarReturnType = new TypeToken<InvoiceAdjustmentCreatedContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call submitWorkForContractorAsync(TimesheetToCreateContainer timesheetToCreateContainer, final ApiCallback<InvoiceAdjustmentCreatedContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitWorkForContractorValidateBeforeCall(timesheetToCreateContainer, _callback);
        Type localVarReturnType = new TypeToken<InvoiceAdjustmentCreatedContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SubmitWorkForContractorRequestBuilder {
        private final TimesheetSharedProperties data;

        private SubmitWorkForContractorRequestBuilder(TimesheetSharedProperties data) {
            this.data = data;
        }

        /**
         * Build call for submitWorkForContractor
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimesheetToCreateContainer timesheetToCreateContainer = buildBodyParams();
            return submitWorkForContractorCall(timesheetToCreateContainer, _callback);
        }

        private TimesheetToCreateContainer buildBodyParams() {
            TimesheetToCreateContainer timesheetToCreateContainer = new TimesheetToCreateContainer();
            timesheetToCreateContainer.data(this.data);
            return timesheetToCreateContainer;
        }

        /**
         * Execute submitWorkForContractor request
         * @return InvoiceAdjustmentCreatedContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public InvoiceAdjustmentCreatedContainer execute() throws ApiException {
            TimesheetToCreateContainer timesheetToCreateContainer = buildBodyParams();
            ApiResponse<InvoiceAdjustmentCreatedContainer> localVarResp = submitWorkForContractorWithHttpInfo(timesheetToCreateContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute submitWorkForContractor request with HTTP info returned
         * @return ApiResponse&lt;InvoiceAdjustmentCreatedContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InvoiceAdjustmentCreatedContainer> executeWithHttpInfo() throws ApiException {
            TimesheetToCreateContainer timesheetToCreateContainer = buildBodyParams();
            return submitWorkForContractorWithHttpInfo(timesheetToCreateContainer);
        }

        /**
         * Execute submitWorkForContractor request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InvoiceAdjustmentCreatedContainer> _callback) throws ApiException {
            TimesheetToCreateContainer timesheetToCreateContainer = buildBodyParams();
            return submitWorkForContractorAsync(timesheetToCreateContainer, _callback);
        }
    }

    /**
     * Create a timesheet entry
     * Submit work for a contractor.
     * @param timesheetToCreateContainer Timesheet object that needs to be created (required)
     * @return SubmitWorkForContractorRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public SubmitWorkForContractorRequestBuilder submitWorkForContractor(TimesheetSharedProperties data) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        return new SubmitWorkForContractorRequestBuilder(data);
    }
    private okhttp3.Call updateEntryCall(Double timesheetId, TimesheetToUpdateContainer timesheetToUpdateContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timesheetToUpdateContainer;

        // create path and map variables
        String localVarPath = "/timesheets/{timesheet_id}"
            .replace("{" + "timesheet_id" + "}", localVarApiClient.escapeString(timesheetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEntryValidateBeforeCall(Double timesheetId, TimesheetToUpdateContainer timesheetToUpdateContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timesheetId' is set
        if (timesheetId == null) {
            throw new ApiException("Missing the required parameter 'timesheetId' when calling updateEntry(Async)");
        }

        // verify the required parameter 'timesheetToUpdateContainer' is set
        if (timesheetToUpdateContainer == null) {
            throw new ApiException("Missing the required parameter 'timesheetToUpdateContainer' when calling updateEntry(Async)");
        }

        return updateEntryCall(timesheetId, timesheetToUpdateContainer, _callback);

    }


    private ApiResponse<GenericResultUpdated> updateEntryWithHttpInfo(Double timesheetId, TimesheetToUpdateContainer timesheetToUpdateContainer) throws ApiException {
        okhttp3.Call localVarCall = updateEntryValidateBeforeCall(timesheetId, timesheetToUpdateContainer, null);
        Type localVarReturnType = new TypeToken<GenericResultUpdated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateEntryAsync(Double timesheetId, TimesheetToUpdateContainer timesheetToUpdateContainer, final ApiCallback<GenericResultUpdated> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEntryValidateBeforeCall(timesheetId, timesheetToUpdateContainer, _callback);
        Type localVarReturnType = new TypeToken<GenericResultUpdated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateEntryRequestBuilder {
        private final TimesheetToUpdate data;
        private final Double timesheetId;

        private UpdateEntryRequestBuilder(TimesheetToUpdate data, double timesheetId) {
            this.data = data;
            this.timesheetId = timesheetId;
        }

        /**
         * Build call for updateEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimesheetToUpdateContainer timesheetToUpdateContainer = buildBodyParams();
            return updateEntryCall(timesheetId, timesheetToUpdateContainer, _callback);
        }

        private TimesheetToUpdateContainer buildBodyParams() {
            TimesheetToUpdateContainer timesheetToUpdateContainer = new TimesheetToUpdateContainer();
            timesheetToUpdateContainer.data(this.data);
            return timesheetToUpdateContainer;
        }

        /**
         * Execute updateEntry request
         * @return GenericResultUpdated
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GenericResultUpdated execute() throws ApiException {
            TimesheetToUpdateContainer timesheetToUpdateContainer = buildBodyParams();
            ApiResponse<GenericResultUpdated> localVarResp = updateEntryWithHttpInfo(timesheetId, timesheetToUpdateContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateEntry request with HTTP info returned
         * @return ApiResponse&lt;GenericResultUpdated&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GenericResultUpdated> executeWithHttpInfo() throws ApiException {
            TimesheetToUpdateContainer timesheetToUpdateContainer = buildBodyParams();
            return updateEntryWithHttpInfo(timesheetId, timesheetToUpdateContainer);
        }

        /**
         * Execute updateEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GenericResultUpdated> _callback) throws ApiException {
            TimesheetToUpdateContainer timesheetToUpdateContainer = buildBodyParams();
            return updateEntryAsync(timesheetId, timesheetToUpdateContainer, _callback);
        }
    }

    /**
     * Update a timesheet entry
     * Update a single timesheet entry.
     * @param timesheetId ID of an existing timesheet (required)
     * @param timesheetToUpdateContainer Timesheet object that needs to be updated (required)
     * @return UpdateEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateEntryRequestBuilder updateEntry(TimesheetToUpdate data, double timesheetId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        
        return new UpdateEntryRequestBuilder(data, timesheetId);
    }
}
