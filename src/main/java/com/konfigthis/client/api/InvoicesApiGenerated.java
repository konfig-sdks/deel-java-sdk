/*
 * Deel REST API
 * API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ContractTypeEnum;
import com.konfigthis.client.model.GenericResultCreated;
import com.konfigthis.client.model.GenericResultDeleted;
import com.konfigthis.client.model.GenericResultUpdated;
import com.konfigthis.client.model.InvoiceAdjustmentAttachmentContainer;
import com.konfigthis.client.model.InvoiceAdjustmentCreatedContainer;
import com.konfigthis.client.model.InvoiceAdjustmentListContainer;
import com.konfigthis.client.model.InvoiceAdjustmentReviewToCreate;
import com.konfigthis.client.model.InvoiceAdjustmentReviewToCreateContainer;
import com.konfigthis.client.model.InvoiceAdjustmentReviewsToCreate;
import com.konfigthis.client.model.InvoiceAdjustmentReviewsToCreateContainer;
import com.konfigthis.client.model.InvoiceAdjustmentStatusEnum;
import com.konfigthis.client.model.InvoiceAdjustmentToCreate;
import com.konfigthis.client.model.InvoiceAdjustmentToCreateContainer;
import com.konfigthis.client.model.InvoiceAdjustmentToCreateWithFile;
import com.konfigthis.client.model.InvoiceAdjustmentToUpdate;
import com.konfigthis.client.model.InvoiceAdjustmentToUpdateContainer;
import com.konfigthis.client.model.InvoiceAdjustmentTypeEnum;
import java.time.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class InvoicesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InvoicesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public InvoicesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createAdjustmentCall(InvoiceAdjustmentToCreateContainer invoiceAdjustmentToCreateContainer, Boolean recurring, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invoiceAdjustmentToCreateContainer;

        // create path and map variables
        String localVarPath = "/invoice-adjustments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (recurring != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recurring", recurring));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAdjustmentValidateBeforeCall(InvoiceAdjustmentToCreateContainer invoiceAdjustmentToCreateContainer, Boolean recurring, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceAdjustmentToCreateContainer' is set
        if (invoiceAdjustmentToCreateContainer == null) {
            throw new ApiException("Missing the required parameter 'invoiceAdjustmentToCreateContainer' when calling createAdjustment(Async)");
        }

        return createAdjustmentCall(invoiceAdjustmentToCreateContainer, recurring, _callback);

    }


    private ApiResponse<InvoiceAdjustmentCreatedContainer> createAdjustmentWithHttpInfo(InvoiceAdjustmentToCreateContainer invoiceAdjustmentToCreateContainer, Boolean recurring) throws ApiException {
        okhttp3.Call localVarCall = createAdjustmentValidateBeforeCall(invoiceAdjustmentToCreateContainer, recurring, null);
        Type localVarReturnType = new TypeToken<InvoiceAdjustmentCreatedContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createAdjustmentAsync(InvoiceAdjustmentToCreateContainer invoiceAdjustmentToCreateContainer, Boolean recurring, final ApiCallback<InvoiceAdjustmentCreatedContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAdjustmentValidateBeforeCall(invoiceAdjustmentToCreateContainer, recurring, _callback);
        Type localVarReturnType = new TypeToken<InvoiceAdjustmentCreatedContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateAdjustmentRequestBuilder {
        private final InvoiceAdjustmentToCreate data;
        private Boolean recurring;

        private CreateAdjustmentRequestBuilder(InvoiceAdjustmentToCreate data) {
            this.data = data;
        }

        /**
         * Set recurring
         * @param recurring Add this invoice adjustment as recurring (optional)
         * @return CreateAdjustmentRequestBuilder
         */
        public CreateAdjustmentRequestBuilder recurring(Boolean recurring) {
            this.recurring = recurring;
            return this;
        }
        
        /**
         * Build call for createAdjustment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            InvoiceAdjustmentToCreateContainer invoiceAdjustmentToCreateContainer = buildBodyParams();
            return createAdjustmentCall(invoiceAdjustmentToCreateContainer, recurring, _callback);
        }

        private InvoiceAdjustmentToCreateContainer buildBodyParams() {
            InvoiceAdjustmentToCreateContainer invoiceAdjustmentToCreateContainer = new InvoiceAdjustmentToCreateContainer();
            invoiceAdjustmentToCreateContainer.data(this.data);
            return invoiceAdjustmentToCreateContainer;
        }

        /**
         * Execute createAdjustment request
         * @return InvoiceAdjustmentCreatedContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public InvoiceAdjustmentCreatedContainer execute() throws ApiException {
            InvoiceAdjustmentToCreateContainer invoiceAdjustmentToCreateContainer = buildBodyParams();
            ApiResponse<InvoiceAdjustmentCreatedContainer> localVarResp = createAdjustmentWithHttpInfo(invoiceAdjustmentToCreateContainer, recurring);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createAdjustment request with HTTP info returned
         * @return ApiResponse&lt;InvoiceAdjustmentCreatedContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InvoiceAdjustmentCreatedContainer> executeWithHttpInfo() throws ApiException {
            InvoiceAdjustmentToCreateContainer invoiceAdjustmentToCreateContainer = buildBodyParams();
            return createAdjustmentWithHttpInfo(invoiceAdjustmentToCreateContainer, recurring);
        }

        /**
         * Execute createAdjustment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InvoiceAdjustmentCreatedContainer> _callback) throws ApiException {
            InvoiceAdjustmentToCreateContainer invoiceAdjustmentToCreateContainer = buildBodyParams();
            return createAdjustmentAsync(invoiceAdjustmentToCreateContainer, recurring, _callback);
        }
    }

    /**
     * Create an invoice adjustment
     * Create an invoice adjustment using this endpoint. For example, you can add a bonus, commission, VAT %, deduction etc. to an invoice.
     * @param invoiceAdjustmentToCreateContainer InvoiceAdjustment object that needs to be created (required)
     * @return CreateAdjustmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAdjustmentRequestBuilder createAdjustment(InvoiceAdjustmentToCreate data) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        return new CreateAdjustmentRequestBuilder(data);
    }
    private okhttp3.Call deleteAdjustmentCall(Double invoiceAdjustmentId, String reason, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/invoice-adjustments/{invoice_adjustment_id}"
            .replace("{" + "invoice_adjustment_id" + "}", localVarApiClient.escapeString(invoiceAdjustmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reason", reason));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAdjustmentValidateBeforeCall(Double invoiceAdjustmentId, String reason, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceAdjustmentId' is set
        if (invoiceAdjustmentId == null) {
            throw new ApiException("Missing the required parameter 'invoiceAdjustmentId' when calling deleteAdjustment(Async)");
        }

        return deleteAdjustmentCall(invoiceAdjustmentId, reason, _callback);

    }


    private ApiResponse<GenericResultDeleted> deleteAdjustmentWithHttpInfo(Double invoiceAdjustmentId, String reason) throws ApiException {
        okhttp3.Call localVarCall = deleteAdjustmentValidateBeforeCall(invoiceAdjustmentId, reason, null);
        Type localVarReturnType = new TypeToken<GenericResultDeleted>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteAdjustmentAsync(Double invoiceAdjustmentId, String reason, final ApiCallback<GenericResultDeleted> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAdjustmentValidateBeforeCall(invoiceAdjustmentId, reason, _callback);
        Type localVarReturnType = new TypeToken<GenericResultDeleted>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteAdjustmentRequestBuilder {
        private final Double invoiceAdjustmentId;
        private String reason;

        private DeleteAdjustmentRequestBuilder(double invoiceAdjustmentId) {
            this.invoiceAdjustmentId = invoiceAdjustmentId;
        }

        /**
         * Set reason
         * @param reason Reason for deleting an existing invoice adjustment (optional)
         * @return DeleteAdjustmentRequestBuilder
         */
        public DeleteAdjustmentRequestBuilder reason(String reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Build call for deleteAdjustment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAdjustmentCall(invoiceAdjustmentId, reason, _callback);
        }


        /**
         * Execute deleteAdjustment request
         * @return GenericResultDeleted
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GenericResultDeleted execute() throws ApiException {
            ApiResponse<GenericResultDeleted> localVarResp = deleteAdjustmentWithHttpInfo(invoiceAdjustmentId, reason);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteAdjustment request with HTTP info returned
         * @return ApiResponse&lt;GenericResultDeleted&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GenericResultDeleted> executeWithHttpInfo() throws ApiException {
            return deleteAdjustmentWithHttpInfo(invoiceAdjustmentId, reason);
        }

        /**
         * Execute deleteAdjustment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GenericResultDeleted> _callback) throws ApiException {
            return deleteAdjustmentAsync(invoiceAdjustmentId, reason, _callback);
        }
    }

    /**
     * Delete an invoice adjustment
     * Delete an existing invoice adjustment.
     * @param invoiceAdjustmentId ID of an existing invoice adjustment (required)
     * @return DeleteAdjustmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAdjustmentRequestBuilder deleteAdjustment(double invoiceAdjustmentId) throws IllegalArgumentException {
        
        return new DeleteAdjustmentRequestBuilder(invoiceAdjustmentId);
    }
    private okhttp3.Call getAttachmentFileUrlCall(Double invoiceAdjustmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/invoice-adjustments/{invoice_adjustment_id}/attachment"
            .replace("{" + "invoice_adjustment_id" + "}", localVarApiClient.escapeString(invoiceAdjustmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAttachmentFileUrlValidateBeforeCall(Double invoiceAdjustmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceAdjustmentId' is set
        if (invoiceAdjustmentId == null) {
            throw new ApiException("Missing the required parameter 'invoiceAdjustmentId' when calling getAttachmentFileUrl(Async)");
        }

        return getAttachmentFileUrlCall(invoiceAdjustmentId, _callback);

    }


    private ApiResponse<InvoiceAdjustmentAttachmentContainer> getAttachmentFileUrlWithHttpInfo(Double invoiceAdjustmentId) throws ApiException {
        okhttp3.Call localVarCall = getAttachmentFileUrlValidateBeforeCall(invoiceAdjustmentId, null);
        Type localVarReturnType = new TypeToken<InvoiceAdjustmentAttachmentContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAttachmentFileUrlAsync(Double invoiceAdjustmentId, final ApiCallback<InvoiceAdjustmentAttachmentContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAttachmentFileUrlValidateBeforeCall(invoiceAdjustmentId, _callback);
        Type localVarReturnType = new TypeToken<InvoiceAdjustmentAttachmentContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAttachmentFileUrlRequestBuilder {
        private final Double invoiceAdjustmentId;

        private GetAttachmentFileUrlRequestBuilder(double invoiceAdjustmentId) {
            this.invoiceAdjustmentId = invoiceAdjustmentId;
        }

        /**
         * Build call for getAttachmentFileUrl
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAttachmentFileUrlCall(invoiceAdjustmentId, _callback);
        }


        /**
         * Execute getAttachmentFileUrl request
         * @return InvoiceAdjustmentAttachmentContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public InvoiceAdjustmentAttachmentContainer execute() throws ApiException {
            ApiResponse<InvoiceAdjustmentAttachmentContainer> localVarResp = getAttachmentFileUrlWithHttpInfo(invoiceAdjustmentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAttachmentFileUrl request with HTTP info returned
         * @return ApiResponse&lt;InvoiceAdjustmentAttachmentContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InvoiceAdjustmentAttachmentContainer> executeWithHttpInfo() throws ApiException {
            return getAttachmentFileUrlWithHttpInfo(invoiceAdjustmentId);
        }

        /**
         * Execute getAttachmentFileUrl request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InvoiceAdjustmentAttachmentContainer> _callback) throws ApiException {
            return getAttachmentFileUrlAsync(invoiceAdjustmentId, _callback);
        }
    }

    /**
     * Retrieve Attachment file url.
     * Retrieve Attachment file url of specified id.
     * @param invoiceAdjustmentId ID of an existing invoice adjustment (required)
     * @return GetAttachmentFileUrlRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetAttachmentFileUrlRequestBuilder getAttachmentFileUrl(double invoiceAdjustmentId) throws IllegalArgumentException {
        
        return new GetAttachmentFileUrlRequestBuilder(invoiceAdjustmentId);
    }
    private okhttp3.Call getLineItemsByContractCall(String contractId, List<ContractTypeEnum> contractTypes, List<InvoiceAdjustmentTypeEnum> types, List<InvoiceAdjustmentStatusEnum> statuses, Double invoiceId, Double reporterId, LocalDate dateFrom, LocalDate dateTo, Double limit, Double offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/invoice-adjustments"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contractTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contract_types", contractTypes));
        }

        if (types != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "types", types));
        }

        if (statuses != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "statuses", statuses));
        }

        if (invoiceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("invoice_id", invoiceId));
        }

        if (reporterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reporter_id", reporterId));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_from", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_to", dateTo));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLineItemsByContractValidateBeforeCall(String contractId, List<ContractTypeEnum> contractTypes, List<InvoiceAdjustmentTypeEnum> types, List<InvoiceAdjustmentStatusEnum> statuses, Double invoiceId, Double reporterId, LocalDate dateFrom, LocalDate dateTo, Double limit, Double offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling getLineItemsByContract(Async)");
        }

        return getLineItemsByContractCall(contractId, contractTypes, types, statuses, invoiceId, reporterId, dateFrom, dateTo, limit, offset, _callback);

    }


    private ApiResponse<InvoiceAdjustmentListContainer> getLineItemsByContractWithHttpInfo(String contractId, List<ContractTypeEnum> contractTypes, List<InvoiceAdjustmentTypeEnum> types, List<InvoiceAdjustmentStatusEnum> statuses, Double invoiceId, Double reporterId, LocalDate dateFrom, LocalDate dateTo, Double limit, Double offset) throws ApiException {
        okhttp3.Call localVarCall = getLineItemsByContractValidateBeforeCall(contractId, contractTypes, types, statuses, invoiceId, reporterId, dateFrom, dateTo, limit, offset, null);
        Type localVarReturnType = new TypeToken<InvoiceAdjustmentListContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLineItemsByContractAsync(String contractId, List<ContractTypeEnum> contractTypes, List<InvoiceAdjustmentTypeEnum> types, List<InvoiceAdjustmentStatusEnum> statuses, Double invoiceId, Double reporterId, LocalDate dateFrom, LocalDate dateTo, Double limit, Double offset, final ApiCallback<InvoiceAdjustmentListContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLineItemsByContractValidateBeforeCall(contractId, contractTypes, types, statuses, invoiceId, reporterId, dateFrom, dateTo, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<InvoiceAdjustmentListContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLineItemsByContractRequestBuilder {
        private final String contractId;
        private List<ContractTypeEnum> contractTypes;
        private List<InvoiceAdjustmentTypeEnum> types;
        private List<InvoiceAdjustmentStatusEnum> statuses;
        private Double invoiceId;
        private Double reporterId;
        private LocalDate dateFrom;
        private LocalDate dateTo;
        private Double limit;
        private Double offset;

        private GetLineItemsByContractRequestBuilder(String contractId) {
            this.contractId = contractId;
        }

        /**
         * Set contractTypes
         * @param contractTypes types of contracts to filter (optional)
         * @return GetLineItemsByContractRequestBuilder
         */
        public GetLineItemsByContractRequestBuilder contractTypes(List<ContractTypeEnum> contractTypes) {
            this.contractTypes = contractTypes;
            return this;
        }
        
        /**
         * Set types
         * @param types types of invoice adjustments to filter (optional)
         * @return GetLineItemsByContractRequestBuilder
         */
        public GetLineItemsByContractRequestBuilder types(List<InvoiceAdjustmentTypeEnum> types) {
            this.types = types;
            return this;
        }
        
        /**
         * Set statuses
         * @param statuses statuses of invoice adjustment to filter (optional)
         * @return GetLineItemsByContractRequestBuilder
         */
        public GetLineItemsByContractRequestBuilder statuses(List<InvoiceAdjustmentStatusEnum> statuses) {
            this.statuses = statuses;
            return this;
        }
        
        /**
         * Set invoiceId
         * @param invoiceId ID of an existing invoice; NOTE: technically ALL query parameters are strings or array of strings (optional)
         * @return GetLineItemsByContractRequestBuilder
         */
        public GetLineItemsByContractRequestBuilder invoiceId(Double invoiceId) {
            this.invoiceId = invoiceId;
            return this;
        }
        
        /**
         * Set reporterId
         * @param reporterId ID of an existing profile; NOTE: technically ALL query parameters are strings or array of strings (optional)
         * @return GetLineItemsByContractRequestBuilder
         */
        public GetLineItemsByContractRequestBuilder reporterId(Double reporterId) {
            this.reporterId = reporterId;
            return this;
        }
        
        /**
         * Set dateFrom
         * @param dateFrom to get invoice adjustments submitted on or after given start date (inclusive) (optional)
         * @return GetLineItemsByContractRequestBuilder
         */
        public GetLineItemsByContractRequestBuilder dateFrom(LocalDate dateFrom) {
            this.dateFrom = dateFrom;
            return this;
        }
        
        /**
         * Set dateTo
         * @param dateTo to get invoice adjustments submitted before given end date (excludes records submitted on this date) (optional)
         * @return GetLineItemsByContractRequestBuilder
         */
        public GetLineItemsByContractRequestBuilder dateTo(LocalDate dateTo) {
            this.dateTo = dateTo;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Return a page of results with given number of records; NOTE: technically ALL query parameters are strings or array of strings (optional, default to 10)
         * @return GetLineItemsByContractRequestBuilder
         */
        public GetLineItemsByContractRequestBuilder limit(Double limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Return a page of results after given index of row; NOTE: technically ALL query parameters are strings or array of strings (optional, default to 0)
         * @return GetLineItemsByContractRequestBuilder
         */
        public GetLineItemsByContractRequestBuilder offset(Double offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getLineItemsByContract
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLineItemsByContractCall(contractId, contractTypes, types, statuses, invoiceId, reporterId, dateFrom, dateTo, limit, offset, _callback);
        }


        /**
         * Execute getLineItemsByContract request
         * @return InvoiceAdjustmentListContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public InvoiceAdjustmentListContainer execute() throws ApiException {
            ApiResponse<InvoiceAdjustmentListContainer> localVarResp = getLineItemsByContractWithHttpInfo(contractId, contractTypes, types, statuses, invoiceId, reporterId, dateFrom, dateTo, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLineItemsByContract request with HTTP info returned
         * @return ApiResponse&lt;InvoiceAdjustmentListContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InvoiceAdjustmentListContainer> executeWithHttpInfo() throws ApiException {
            return getLineItemsByContractWithHttpInfo(contractId, contractTypes, types, statuses, invoiceId, reporterId, dateFrom, dateTo, limit, offset);
        }

        /**
         * Execute getLineItemsByContract request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InvoiceAdjustmentListContainer> _callback) throws ApiException {
            return getLineItemsByContractAsync(contractId, contractTypes, types, statuses, invoiceId, reporterId, dateFrom, dateTo, limit, offset, _callback);
        }
    }

    /**
     * Invoice line items by contract
     * Retrieve invoice line items for a given contract id.
     * @param contractId Deel contract id. (required)
     * @return GetLineItemsByContractRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetLineItemsByContractRequestBuilder getLineItemsByContract(String contractId) throws IllegalArgumentException {
        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        return new GetLineItemsByContractRequestBuilder(contractId);
    }
    private okhttp3.Call listInvoiceAdjustmentsCall(String contractId, List<ContractTypeEnum> contractTypes, List<InvoiceAdjustmentTypeEnum> types, List<InvoiceAdjustmentStatusEnum> statuses, Double invoiceId, Double reporterId, LocalDate dateFrom, LocalDate dateTo, Double limit, Double offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/invoice-adjustments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contractId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contract_id", contractId));
        }

        if (contractTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contract_types", contractTypes));
        }

        if (types != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "types", types));
        }

        if (statuses != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "statuses", statuses));
        }

        if (invoiceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("invoice_id", invoiceId));
        }

        if (reporterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reporter_id", reporterId));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_from", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_to", dateTo));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInvoiceAdjustmentsValidateBeforeCall(String contractId, List<ContractTypeEnum> contractTypes, List<InvoiceAdjustmentTypeEnum> types, List<InvoiceAdjustmentStatusEnum> statuses, Double invoiceId, Double reporterId, LocalDate dateFrom, LocalDate dateTo, Double limit, Double offset, final ApiCallback _callback) throws ApiException {
        return listInvoiceAdjustmentsCall(contractId, contractTypes, types, statuses, invoiceId, reporterId, dateFrom, dateTo, limit, offset, _callback);

    }


    private ApiResponse<InvoiceAdjustmentListContainer> listInvoiceAdjustmentsWithHttpInfo(String contractId, List<ContractTypeEnum> contractTypes, List<InvoiceAdjustmentTypeEnum> types, List<InvoiceAdjustmentStatusEnum> statuses, Double invoiceId, Double reporterId, LocalDate dateFrom, LocalDate dateTo, Double limit, Double offset) throws ApiException {
        okhttp3.Call localVarCall = listInvoiceAdjustmentsValidateBeforeCall(contractId, contractTypes, types, statuses, invoiceId, reporterId, dateFrom, dateTo, limit, offset, null);
        Type localVarReturnType = new TypeToken<InvoiceAdjustmentListContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listInvoiceAdjustmentsAsync(String contractId, List<ContractTypeEnum> contractTypes, List<InvoiceAdjustmentTypeEnum> types, List<InvoiceAdjustmentStatusEnum> statuses, Double invoiceId, Double reporterId, LocalDate dateFrom, LocalDate dateTo, Double limit, Double offset, final ApiCallback<InvoiceAdjustmentListContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = listInvoiceAdjustmentsValidateBeforeCall(contractId, contractTypes, types, statuses, invoiceId, reporterId, dateFrom, dateTo, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<InvoiceAdjustmentListContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListInvoiceAdjustmentsRequestBuilder {
        private String contractId;
        private List<ContractTypeEnum> contractTypes;
        private List<InvoiceAdjustmentTypeEnum> types;
        private List<InvoiceAdjustmentStatusEnum> statuses;
        private Double invoiceId;
        private Double reporterId;
        private LocalDate dateFrom;
        private LocalDate dateTo;
        private Double limit;
        private Double offset;

        private ListInvoiceAdjustmentsRequestBuilder() {
        }

        /**
         * Set contractId
         * @param contractId Id of an Deel contract. (optional)
         * @return ListInvoiceAdjustmentsRequestBuilder
         */
        public ListInvoiceAdjustmentsRequestBuilder contractId(String contractId) {
            this.contractId = contractId;
            return this;
        }
        
        /**
         * Set contractTypes
         * @param contractTypes types of contracts to filter (optional)
         * @return ListInvoiceAdjustmentsRequestBuilder
         */
        public ListInvoiceAdjustmentsRequestBuilder contractTypes(List<ContractTypeEnum> contractTypes) {
            this.contractTypes = contractTypes;
            return this;
        }
        
        /**
         * Set types
         * @param types types of invoice adjustments to filter (optional)
         * @return ListInvoiceAdjustmentsRequestBuilder
         */
        public ListInvoiceAdjustmentsRequestBuilder types(List<InvoiceAdjustmentTypeEnum> types) {
            this.types = types;
            return this;
        }
        
        /**
         * Set statuses
         * @param statuses statuses of invoice adjustment to filter (optional)
         * @return ListInvoiceAdjustmentsRequestBuilder
         */
        public ListInvoiceAdjustmentsRequestBuilder statuses(List<InvoiceAdjustmentStatusEnum> statuses) {
            this.statuses = statuses;
            return this;
        }
        
        /**
         * Set invoiceId
         * @param invoiceId ID of an existing invoice; NOTE: technically ALL query parameters are strings or array of strings (optional)
         * @return ListInvoiceAdjustmentsRequestBuilder
         */
        public ListInvoiceAdjustmentsRequestBuilder invoiceId(Double invoiceId) {
            this.invoiceId = invoiceId;
            return this;
        }
        
        /**
         * Set reporterId
         * @param reporterId ID of an existing profile; NOTE: technically ALL query parameters are strings or array of strings (optional)
         * @return ListInvoiceAdjustmentsRequestBuilder
         */
        public ListInvoiceAdjustmentsRequestBuilder reporterId(Double reporterId) {
            this.reporterId = reporterId;
            return this;
        }
        
        /**
         * Set dateFrom
         * @param dateFrom to get invoice adjustments submitted on or after given start date (inclusive) (optional)
         * @return ListInvoiceAdjustmentsRequestBuilder
         */
        public ListInvoiceAdjustmentsRequestBuilder dateFrom(LocalDate dateFrom) {
            this.dateFrom = dateFrom;
            return this;
        }
        
        /**
         * Set dateTo
         * @param dateTo to get invoice adjustments submitted before given end date (excludes records submitted on this date) (optional)
         * @return ListInvoiceAdjustmentsRequestBuilder
         */
        public ListInvoiceAdjustmentsRequestBuilder dateTo(LocalDate dateTo) {
            this.dateTo = dateTo;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Return a page of results with given number of records; NOTE: technically ALL query parameters are strings or array of strings (optional, default to 10)
         * @return ListInvoiceAdjustmentsRequestBuilder
         */
        public ListInvoiceAdjustmentsRequestBuilder limit(Double limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Return a page of results after given index of row; NOTE: technically ALL query parameters are strings or array of strings (optional, default to 0)
         * @return ListInvoiceAdjustmentsRequestBuilder
         */
        public ListInvoiceAdjustmentsRequestBuilder offset(Double offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for listInvoiceAdjustments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listInvoiceAdjustmentsCall(contractId, contractTypes, types, statuses, invoiceId, reporterId, dateFrom, dateTo, limit, offset, _callback);
        }


        /**
         * Execute listInvoiceAdjustments request
         * @return InvoiceAdjustmentListContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public InvoiceAdjustmentListContainer execute() throws ApiException {
            ApiResponse<InvoiceAdjustmentListContainer> localVarResp = listInvoiceAdjustmentsWithHttpInfo(contractId, contractTypes, types, statuses, invoiceId, reporterId, dateFrom, dateTo, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listInvoiceAdjustments request with HTTP info returned
         * @return ApiResponse&lt;InvoiceAdjustmentListContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InvoiceAdjustmentListContainer> executeWithHttpInfo() throws ApiException {
            return listInvoiceAdjustmentsWithHttpInfo(contractId, contractTypes, types, statuses, invoiceId, reporterId, dateFrom, dateTo, limit, offset);
        }

        /**
         * Execute listInvoiceAdjustments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InvoiceAdjustmentListContainer> _callback) throws ApiException {
            return listInvoiceAdjustmentsAsync(contractId, contractTypes, types, statuses, invoiceId, reporterId, dateFrom, dateTo, limit, offset, _callback);
        }
    }

    /**
     * List invoice adjustments
     * Retrieve invoice adjustments. You can filter the list by providing additional parameters e.g. contract_id, contract_type etc.
     * @return ListInvoiceAdjustmentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public ListInvoiceAdjustmentsRequestBuilder listInvoiceAdjustments() throws IllegalArgumentException {
        return new ListInvoiceAdjustmentsRequestBuilder();
    }
    private okhttp3.Call reviewMultipleCall(InvoiceAdjustmentReviewsToCreateContainer invoiceAdjustmentReviewsToCreateContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invoiceAdjustmentReviewsToCreateContainer;

        // create path and map variables
        String localVarPath = "/invoice-adjustments/many/reviews";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reviewMultipleValidateBeforeCall(InvoiceAdjustmentReviewsToCreateContainer invoiceAdjustmentReviewsToCreateContainer, final ApiCallback _callback) throws ApiException {
        return reviewMultipleCall(invoiceAdjustmentReviewsToCreateContainer, _callback);

    }


    private ApiResponse<GenericResultCreated> reviewMultipleWithHttpInfo(InvoiceAdjustmentReviewsToCreateContainer invoiceAdjustmentReviewsToCreateContainer) throws ApiException {
        okhttp3.Call localVarCall = reviewMultipleValidateBeforeCall(invoiceAdjustmentReviewsToCreateContainer, null);
        Type localVarReturnType = new TypeToken<GenericResultCreated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call reviewMultipleAsync(InvoiceAdjustmentReviewsToCreateContainer invoiceAdjustmentReviewsToCreateContainer, final ApiCallback<GenericResultCreated> _callback) throws ApiException {

        okhttp3.Call localVarCall = reviewMultipleValidateBeforeCall(invoiceAdjustmentReviewsToCreateContainer, _callback);
        Type localVarReturnType = new TypeToken<GenericResultCreated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ReviewMultipleRequestBuilder {
        private final InvoiceAdjustmentReviewsToCreate data;

        private ReviewMultipleRequestBuilder(InvoiceAdjustmentReviewsToCreate data) {
            this.data = data;
        }

        /**
         * Build call for reviewMultiple
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            InvoiceAdjustmentReviewsToCreateContainer invoiceAdjustmentReviewsToCreateContainer = buildBodyParams();
            return reviewMultipleCall(invoiceAdjustmentReviewsToCreateContainer, _callback);
        }

        private InvoiceAdjustmentReviewsToCreateContainer buildBodyParams() {
            InvoiceAdjustmentReviewsToCreateContainer invoiceAdjustmentReviewsToCreateContainer = new InvoiceAdjustmentReviewsToCreateContainer();
            invoiceAdjustmentReviewsToCreateContainer.data(this.data);
            return invoiceAdjustmentReviewsToCreateContainer;
        }

        /**
         * Execute reviewMultiple request
         * @return GenericResultCreated
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GenericResultCreated execute() throws ApiException {
            InvoiceAdjustmentReviewsToCreateContainer invoiceAdjustmentReviewsToCreateContainer = buildBodyParams();
            ApiResponse<GenericResultCreated> localVarResp = reviewMultipleWithHttpInfo(invoiceAdjustmentReviewsToCreateContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute reviewMultiple request with HTTP info returned
         * @return ApiResponse&lt;GenericResultCreated&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GenericResultCreated> executeWithHttpInfo() throws ApiException {
            InvoiceAdjustmentReviewsToCreateContainer invoiceAdjustmentReviewsToCreateContainer = buildBodyParams();
            return reviewMultipleWithHttpInfo(invoiceAdjustmentReviewsToCreateContainer);
        }

        /**
         * Execute reviewMultiple request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GenericResultCreated> _callback) throws ApiException {
            InvoiceAdjustmentReviewsToCreateContainer invoiceAdjustmentReviewsToCreateContainer = buildBodyParams();
            return reviewMultipleAsync(invoiceAdjustmentReviewsToCreateContainer, _callback);
        }
    }

    /**
     * Bulk review invoice adjustments
     * Review multiple invoice adjustments to approve or decline a batch.
     * @return ReviewMultipleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public ReviewMultipleRequestBuilder reviewMultiple(InvoiceAdjustmentReviewsToCreate data) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        return new ReviewMultipleRequestBuilder(data);
    }
    private okhttp3.Call submitAdjustmentReviewCall(Double invoiceAdjustmentId, InvoiceAdjustmentReviewToCreateContainer invoiceAdjustmentReviewToCreateContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invoiceAdjustmentReviewToCreateContainer;

        // create path and map variables
        String localVarPath = "/invoice-adjustments/{invoice_adjustment_id}/reviews"
            .replace("{" + "invoice_adjustment_id" + "}", localVarApiClient.escapeString(invoiceAdjustmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitAdjustmentReviewValidateBeforeCall(Double invoiceAdjustmentId, InvoiceAdjustmentReviewToCreateContainer invoiceAdjustmentReviewToCreateContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceAdjustmentId' is set
        if (invoiceAdjustmentId == null) {
            throw new ApiException("Missing the required parameter 'invoiceAdjustmentId' when calling submitAdjustmentReview(Async)");
        }

        return submitAdjustmentReviewCall(invoiceAdjustmentId, invoiceAdjustmentReviewToCreateContainer, _callback);

    }


    private ApiResponse<GenericResultCreated> submitAdjustmentReviewWithHttpInfo(Double invoiceAdjustmentId, InvoiceAdjustmentReviewToCreateContainer invoiceAdjustmentReviewToCreateContainer) throws ApiException {
        okhttp3.Call localVarCall = submitAdjustmentReviewValidateBeforeCall(invoiceAdjustmentId, invoiceAdjustmentReviewToCreateContainer, null);
        Type localVarReturnType = new TypeToken<GenericResultCreated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call submitAdjustmentReviewAsync(Double invoiceAdjustmentId, InvoiceAdjustmentReviewToCreateContainer invoiceAdjustmentReviewToCreateContainer, final ApiCallback<GenericResultCreated> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitAdjustmentReviewValidateBeforeCall(invoiceAdjustmentId, invoiceAdjustmentReviewToCreateContainer, _callback);
        Type localVarReturnType = new TypeToken<GenericResultCreated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SubmitAdjustmentReviewRequestBuilder {
        private final InvoiceAdjustmentReviewToCreate data;
        private final Double invoiceAdjustmentId;

        private SubmitAdjustmentReviewRequestBuilder(InvoiceAdjustmentReviewToCreate data, double invoiceAdjustmentId) {
            this.data = data;
            this.invoiceAdjustmentId = invoiceAdjustmentId;
        }

        /**
         * Build call for submitAdjustmentReview
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            InvoiceAdjustmentReviewToCreateContainer invoiceAdjustmentReviewToCreateContainer = buildBodyParams();
            return submitAdjustmentReviewCall(invoiceAdjustmentId, invoiceAdjustmentReviewToCreateContainer, _callback);
        }

        private InvoiceAdjustmentReviewToCreateContainer buildBodyParams() {
            InvoiceAdjustmentReviewToCreateContainer invoiceAdjustmentReviewToCreateContainer = new InvoiceAdjustmentReviewToCreateContainer();
            invoiceAdjustmentReviewToCreateContainer.data(this.data);
            return invoiceAdjustmentReviewToCreateContainer;
        }

        /**
         * Execute submitAdjustmentReview request
         * @return GenericResultCreated
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GenericResultCreated execute() throws ApiException {
            InvoiceAdjustmentReviewToCreateContainer invoiceAdjustmentReviewToCreateContainer = buildBodyParams();
            ApiResponse<GenericResultCreated> localVarResp = submitAdjustmentReviewWithHttpInfo(invoiceAdjustmentId, invoiceAdjustmentReviewToCreateContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute submitAdjustmentReview request with HTTP info returned
         * @return ApiResponse&lt;GenericResultCreated&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GenericResultCreated> executeWithHttpInfo() throws ApiException {
            InvoiceAdjustmentReviewToCreateContainer invoiceAdjustmentReviewToCreateContainer = buildBodyParams();
            return submitAdjustmentReviewWithHttpInfo(invoiceAdjustmentId, invoiceAdjustmentReviewToCreateContainer);
        }

        /**
         * Execute submitAdjustmentReview request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GenericResultCreated> _callback) throws ApiException {
            InvoiceAdjustmentReviewToCreateContainer invoiceAdjustmentReviewToCreateContainer = buildBodyParams();
            return submitAdjustmentReviewAsync(invoiceAdjustmentId, invoiceAdjustmentReviewToCreateContainer, _callback);
        }
    }

    /**
     * Review an invoice adjustment
     * Review an invoice adjustment to approve or decline it.
     * @param invoiceAdjustmentId ID of an existing invoice adjustment (required)
     * @return SubmitAdjustmentReviewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public SubmitAdjustmentReviewRequestBuilder submitAdjustmentReview(InvoiceAdjustmentReviewToCreate data, double invoiceAdjustmentId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        
        return new SubmitAdjustmentReviewRequestBuilder(data, invoiceAdjustmentId);
    }
    private okhttp3.Call updateAdjustmentByIdCall(Double invoiceAdjustmentId, InvoiceAdjustmentToUpdateContainer invoiceAdjustmentToUpdateContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invoiceAdjustmentToUpdateContainer;

        // create path and map variables
        String localVarPath = "/invoice-adjustments/{invoice_adjustment_id}"
            .replace("{" + "invoice_adjustment_id" + "}", localVarApiClient.escapeString(invoiceAdjustmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAdjustmentByIdValidateBeforeCall(Double invoiceAdjustmentId, InvoiceAdjustmentToUpdateContainer invoiceAdjustmentToUpdateContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceAdjustmentId' is set
        if (invoiceAdjustmentId == null) {
            throw new ApiException("Missing the required parameter 'invoiceAdjustmentId' when calling updateAdjustmentById(Async)");
        }

        // verify the required parameter 'invoiceAdjustmentToUpdateContainer' is set
        if (invoiceAdjustmentToUpdateContainer == null) {
            throw new ApiException("Missing the required parameter 'invoiceAdjustmentToUpdateContainer' when calling updateAdjustmentById(Async)");
        }

        return updateAdjustmentByIdCall(invoiceAdjustmentId, invoiceAdjustmentToUpdateContainer, _callback);

    }


    private ApiResponse<GenericResultUpdated> updateAdjustmentByIdWithHttpInfo(Double invoiceAdjustmentId, InvoiceAdjustmentToUpdateContainer invoiceAdjustmentToUpdateContainer) throws ApiException {
        okhttp3.Call localVarCall = updateAdjustmentByIdValidateBeforeCall(invoiceAdjustmentId, invoiceAdjustmentToUpdateContainer, null);
        Type localVarReturnType = new TypeToken<GenericResultUpdated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAdjustmentByIdAsync(Double invoiceAdjustmentId, InvoiceAdjustmentToUpdateContainer invoiceAdjustmentToUpdateContainer, final ApiCallback<GenericResultUpdated> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAdjustmentByIdValidateBeforeCall(invoiceAdjustmentId, invoiceAdjustmentToUpdateContainer, _callback);
        Type localVarReturnType = new TypeToken<GenericResultUpdated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateAdjustmentByIdRequestBuilder {
        private final InvoiceAdjustmentToUpdate data;
        private final Double invoiceAdjustmentId;

        private UpdateAdjustmentByIdRequestBuilder(InvoiceAdjustmentToUpdate data, double invoiceAdjustmentId) {
            this.data = data;
            this.invoiceAdjustmentId = invoiceAdjustmentId;
        }

        /**
         * Build call for updateAdjustmentById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            InvoiceAdjustmentToUpdateContainer invoiceAdjustmentToUpdateContainer = buildBodyParams();
            return updateAdjustmentByIdCall(invoiceAdjustmentId, invoiceAdjustmentToUpdateContainer, _callback);
        }

        private InvoiceAdjustmentToUpdateContainer buildBodyParams() {
            InvoiceAdjustmentToUpdateContainer invoiceAdjustmentToUpdateContainer = new InvoiceAdjustmentToUpdateContainer();
            invoiceAdjustmentToUpdateContainer.data(this.data);
            return invoiceAdjustmentToUpdateContainer;
        }

        /**
         * Execute updateAdjustmentById request
         * @return GenericResultUpdated
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GenericResultUpdated execute() throws ApiException {
            InvoiceAdjustmentToUpdateContainer invoiceAdjustmentToUpdateContainer = buildBodyParams();
            ApiResponse<GenericResultUpdated> localVarResp = updateAdjustmentByIdWithHttpInfo(invoiceAdjustmentId, invoiceAdjustmentToUpdateContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateAdjustmentById request with HTTP info returned
         * @return ApiResponse&lt;GenericResultUpdated&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GenericResultUpdated> executeWithHttpInfo() throws ApiException {
            InvoiceAdjustmentToUpdateContainer invoiceAdjustmentToUpdateContainer = buildBodyParams();
            return updateAdjustmentByIdWithHttpInfo(invoiceAdjustmentId, invoiceAdjustmentToUpdateContainer);
        }

        /**
         * Execute updateAdjustmentById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GenericResultUpdated> _callback) throws ApiException {
            InvoiceAdjustmentToUpdateContainer invoiceAdjustmentToUpdateContainer = buildBodyParams();
            return updateAdjustmentByIdAsync(invoiceAdjustmentId, invoiceAdjustmentToUpdateContainer, _callback);
        }
    }

    /**
     * Update an invoice adjustment
     * Update an existing invoice adjustment. It is not possible to update VAT adjustments, we recommend you to delete the existing VAT adjust and create a new one.
     * @param invoiceAdjustmentId ID of an existing invoice adjustment (required)
     * @param invoiceAdjustmentToUpdateContainer InvoiceAdjustment object that needs to be updated (required)
     * @return UpdateAdjustmentByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAdjustmentByIdRequestBuilder updateAdjustmentById(InvoiceAdjustmentToUpdate data, double invoiceAdjustmentId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        
        return new UpdateAdjustmentByIdRequestBuilder(data, invoiceAdjustmentId);
    }
}
