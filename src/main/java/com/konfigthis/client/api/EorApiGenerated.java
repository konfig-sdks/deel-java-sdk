/*
 * Deel REST API
 * API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EORContractBenefitsContainer;
import com.konfigthis.client.model.EORPayslipDownloadUrlContainer;
import com.konfigthis.client.model.EORPayslipsListContainer;
import com.konfigthis.client.model.EorContractCreatedContainer;
import com.konfigthis.client.model.EorContractToCreate;
import com.konfigthis.client.model.EorContractToCreateContainer;
import com.konfigthis.client.model.EorCountryValidationsContainer;
import com.konfigthis.client.model.EorEmployeeCostCalculationRequestBody;
import com.konfigthis.client.model.EorEmployeeCostCalculationRequestBodyContainer;
import com.konfigthis.client.model.EorEmployeeCostCalculationResponseContainer;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EorApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EorApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EorApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call calculateEmployeeCostsCall(EorEmployeeCostCalculationRequestBodyContainer eorEmployeeCostCalculationRequestBodyContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = eorEmployeeCostCalculationRequestBodyContainer;

        // create path and map variables
        String localVarPath = "/eor/employment_cost";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculateEmployeeCostsValidateBeforeCall(EorEmployeeCostCalculationRequestBodyContainer eorEmployeeCostCalculationRequestBodyContainer, final ApiCallback _callback) throws ApiException {
        return calculateEmployeeCostsCall(eorEmployeeCostCalculationRequestBodyContainer, _callback);

    }


    private ApiResponse<EorEmployeeCostCalculationResponseContainer> calculateEmployeeCostsWithHttpInfo(EorEmployeeCostCalculationRequestBodyContainer eorEmployeeCostCalculationRequestBodyContainer) throws ApiException {
        okhttp3.Call localVarCall = calculateEmployeeCostsValidateBeforeCall(eorEmployeeCostCalculationRequestBodyContainer, null);
        Type localVarReturnType = new TypeToken<EorEmployeeCostCalculationResponseContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call calculateEmployeeCostsAsync(EorEmployeeCostCalculationRequestBodyContainer eorEmployeeCostCalculationRequestBodyContainer, final ApiCallback<EorEmployeeCostCalculationResponseContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculateEmployeeCostsValidateBeforeCall(eorEmployeeCostCalculationRequestBodyContainer, _callback);
        Type localVarReturnType = new TypeToken<EorEmployeeCostCalculationResponseContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CalculateEmployeeCostsRequestBuilder {
        private final EorEmployeeCostCalculationRequestBody data;

        private CalculateEmployeeCostsRequestBuilder(EorEmployeeCostCalculationRequestBody data) {
            this.data = data;
        }

        /**
         * Build call for calculateEmployeeCosts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EorEmployeeCostCalculationRequestBodyContainer eorEmployeeCostCalculationRequestBodyContainer = buildBodyParams();
            return calculateEmployeeCostsCall(eorEmployeeCostCalculationRequestBodyContainer, _callback);
        }

        private EorEmployeeCostCalculationRequestBodyContainer buildBodyParams() {
            EorEmployeeCostCalculationRequestBodyContainer eorEmployeeCostCalculationRequestBodyContainer = new EorEmployeeCostCalculationRequestBodyContainer();
            eorEmployeeCostCalculationRequestBodyContainer.data(this.data);
            return eorEmployeeCostCalculationRequestBodyContainer;
        }

        /**
         * Execute calculateEmployeeCosts request
         * @return EorEmployeeCostCalculationResponseContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public EorEmployeeCostCalculationResponseContainer execute() throws ApiException {
            EorEmployeeCostCalculationRequestBodyContainer eorEmployeeCostCalculationRequestBodyContainer = buildBodyParams();
            ApiResponse<EorEmployeeCostCalculationResponseContainer> localVarResp = calculateEmployeeCostsWithHttpInfo(eorEmployeeCostCalculationRequestBodyContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute calculateEmployeeCosts request with HTTP info returned
         * @return ApiResponse&lt;EorEmployeeCostCalculationResponseContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EorEmployeeCostCalculationResponseContainer> executeWithHttpInfo() throws ApiException {
            EorEmployeeCostCalculationRequestBodyContainer eorEmployeeCostCalculationRequestBodyContainer = buildBodyParams();
            return calculateEmployeeCostsWithHttpInfo(eorEmployeeCostCalculationRequestBodyContainer);
        }

        /**
         * Execute calculateEmployeeCosts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EorEmployeeCostCalculationResponseContainer> _callback) throws ApiException {
            EorEmployeeCostCalculationRequestBodyContainer eorEmployeeCostCalculationRequestBodyContainer = buildBodyParams();
            return calculateEmployeeCostsAsync(eorEmployeeCostCalculationRequestBodyContainer, _callback);
        }
    }

    /**
     * Employee Cost Calculator
     * Determine EOR employee costs across the globe.
     * @return CalculateEmployeeCostsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public CalculateEmployeeCostsRequestBuilder calculateEmployeeCosts(EorEmployeeCostCalculationRequestBody data) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        return new CalculateEmployeeCostsRequestBuilder(data);
    }
    private okhttp3.Call createContractQuoteCall(EorContractToCreateContainer eorContractToCreateContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = eorContractToCreateContainer;

        // create path and map variables
        String localVarPath = "/eor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createContractQuoteValidateBeforeCall(EorContractToCreateContainer eorContractToCreateContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eorContractToCreateContainer' is set
        if (eorContractToCreateContainer == null) {
            throw new ApiException("Missing the required parameter 'eorContractToCreateContainer' when calling createContractQuote(Async)");
        }

        return createContractQuoteCall(eorContractToCreateContainer, _callback);

    }


    private ApiResponse<EorContractCreatedContainer> createContractQuoteWithHttpInfo(EorContractToCreateContainer eorContractToCreateContainer) throws ApiException {
        okhttp3.Call localVarCall = createContractQuoteValidateBeforeCall(eorContractToCreateContainer, null);
        Type localVarReturnType = new TypeToken<EorContractCreatedContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createContractQuoteAsync(EorContractToCreateContainer eorContractToCreateContainer, final ApiCallback<EorContractCreatedContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = createContractQuoteValidateBeforeCall(eorContractToCreateContainer, _callback);
        Type localVarReturnType = new TypeToken<EorContractCreatedContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateContractQuoteRequestBuilder {
        private final EorContractToCreate data;

        private CreateContractQuoteRequestBuilder(EorContractToCreate data) {
            this.data = data;
        }

        /**
         * Build call for createContractQuote
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EorContractToCreateContainer eorContractToCreateContainer = buildBodyParams();
            return createContractQuoteCall(eorContractToCreateContainer, _callback);
        }

        private EorContractToCreateContainer buildBodyParams() {
            EorContractToCreateContainer eorContractToCreateContainer = new EorContractToCreateContainer();
            eorContractToCreateContainer.data(this.data);
            return eorContractToCreateContainer;
        }

        /**
         * Execute createContractQuote request
         * @return EorContractCreatedContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public EorContractCreatedContainer execute() throws ApiException {
            EorContractToCreateContainer eorContractToCreateContainer = buildBodyParams();
            ApiResponse<EorContractCreatedContainer> localVarResp = createContractQuoteWithHttpInfo(eorContractToCreateContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createContractQuote request with HTTP info returned
         * @return ApiResponse&lt;EorContractCreatedContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EorContractCreatedContainer> executeWithHttpInfo() throws ApiException {
            EorContractToCreateContainer eorContractToCreateContainer = buildBodyParams();
            return createContractQuoteWithHttpInfo(eorContractToCreateContainer);
        }

        /**
         * Execute createContractQuote request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EorContractCreatedContainer> _callback) throws ApiException {
            EorContractToCreateContainer eorContractToCreateContainer = buildBodyParams();
            return createContractQuoteAsync(eorContractToCreateContainer, _callback);
        }
    }

    /**
     * Create an EOR contract
     * Create an Employee of Record (EOR) contract quote. The endpoints creates a contract quote request. Deel will process the information and get back with a quote for this contract.
     * @param eorContractToCreateContainer Employee (eor) contract object that needs to be created (required)
     * @return CreateContractQuoteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public CreateContractQuoteRequestBuilder createContractQuote(EorContractToCreate data) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        return new CreateContractQuoteRequestBuilder(data);
    }
    private okhttp3.Call getContractBenefitsCall(String contractId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eor/{contract_id}/benefits"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContractBenefitsValidateBeforeCall(String contractId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling getContractBenefits(Async)");
        }

        return getContractBenefitsCall(contractId, _callback);

    }


    private ApiResponse<EORContractBenefitsContainer> getContractBenefitsWithHttpInfo(String contractId) throws ApiException {
        okhttp3.Call localVarCall = getContractBenefitsValidateBeforeCall(contractId, null);
        Type localVarReturnType = new TypeToken<EORContractBenefitsContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getContractBenefitsAsync(String contractId, final ApiCallback<EORContractBenefitsContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContractBenefitsValidateBeforeCall(contractId, _callback);
        Type localVarReturnType = new TypeToken<EORContractBenefitsContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetContractBenefitsRequestBuilder {
        private final String contractId;

        private GetContractBenefitsRequestBuilder(String contractId) {
            this.contractId = contractId;
        }

        /**
         * Build call for getContractBenefits
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getContractBenefitsCall(contractId, _callback);
        }


        /**
         * Execute getContractBenefits request
         * @return EORContractBenefitsContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public EORContractBenefitsContainer execute() throws ApiException {
            ApiResponse<EORContractBenefitsContainer> localVarResp = getContractBenefitsWithHttpInfo(contractId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getContractBenefits request with HTTP info returned
         * @return ApiResponse&lt;EORContractBenefitsContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EORContractBenefitsContainer> executeWithHttpInfo() throws ApiException {
            return getContractBenefitsWithHttpInfo(contractId);
        }

        /**
         * Execute getContractBenefits request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EORContractBenefitsContainer> _callback) throws ApiException {
            return getContractBenefitsAsync(contractId, _callback);
        }
    }

    /**
     * Get EOR contract benefits
     * Retrieve EOR contract benefits
     * @param contractId Deel contract id. (required)
     * @return GetContractBenefitsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetContractBenefitsRequestBuilder getContractBenefits(String contractId) throws IllegalArgumentException {
        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        return new GetContractBenefitsRequestBuilder(contractId);
    }
    private okhttp3.Call getCountryGuideCall(String countryCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eor/validations/{country_code}"
            .replace("{" + "country_code" + "}", localVarApiClient.escapeString(countryCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCountryGuideValidateBeforeCall(String countryCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'countryCode' is set
        if (countryCode == null) {
            throw new ApiException("Missing the required parameter 'countryCode' when calling getCountryGuide(Async)");
        }

        return getCountryGuideCall(countryCode, _callback);

    }


    private ApiResponse<EorCountryValidationsContainer> getCountryGuideWithHttpInfo(String countryCode) throws ApiException {
        okhttp3.Call localVarCall = getCountryGuideValidateBeforeCall(countryCode, null);
        Type localVarReturnType = new TypeToken<EorCountryValidationsContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCountryGuideAsync(String countryCode, final ApiCallback<EorCountryValidationsContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCountryGuideValidateBeforeCall(countryCode, _callback);
        Type localVarReturnType = new TypeToken<EorCountryValidationsContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCountryGuideRequestBuilder {
        private final String countryCode;

        private GetCountryGuideRequestBuilder(String countryCode) {
            this.countryCode = countryCode;
        }

        /**
         * Build call for getCountryGuide
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCountryGuideCall(countryCode, _callback);
        }


        /**
         * Execute getCountryGuide request
         * @return EorCountryValidationsContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public EorCountryValidationsContainer execute() throws ApiException {
            ApiResponse<EorCountryValidationsContainer> localVarResp = getCountryGuideWithHttpInfo(countryCode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCountryGuide request with HTTP info returned
         * @return ApiResponse&lt;EorCountryValidationsContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EorCountryValidationsContainer> executeWithHttpInfo() throws ApiException {
            return getCountryGuideWithHttpInfo(countryCode);
        }

        /**
         * Execute getCountryGuide request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EorCountryValidationsContainer> _callback) throws ApiException {
            return getCountryGuideAsync(countryCode, _callback);
        }
    }

    /**
     * Retrieve country guide
     * Retrieve the hiring guide data for a country. This data can be used to create Employee of Record (EOR) contract quotes.
     * @param countryCode Country code. (required)
     * @return GetCountryGuideRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetCountryGuideRequestBuilder getCountryGuide(String countryCode) throws IllegalArgumentException {
        if (countryCode == null) throw new IllegalArgumentException("\"countryCode\" is required but got null");
            if (countryCode != null && countryCode.length() < 2) {
              throw new IllegalArgumentException("Invalid value for countryCode. Length must be greater than or equal to 2.");
            }

        return new GetCountryGuideRequestBuilder(countryCode);
    }
    private okhttp3.Call getEmployeePayslipsCall(String workerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eor/workers/{worker_id}/payslips"
            .replace("{" + "worker_id" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmployeePayslipsValidateBeforeCall(String workerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling getEmployeePayslips(Async)");
        }

        return getEmployeePayslipsCall(workerId, _callback);

    }


    private ApiResponse<EORPayslipsListContainer> getEmployeePayslipsWithHttpInfo(String workerId) throws ApiException {
        okhttp3.Call localVarCall = getEmployeePayslipsValidateBeforeCall(workerId, null);
        Type localVarReturnType = new TypeToken<EORPayslipsListContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmployeePayslipsAsync(String workerId, final ApiCallback<EORPayslipsListContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmployeePayslipsValidateBeforeCall(workerId, _callback);
        Type localVarReturnType = new TypeToken<EORPayslipsListContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEmployeePayslipsRequestBuilder {
        private final String workerId;

        private GetEmployeePayslipsRequestBuilder(String workerId) {
            this.workerId = workerId;
        }

        /**
         * Build call for getEmployeePayslips
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmployeePayslipsCall(workerId, _callback);
        }


        /**
         * Execute getEmployeePayslips request
         * @return EORPayslipsListContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public EORPayslipsListContainer execute() throws ApiException {
            ApiResponse<EORPayslipsListContainer> localVarResp = getEmployeePayslipsWithHttpInfo(workerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEmployeePayslips request with HTTP info returned
         * @return ApiResponse&lt;EORPayslipsListContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EORPayslipsListContainer> executeWithHttpInfo() throws ApiException {
            return getEmployeePayslipsWithHttpInfo(workerId);
        }

        /**
         * Execute getEmployeePayslips request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EORPayslipsListContainer> _callback) throws ApiException {
            return getEmployeePayslipsAsync(workerId, _callback);
        }
    }

    /**
     * Retrieve employee payslips
     * Get of payslips for an employee.
     * @param workerId Unique identifier for a worker. (required)
     * @return GetEmployeePayslipsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetEmployeePayslipsRequestBuilder getEmployeePayslips(String workerId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new GetEmployeePayslipsRequestBuilder(workerId);
    }
    private okhttp3.Call getPayslipDownloadCall(String workerId, String payslipId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eor/workers/{worker_id}/payslips/{payslip_id}/download"
            .replace("{" + "worker_id" + "}", localVarApiClient.escapeString(workerId.toString()))
            .replace("{" + "payslip_id" + "}", localVarApiClient.escapeString(payslipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayslipDownloadValidateBeforeCall(String workerId, String payslipId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling getPayslipDownload(Async)");
        }

        // verify the required parameter 'payslipId' is set
        if (payslipId == null) {
            throw new ApiException("Missing the required parameter 'payslipId' when calling getPayslipDownload(Async)");
        }

        return getPayslipDownloadCall(workerId, payslipId, _callback);

    }


    private ApiResponse<EORPayslipDownloadUrlContainer> getPayslipDownloadWithHttpInfo(String workerId, String payslipId) throws ApiException {
        okhttp3.Call localVarCall = getPayslipDownloadValidateBeforeCall(workerId, payslipId, null);
        Type localVarReturnType = new TypeToken<EORPayslipDownloadUrlContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPayslipDownloadAsync(String workerId, String payslipId, final ApiCallback<EORPayslipDownloadUrlContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayslipDownloadValidateBeforeCall(workerId, payslipId, _callback);
        Type localVarReturnType = new TypeToken<EORPayslipDownloadUrlContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPayslipDownloadRequestBuilder {
        private final String workerId;
        private final String payslipId;

        private GetPayslipDownloadRequestBuilder(String workerId, String payslipId) {
            this.workerId = workerId;
            this.payslipId = payslipId;
        }

        /**
         * Build call for getPayslipDownload
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPayslipDownloadCall(workerId, payslipId, _callback);
        }


        /**
         * Execute getPayslipDownload request
         * @return EORPayslipDownloadUrlContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public EORPayslipDownloadUrlContainer execute() throws ApiException {
            ApiResponse<EORPayslipDownloadUrlContainer> localVarResp = getPayslipDownloadWithHttpInfo(workerId, payslipId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPayslipDownload request with HTTP info returned
         * @return ApiResponse&lt;EORPayslipDownloadUrlContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EORPayslipDownloadUrlContainer> executeWithHttpInfo() throws ApiException {
            return getPayslipDownloadWithHttpInfo(workerId, payslipId);
        }

        /**
         * Execute getPayslipDownload request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EORPayslipDownloadUrlContainer> _callback) throws ApiException {
            return getPayslipDownloadAsync(workerId, payslipId, _callback);
        }
    }

    /**
     * Download payslip PDF
     * Get download url for EOR payslip.
     * @param workerId Unique identifier for a worker. (required)
     * @param payslipId Unique identifier for a payslip. (required)
     * @return GetPayslipDownloadRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetPayslipDownloadRequestBuilder getPayslipDownload(String workerId, String payslipId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        if (payslipId == null) throw new IllegalArgumentException("\"payslipId\" is required but got null");
            

        return new GetPayslipDownloadRequestBuilder(workerId, payslipId);
    }
}
