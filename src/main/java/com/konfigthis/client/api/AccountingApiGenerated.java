/*
 * Deel REST API
 * API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.DeelInvoiceListContainer;
import com.konfigthis.client.model.InvoiceDownloadLinkContainer;
import com.konfigthis.client.model.InvoiceListContainer;
import java.time.LocalDate;
import com.konfigthis.client.model.PaymentBreakDownContainer;
import com.konfigthis.client.model.PaymentListContainer;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AccountingApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountingApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AccountingApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getDeelInvoicesCall(Double limit, Double offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/invoices/deel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeelInvoicesValidateBeforeCall(Double limit, Double offset, final ApiCallback _callback) throws ApiException {
        return getDeelInvoicesCall(limit, offset, _callback);

    }


    private ApiResponse<DeelInvoiceListContainer> getDeelInvoicesWithHttpInfo(Double limit, Double offset) throws ApiException {
        okhttp3.Call localVarCall = getDeelInvoicesValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<DeelInvoiceListContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDeelInvoicesAsync(Double limit, Double offset, final ApiCallback<DeelInvoiceListContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeelInvoicesValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DeelInvoiceListContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDeelInvoicesRequestBuilder {
        private Double limit;
        private Double offset;

        private GetDeelInvoicesRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit Return a page of results with given number of records; NOTE: technically ALL query parameters are strings or array of strings (optional, default to 10)
         * @return GetDeelInvoicesRequestBuilder
         */
        public GetDeelInvoicesRequestBuilder limit(Double limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Return a page of results after given index of row; NOTE: technically ALL query parameters are strings or array of strings (optional, default to 0)
         * @return GetDeelInvoicesRequestBuilder
         */
        public GetDeelInvoicesRequestBuilder offset(Double offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getDeelInvoices
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDeelInvoicesCall(limit, offset, _callback);
        }


        /**
         * Execute getDeelInvoices request
         * @return DeelInvoiceListContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public DeelInvoiceListContainer execute() throws ApiException {
            ApiResponse<DeelInvoiceListContainer> localVarResp = getDeelInvoicesWithHttpInfo(limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDeelInvoices request with HTTP info returned
         * @return ApiResponse&lt;DeelInvoiceListContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeelInvoiceListContainer> executeWithHttpInfo() throws ApiException {
            return getDeelInvoicesWithHttpInfo(limit, offset);
        }

        /**
         * Execute getDeelInvoices request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeelInvoiceListContainer> _callback) throws ApiException {
            return getDeelInvoicesAsync(limit, offset, _callback);
        }
    }

    /**
     * Retrieve Deel invoices
     * Retrieve a list of invoices related to Deel fees.
     * @return GetDeelInvoicesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetDeelInvoicesRequestBuilder getDeelInvoices() throws IllegalArgumentException {
        return new GetDeelInvoicesRequestBuilder();
    }
    private okhttp3.Call getInvoicePdfDownloadLinkCall(String invoiceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/invoices/{invoice_id}/download"
            .replace("{" + "invoice_id" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInvoicePdfDownloadLinkValidateBeforeCall(String invoiceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling getInvoicePdfDownloadLink(Async)");
        }

        return getInvoicePdfDownloadLinkCall(invoiceId, _callback);

    }


    private ApiResponse<InvoiceDownloadLinkContainer> getInvoicePdfDownloadLinkWithHttpInfo(String invoiceId) throws ApiException {
        okhttp3.Call localVarCall = getInvoicePdfDownloadLinkValidateBeforeCall(invoiceId, null);
        Type localVarReturnType = new TypeToken<InvoiceDownloadLinkContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInvoicePdfDownloadLinkAsync(String invoiceId, final ApiCallback<InvoiceDownloadLinkContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInvoicePdfDownloadLinkValidateBeforeCall(invoiceId, _callback);
        Type localVarReturnType = new TypeToken<InvoiceDownloadLinkContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInvoicePdfDownloadLinkRequestBuilder {
        private final String invoiceId;

        private GetInvoicePdfDownloadLinkRequestBuilder(String invoiceId) {
            this.invoiceId = invoiceId;
        }

        /**
         * Build call for getInvoicePdfDownloadLink
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInvoicePdfDownloadLinkCall(invoiceId, _callback);
        }


        /**
         * Execute getInvoicePdfDownloadLink request
         * @return InvoiceDownloadLinkContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public InvoiceDownloadLinkContainer execute() throws ApiException {
            ApiResponse<InvoiceDownloadLinkContainer> localVarResp = getInvoicePdfDownloadLinkWithHttpInfo(invoiceId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInvoicePdfDownloadLink request with HTTP info returned
         * @return ApiResponse&lt;InvoiceDownloadLinkContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InvoiceDownloadLinkContainer> executeWithHttpInfo() throws ApiException {
            return getInvoicePdfDownloadLinkWithHttpInfo(invoiceId);
        }

        /**
         * Execute getInvoicePdfDownloadLink request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InvoiceDownloadLinkContainer> _callback) throws ApiException {
            return getInvoicePdfDownloadLinkAsync(invoiceId, _callback);
        }
    }

    /**
     * Download invoice PDF
     * Get link to download the invoice PDF.
     * @param invoiceId ID of an existing invoice (required)
     * @return GetInvoicePdfDownloadLinkRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetInvoicePdfDownloadLinkRequestBuilder getInvoicePdfDownloadLink(String invoiceId) throws IllegalArgumentException {
        if (invoiceId == null) throw new IllegalArgumentException("\"invoiceId\" is required but got null");
            

        return new GetInvoicePdfDownloadLinkRequestBuilder(invoiceId);
    }
    private okhttp3.Call getPaidInvoicesCall(String issuedFromDate, String issuedToDate, Double limit, Double offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/invoices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (issuedFromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("issued_from_date", issuedFromDate));
        }

        if (issuedToDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("issued_to_date", issuedToDate));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaidInvoicesValidateBeforeCall(String issuedFromDate, String issuedToDate, Double limit, Double offset, final ApiCallback _callback) throws ApiException {
        return getPaidInvoicesCall(issuedFromDate, issuedToDate, limit, offset, _callback);

    }


    private ApiResponse<InvoiceListContainer> getPaidInvoicesWithHttpInfo(String issuedFromDate, String issuedToDate, Double limit, Double offset) throws ApiException {
        okhttp3.Call localVarCall = getPaidInvoicesValidateBeforeCall(issuedFromDate, issuedToDate, limit, offset, null);
        Type localVarReturnType = new TypeToken<InvoiceListContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPaidInvoicesAsync(String issuedFromDate, String issuedToDate, Double limit, Double offset, final ApiCallback<InvoiceListContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaidInvoicesValidateBeforeCall(issuedFromDate, issuedToDate, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<InvoiceListContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPaidInvoicesRequestBuilder {
        private String issuedFromDate;
        private String issuedToDate;
        private Double limit;
        private Double offset;

        private GetPaidInvoicesRequestBuilder() {
        }

        /**
         * Set issuedFromDate
         * @param issuedFromDate to get records created after given issue date (optional)
         * @return GetPaidInvoicesRequestBuilder
         */
        public GetPaidInvoicesRequestBuilder issuedFromDate(String issuedFromDate) {
            this.issuedFromDate = issuedFromDate;
            return this;
        }
        
        /**
         * Set issuedToDate
         * @param issuedToDate to get records created before given issued date (optional)
         * @return GetPaidInvoicesRequestBuilder
         */
        public GetPaidInvoicesRequestBuilder issuedToDate(String issuedToDate) {
            this.issuedToDate = issuedToDate;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Return a page of results with given number of records; NOTE: technically ALL query parameters are strings or array of strings (optional, default to 10)
         * @return GetPaidInvoicesRequestBuilder
         */
        public GetPaidInvoicesRequestBuilder limit(Double limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Return a page of results after given index of row; NOTE: technically ALL query parameters are strings or array of strings (optional, default to 0)
         * @return GetPaidInvoicesRequestBuilder
         */
        public GetPaidInvoicesRequestBuilder offset(Double offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getPaidInvoices
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPaidInvoicesCall(issuedFromDate, issuedToDate, limit, offset, _callback);
        }


        /**
         * Execute getPaidInvoices request
         * @return InvoiceListContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public InvoiceListContainer execute() throws ApiException {
            ApiResponse<InvoiceListContainer> localVarResp = getPaidInvoicesWithHttpInfo(issuedFromDate, issuedToDate, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPaidInvoices request with HTTP info returned
         * @return ApiResponse&lt;InvoiceListContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InvoiceListContainer> executeWithHttpInfo() throws ApiException {
            return getPaidInvoicesWithHttpInfo(issuedFromDate, issuedToDate, limit, offset);
        }

        /**
         * Execute getPaidInvoices request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InvoiceListContainer> _callback) throws ApiException {
            return getPaidInvoicesAsync(issuedFromDate, issuedToDate, limit, offset, _callback);
        }
    }

    /**
     * Retrieve invoices
     * Retrieve a list of paid invoices for your workforce.
     * @return GetPaidInvoicesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetPaidInvoicesRequestBuilder getPaidInvoices() throws IllegalArgumentException {
        return new GetPaidInvoicesRequestBuilder();
    }
    private okhttp3.Call getPaymentBreakdownCall(String paymentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payments/{payment_id}/breakdown"
            .replace("{" + "payment_id" + "}", localVarApiClient.escapeString(paymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentBreakdownValidateBeforeCall(String paymentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentId' is set
        if (paymentId == null) {
            throw new ApiException("Missing the required parameter 'paymentId' when calling getPaymentBreakdown(Async)");
        }

        return getPaymentBreakdownCall(paymentId, _callback);

    }


    private ApiResponse<PaymentBreakDownContainer> getPaymentBreakdownWithHttpInfo(String paymentId) throws ApiException {
        okhttp3.Call localVarCall = getPaymentBreakdownValidateBeforeCall(paymentId, null);
        Type localVarReturnType = new TypeToken<PaymentBreakDownContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPaymentBreakdownAsync(String paymentId, final ApiCallback<PaymentBreakDownContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentBreakdownValidateBeforeCall(paymentId, _callback);
        Type localVarReturnType = new TypeToken<PaymentBreakDownContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPaymentBreakdownRequestBuilder {
        private final String paymentId;

        private GetPaymentBreakdownRequestBuilder(String paymentId) {
            this.paymentId = paymentId;
        }

        /**
         * Build call for getPaymentBreakdown
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPaymentBreakdownCall(paymentId, _callback);
        }


        /**
         * Execute getPaymentBreakdown request
         * @return PaymentBreakDownContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public PaymentBreakDownContainer execute() throws ApiException {
            ApiResponse<PaymentBreakDownContainer> localVarResp = getPaymentBreakdownWithHttpInfo(paymentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPaymentBreakdown request with HTTP info returned
         * @return ApiResponse&lt;PaymentBreakDownContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentBreakDownContainer> executeWithHttpInfo() throws ApiException {
            return getPaymentBreakdownWithHttpInfo(paymentId);
        }

        /**
         * Execute getPaymentBreakdown request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentBreakDownContainer> _callback) throws ApiException {
            return getPaymentBreakdownAsync(paymentId, _callback);
        }
    }

    /**
     * Retrieve a payment breakdown
     * Get a full breakdown of a payment made to Deel. Breakdown will include individual invoices and Deel fee as line items.
     * @param paymentId  (required)
     * @return GetPaymentBreakdownRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetPaymentBreakdownRequestBuilder getPaymentBreakdown(String paymentId) throws IllegalArgumentException {
        if (paymentId == null) throw new IllegalArgumentException("\"paymentId\" is required but got null");
            

        return new GetPaymentBreakdownRequestBuilder(paymentId);
    }
    private okhttp3.Call getPaymentReceiptsCall(LocalDate dateFrom, LocalDate dateTo, Object currencies, Object entities, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_from", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_to", dateTo));
        }

        if (currencies != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currencies", currencies));
        }

        if (entities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entities", entities));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentReceiptsValidateBeforeCall(LocalDate dateFrom, LocalDate dateTo, Object currencies, Object entities, final ApiCallback _callback) throws ApiException {
        return getPaymentReceiptsCall(dateFrom, dateTo, currencies, entities, _callback);

    }


    private ApiResponse<PaymentListContainer> getPaymentReceiptsWithHttpInfo(LocalDate dateFrom, LocalDate dateTo, Object currencies, Object entities) throws ApiException {
        okhttp3.Call localVarCall = getPaymentReceiptsValidateBeforeCall(dateFrom, dateTo, currencies, entities, null);
        Type localVarReturnType = new TypeToken<PaymentListContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPaymentReceiptsAsync(LocalDate dateFrom, LocalDate dateTo, Object currencies, Object entities, final ApiCallback<PaymentListContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentReceiptsValidateBeforeCall(dateFrom, dateTo, currencies, entities, _callback);
        Type localVarReturnType = new TypeToken<PaymentListContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPaymentReceiptsRequestBuilder {
        private LocalDate dateFrom;
        private LocalDate dateTo;
        private Object currencies;
        private Object entities;

        private GetPaymentReceiptsRequestBuilder() {
        }

        /**
         * Set dateFrom
         * @param dateFrom Filtered results will include records created on or after the provided date. (optional)
         * @return GetPaymentReceiptsRequestBuilder
         */
        public GetPaymentReceiptsRequestBuilder dateFrom(LocalDate dateFrom) {
            this.dateFrom = dateFrom;
            return this;
        }
        
        /**
         * Set dateTo
         * @param dateTo Filtered results will include records created before the provided date. (optional)
         * @return GetPaymentReceiptsRequestBuilder
         */
        public GetPaymentReceiptsRequestBuilder dateTo(LocalDate dateTo) {
            this.dateTo = dateTo;
            return this;
        }
        
        /**
         * Set currencies
         * @param currencies Currency codes of contracts to filter. (optional)
         * @return GetPaymentReceiptsRequestBuilder
         */
        public GetPaymentReceiptsRequestBuilder currencies(Object currencies) {
            this.currencies = currencies;
            return this;
        }
        
        /**
         * Set entities
         * @param entities Filter by legal entity type; company, or individual (optional)
         * @return GetPaymentReceiptsRequestBuilder
         */
        public GetPaymentReceiptsRequestBuilder entities(Object entities) {
            this.entities = entities;
            return this;
        }
        
        /**
         * Build call for getPaymentReceipts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPaymentReceiptsCall(dateFrom, dateTo, currencies, entities, _callback);
        }


        /**
         * Execute getPaymentReceipts request
         * @return PaymentListContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public PaymentListContainer execute() throws ApiException {
            ApiResponse<PaymentListContainer> localVarResp = getPaymentReceiptsWithHttpInfo(dateFrom, dateTo, currencies, entities);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPaymentReceipts request with HTTP info returned
         * @return ApiResponse&lt;PaymentListContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentListContainer> executeWithHttpInfo() throws ApiException {
            return getPaymentReceiptsWithHttpInfo(dateFrom, dateTo, currencies, entities);
        }

        /**
         * Execute getPaymentReceipts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentListContainer> _callback) throws ApiException {
            return getPaymentReceiptsAsync(dateFrom, dateTo, currencies, entities, _callback);
        }
    }

    /**
     * Retrieve payment reciepts
     * Retrieve a list of payments made to Deel.
     * @return GetPaymentReceiptsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetPaymentReceiptsRequestBuilder getPaymentReceipts() throws IllegalArgumentException {
        return new GetPaymentReceiptsRequestBuilder();
    }
}
