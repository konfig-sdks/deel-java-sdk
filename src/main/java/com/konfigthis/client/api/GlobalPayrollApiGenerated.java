/*
 * Deel REST API
 * API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddWorkerBankAccountContainer;
import com.konfigthis.client.model.BankAccountGuideContainer;
import com.konfigthis.client.model.BankAccountUpdatedContainer;
import com.konfigthis.client.model.GPContractCreatedContainer;
import com.konfigthis.client.model.GPContractToCreate;
import com.konfigthis.client.model.GPContractToCreateContainer;
import com.konfigthis.client.model.GPEmployeeAddressToUpdateContainer;
import com.konfigthis.client.model.GPEmployeeAddressUpdateData;
import com.konfigthis.client.model.GPEmployeeAddressUpdatedContainer;
import com.konfigthis.client.model.GPEmployeeCompensationToUpdateContainer;
import com.konfigthis.client.model.GPEmployeeCompensationUpdateData;
import com.konfigthis.client.model.GPEmployeeCompensationUpdatedContainer;
import com.konfigthis.client.model.GPEmployeeInformationToUpdateContainer;
import com.konfigthis.client.model.GPEmployeeInformationUpdateData;
import com.konfigthis.client.model.GPEmployeeInformationUpdatedContainer;
import com.konfigthis.client.model.GPEmployeePTOToUpdateContainer;
import com.konfigthis.client.model.GPEmployeePTOUpdateData;
import com.konfigthis.client.model.GPPayrollEventReportContainer;
import com.konfigthis.client.model.GPPayslipDownloadUrlContainer;
import com.konfigthis.client.model.GPPayslipsListContainer;
import com.konfigthis.client.model.GenericResultUpdated;
import com.konfigthis.client.model.GlobalPayrollG2NReportContainer;
import java.time.LocalDate;
import java.util.UUID;
import com.konfigthis.client.model.WorkerBankAccountToAdd;
import com.konfigthis.client.model.WorkerBankAccountsInfoContainer;
import com.konfigthis.client.model.WorkerTerminationBody;
import com.konfigthis.client.model.WorkerTerminationBodyContainer;
import com.konfigthis.client.model.WorkerTerminationContainer;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class GlobalPayrollApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GlobalPayrollApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public GlobalPayrollApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addBankAccountCall(String workerId, AddWorkerBankAccountContainer addWorkerBankAccountContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addWorkerBankAccountContainer;

        // create path and map variables
        String localVarPath = "/gp/workers/{worker_id}/banks"
            .replace("{" + "worker_id" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addBankAccountValidateBeforeCall(String workerId, AddWorkerBankAccountContainer addWorkerBankAccountContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling addBankAccount(Async)");
        }

        // verify the required parameter 'addWorkerBankAccountContainer' is set
        if (addWorkerBankAccountContainer == null) {
            throw new ApiException("Missing the required parameter 'addWorkerBankAccountContainer' when calling addBankAccount(Async)");
        }

        return addBankAccountCall(workerId, addWorkerBankAccountContainer, _callback);

    }


    private ApiResponse<BankAccountUpdatedContainer> addBankAccountWithHttpInfo(String workerId, AddWorkerBankAccountContainer addWorkerBankAccountContainer) throws ApiException {
        okhttp3.Call localVarCall = addBankAccountValidateBeforeCall(workerId, addWorkerBankAccountContainer, null);
        Type localVarReturnType = new TypeToken<BankAccountUpdatedContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addBankAccountAsync(String workerId, AddWorkerBankAccountContainer addWorkerBankAccountContainer, final ApiCallback<BankAccountUpdatedContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = addBankAccountValidateBeforeCall(workerId, addWorkerBankAccountContainer, _callback);
        Type localVarReturnType = new TypeToken<BankAccountUpdatedContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddBankAccountRequestBuilder {
        private final WorkerBankAccountToAdd data;
        private final String workerId;

        private AddBankAccountRequestBuilder(WorkerBankAccountToAdd data, String workerId) {
            this.data = data;
            this.workerId = workerId;
        }

        /**
         * Build call for addBankAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddWorkerBankAccountContainer addWorkerBankAccountContainer = buildBodyParams();
            return addBankAccountCall(workerId, addWorkerBankAccountContainer, _callback);
        }

        private AddWorkerBankAccountContainer buildBodyParams() {
            AddWorkerBankAccountContainer addWorkerBankAccountContainer = new AddWorkerBankAccountContainer();
            addWorkerBankAccountContainer.data(this.data);
            return addWorkerBankAccountContainer;
        }

        /**
         * Execute addBankAccount request
         * @return BankAccountUpdatedContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public BankAccountUpdatedContainer execute() throws ApiException {
            AddWorkerBankAccountContainer addWorkerBankAccountContainer = buildBodyParams();
            ApiResponse<BankAccountUpdatedContainer> localVarResp = addBankAccountWithHttpInfo(workerId, addWorkerBankAccountContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addBankAccount request with HTTP info returned
         * @return ApiResponse&lt;BankAccountUpdatedContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BankAccountUpdatedContainer> executeWithHttpInfo() throws ApiException {
            AddWorkerBankAccountContainer addWorkerBankAccountContainer = buildBodyParams();
            return addBankAccountWithHttpInfo(workerId, addWorkerBankAccountContainer);
        }

        /**
         * Execute addBankAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BankAccountUpdatedContainer> _callback) throws ApiException {
            AddWorkerBankAccountContainer addWorkerBankAccountContainer = buildBodyParams();
            return addBankAccountAsync(workerId, addWorkerBankAccountContainer, _callback);
        }
    }

    /**
     * Add bank account
     * Add a new bank account for an employee.
     * @param workerId Unique identifier for a worker. (required)
     * @param addWorkerBankAccountContainer Request body to add new bank account for employee (required)
     * @return AddBankAccountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public AddBankAccountRequestBuilder addBankAccount(WorkerBankAccountToAdd data, String workerId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new AddBankAccountRequestBuilder(data, workerId);
    }
    private okhttp3.Call createContractGpCall(GPContractToCreateContainer gpContractToCreateContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gpContractToCreateContainer;

        // create path and map variables
        String localVarPath = "/contracts/gp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createContractGpValidateBeforeCall(GPContractToCreateContainer gpContractToCreateContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gpContractToCreateContainer' is set
        if (gpContractToCreateContainer == null) {
            throw new ApiException("Missing the required parameter 'gpContractToCreateContainer' when calling createContractGp(Async)");
        }

        return createContractGpCall(gpContractToCreateContainer, _callback);

    }


    private ApiResponse<GPContractCreatedContainer> createContractGpWithHttpInfo(GPContractToCreateContainer gpContractToCreateContainer) throws ApiException {
        okhttp3.Call localVarCall = createContractGpValidateBeforeCall(gpContractToCreateContainer, null);
        Type localVarReturnType = new TypeToken<GPContractCreatedContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createContractGpAsync(GPContractToCreateContainer gpContractToCreateContainer, final ApiCallback<GPContractCreatedContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = createContractGpValidateBeforeCall(gpContractToCreateContainer, _callback);
        Type localVarReturnType = new TypeToken<GPContractCreatedContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateContractGpRequestBuilder {
        private final GPContractToCreate data;

        private CreateContractGpRequestBuilder(GPContractToCreate data) {
            this.data = data;
        }

        /**
         * Build call for createContractGp
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GPContractToCreateContainer gpContractToCreateContainer = buildBodyParams();
            return createContractGpCall(gpContractToCreateContainer, _callback);
        }

        private GPContractToCreateContainer buildBodyParams() {
            GPContractToCreateContainer gpContractToCreateContainer = new GPContractToCreateContainer();
            gpContractToCreateContainer.data(this.data);
            return gpContractToCreateContainer;
        }

        /**
         * Execute createContractGp request
         * @return GPContractCreatedContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GPContractCreatedContainer execute() throws ApiException {
            GPContractToCreateContainer gpContractToCreateContainer = buildBodyParams();
            ApiResponse<GPContractCreatedContainer> localVarResp = createContractGpWithHttpInfo(gpContractToCreateContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createContractGp request with HTTP info returned
         * @return ApiResponse&lt;GPContractCreatedContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GPContractCreatedContainer> executeWithHttpInfo() throws ApiException {
            GPContractToCreateContainer gpContractToCreateContainer = buildBodyParams();
            return createContractGpWithHttpInfo(gpContractToCreateContainer);
        }

        /**
         * Execute createContractGp request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GPContractCreatedContainer> _callback) throws ApiException {
            GPContractToCreateContainer gpContractToCreateContainer = buildBodyParams();
            return createContractGpAsync(gpContractToCreateContainer, _callback);
        }
    }

    /**
     * Create a contract
     * Create a Global Payroll contract.
     * @param gpContractToCreateContainer Global Payroll (GP) contract object that needs to be created (required)
     * @return CreateContractGpRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public CreateContractGpRequestBuilder createContractGp(GPContractToCreate data) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        return new CreateContractGpRequestBuilder(data);
    }
    private okhttp3.Call downloadGrossToNetGpReportCall(UUID gpReportId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gp/reports/{gp_report_id}/gross_to_net/csv"
            .replace("{" + "gp_report_id" + "}", localVarApiClient.escapeString(gpReportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/csv",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadGrossToNetGpReportValidateBeforeCall(UUID gpReportId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gpReportId' is set
        if (gpReportId == null) {
            throw new ApiException("Missing the required parameter 'gpReportId' when calling downloadGrossToNetGpReport(Async)");
        }

        return downloadGrossToNetGpReportCall(gpReportId, _callback);

    }


    private ApiResponse<String> downloadGrossToNetGpReportWithHttpInfo(UUID gpReportId) throws ApiException {
        okhttp3.Call localVarCall = downloadGrossToNetGpReportValidateBeforeCall(gpReportId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call downloadGrossToNetGpReportAsync(UUID gpReportId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadGrossToNetGpReportValidateBeforeCall(gpReportId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DownloadGrossToNetGpReportRequestBuilder {
        private final UUID gpReportId;

        private DownloadGrossToNetGpReportRequestBuilder(UUID gpReportId) {
            this.gpReportId = gpReportId;
        }

        /**
         * Build call for downloadGrossToNetGpReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return downloadGrossToNetGpReportCall(gpReportId, _callback);
        }


        /**
         * Execute downloadGrossToNetGpReport request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = downloadGrossToNetGpReportWithHttpInfo(gpReportId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute downloadGrossToNetGpReport request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return downloadGrossToNetGpReportWithHttpInfo(gpReportId);
        }

        /**
         * Execute downloadGrossToNetGpReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return downloadGrossToNetGpReportAsync(gpReportId, _callback);
        }
    }

    /**
     * Download gross-to-net report
     * Download global payroll reports detailing gross-to-net calculations.
     * @param gpReportId Id of gp report. (required)
     * @return DownloadGrossToNetGpReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public DownloadGrossToNetGpReportRequestBuilder downloadGrossToNetGpReport(UUID gpReportId) throws IllegalArgumentException {
        if (gpReportId == null) throw new IllegalArgumentException("\"gpReportId\" is required but got null");
            

        return new DownloadGrossToNetGpReportRequestBuilder(gpReportId);
    }
    private okhttp3.Call getBankAccountsCall(String workerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gp/workers/{worker_id}/banks"
            .replace("{" + "worker_id" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBankAccountsValidateBeforeCall(String workerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling getBankAccounts(Async)");
        }

        return getBankAccountsCall(workerId, _callback);

    }


    private ApiResponse<WorkerBankAccountsInfoContainer> getBankAccountsWithHttpInfo(String workerId) throws ApiException {
        okhttp3.Call localVarCall = getBankAccountsValidateBeforeCall(workerId, null);
        Type localVarReturnType = new TypeToken<WorkerBankAccountsInfoContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBankAccountsAsync(String workerId, final ApiCallback<WorkerBankAccountsInfoContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBankAccountsValidateBeforeCall(workerId, _callback);
        Type localVarReturnType = new TypeToken<WorkerBankAccountsInfoContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBankAccountsRequestBuilder {
        private final String workerId;

        private GetBankAccountsRequestBuilder(String workerId) {
            this.workerId = workerId;
        }

        /**
         * Build call for getBankAccounts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBankAccountsCall(workerId, _callback);
        }


        /**
         * Execute getBankAccounts request
         * @return WorkerBankAccountsInfoContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public WorkerBankAccountsInfoContainer execute() throws ApiException {
            ApiResponse<WorkerBankAccountsInfoContainer> localVarResp = getBankAccountsWithHttpInfo(workerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBankAccounts request with HTTP info returned
         * @return ApiResponse&lt;WorkerBankAccountsInfoContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkerBankAccountsInfoContainer> executeWithHttpInfo() throws ApiException {
            return getBankAccountsWithHttpInfo(workerId);
        }

        /**
         * Execute getBankAccounts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkerBankAccountsInfoContainer> _callback) throws ApiException {
            return getBankAccountsAsync(workerId, _callback);
        }
    }

    /**
     * Retrieve bank accounts
     * Retrieve all bank accounts for an employee.
     * @param workerId Unique identifier for a worker. (required)
     * @return GetBankAccountsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetBankAccountsRequestBuilder getBankAccounts(String workerId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new GetBankAccountsRequestBuilder(workerId);
    }
    private okhttp3.Call getBankGuideCall(String workerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gp/workers/{worker_id}/banks/guide"
            .replace("{" + "worker_id" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBankGuideValidateBeforeCall(String workerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling getBankGuide(Async)");
        }

        return getBankGuideCall(workerId, _callback);

    }


    private ApiResponse<BankAccountGuideContainer> getBankGuideWithHttpInfo(String workerId) throws ApiException {
        okhttp3.Call localVarCall = getBankGuideValidateBeforeCall(workerId, null);
        Type localVarReturnType = new TypeToken<BankAccountGuideContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBankGuideAsync(String workerId, final ApiCallback<BankAccountGuideContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBankGuideValidateBeforeCall(workerId, _callback);
        Type localVarReturnType = new TypeToken<BankAccountGuideContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBankGuideRequestBuilder {
        private final String workerId;

        private GetBankGuideRequestBuilder(String workerId) {
            this.workerId = workerId;
        }

        /**
         * Build call for getBankGuide
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBankGuideCall(workerId, _callback);
        }


        /**
         * Execute getBankGuide request
         * @return BankAccountGuideContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public BankAccountGuideContainer execute() throws ApiException {
            ApiResponse<BankAccountGuideContainer> localVarResp = getBankGuideWithHttpInfo(workerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBankGuide request with HTTP info returned
         * @return ApiResponse&lt;BankAccountGuideContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BankAccountGuideContainer> executeWithHttpInfo() throws ApiException {
            return getBankGuideWithHttpInfo(workerId);
        }

        /**
         * Execute getBankGuide request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BankAccountGuideContainer> _callback) throws ApiException {
            return getBankGuideAsync(workerId, _callback);
        }
    }

    /**
     * Retrieve bank guide
     * Retrieve the bank form guide for employee.
     * @param workerId Unique identifier for a worker. (required)
     * @return GetBankGuideRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetBankGuideRequestBuilder getBankGuide(String workerId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new GetBankGuideRequestBuilder(workerId);
    }
    private okhttp3.Call getGrossToNetGpReportCall(UUID gpReportId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gp/reports/{gp_report_id}/gross_to_net"
            .replace("{" + "gp_report_id" + "}", localVarApiClient.escapeString(gpReportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGrossToNetGpReportValidateBeforeCall(UUID gpReportId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gpReportId' is set
        if (gpReportId == null) {
            throw new ApiException("Missing the required parameter 'gpReportId' when calling getGrossToNetGpReport(Async)");
        }

        return getGrossToNetGpReportCall(gpReportId, _callback);

    }


    private ApiResponse<GlobalPayrollG2NReportContainer> getGrossToNetGpReportWithHttpInfo(UUID gpReportId) throws ApiException {
        okhttp3.Call localVarCall = getGrossToNetGpReportValidateBeforeCall(gpReportId, null);
        Type localVarReturnType = new TypeToken<GlobalPayrollG2NReportContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGrossToNetGpReportAsync(UUID gpReportId, final ApiCallback<GlobalPayrollG2NReportContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGrossToNetGpReportValidateBeforeCall(gpReportId, _callback);
        Type localVarReturnType = new TypeToken<GlobalPayrollG2NReportContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetGrossToNetGpReportRequestBuilder {
        private final UUID gpReportId;

        private GetGrossToNetGpReportRequestBuilder(UUID gpReportId) {
            this.gpReportId = gpReportId;
        }

        /**
         * Build call for getGrossToNetGpReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGrossToNetGpReportCall(gpReportId, _callback);
        }


        /**
         * Execute getGrossToNetGpReport request
         * @return GlobalPayrollG2NReportContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GlobalPayrollG2NReportContainer execute() throws ApiException {
            ApiResponse<GlobalPayrollG2NReportContainer> localVarResp = getGrossToNetGpReportWithHttpInfo(gpReportId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getGrossToNetGpReport request with HTTP info returned
         * @return ApiResponse&lt;GlobalPayrollG2NReportContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GlobalPayrollG2NReportContainer> executeWithHttpInfo() throws ApiException {
            return getGrossToNetGpReportWithHttpInfo(gpReportId);
        }

        /**
         * Execute getGrossToNetGpReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GlobalPayrollG2NReportContainer> _callback) throws ApiException {
            return getGrossToNetGpReportAsync(gpReportId, _callback);
        }
    }

    /**
     * List gross-to-net report
     * Get list of global payroll reports detailing gross-to-net calculations.
     * @param gpReportId Id of gp report. (required)
     * @return GetGrossToNetGpReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetGrossToNetGpReportRequestBuilder getGrossToNetGpReport(UUID gpReportId) throws IllegalArgumentException {
        if (gpReportId == null) throw new IllegalArgumentException("\"gpReportId\" is required but got null");
            

        return new GetGrossToNetGpReportRequestBuilder(gpReportId);
    }
    private okhttp3.Call getPayslipDownloadUrlCall(String workerId, String payslipId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gp/workers/{worker_id}/payslips/{payslip_id}/download"
            .replace("{" + "worker_id" + "}", localVarApiClient.escapeString(workerId.toString()))
            .replace("{" + "payslip_id" + "}", localVarApiClient.escapeString(payslipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayslipDownloadUrlValidateBeforeCall(String workerId, String payslipId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling getPayslipDownloadUrl(Async)");
        }

        // verify the required parameter 'payslipId' is set
        if (payslipId == null) {
            throw new ApiException("Missing the required parameter 'payslipId' when calling getPayslipDownloadUrl(Async)");
        }

        return getPayslipDownloadUrlCall(workerId, payslipId, _callback);

    }


    private ApiResponse<GPPayslipDownloadUrlContainer> getPayslipDownloadUrlWithHttpInfo(String workerId, String payslipId) throws ApiException {
        okhttp3.Call localVarCall = getPayslipDownloadUrlValidateBeforeCall(workerId, payslipId, null);
        Type localVarReturnType = new TypeToken<GPPayslipDownloadUrlContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPayslipDownloadUrlAsync(String workerId, String payslipId, final ApiCallback<GPPayslipDownloadUrlContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayslipDownloadUrlValidateBeforeCall(workerId, payslipId, _callback);
        Type localVarReturnType = new TypeToken<GPPayslipDownloadUrlContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPayslipDownloadUrlRequestBuilder {
        private final String workerId;
        private final String payslipId;

        private GetPayslipDownloadUrlRequestBuilder(String workerId, String payslipId) {
            this.workerId = workerId;
            this.payslipId = payslipId;
        }

        /**
         * Build call for getPayslipDownloadUrl
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPayslipDownloadUrlCall(workerId, payslipId, _callback);
        }


        /**
         * Execute getPayslipDownloadUrl request
         * @return GPPayslipDownloadUrlContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GPPayslipDownloadUrlContainer execute() throws ApiException {
            ApiResponse<GPPayslipDownloadUrlContainer> localVarResp = getPayslipDownloadUrlWithHttpInfo(workerId, payslipId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPayslipDownloadUrl request with HTTP info returned
         * @return ApiResponse&lt;GPPayslipDownloadUrlContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GPPayslipDownloadUrlContainer> executeWithHttpInfo() throws ApiException {
            return getPayslipDownloadUrlWithHttpInfo(workerId, payslipId);
        }

        /**
         * Execute getPayslipDownloadUrl request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GPPayslipDownloadUrlContainer> _callback) throws ApiException {
            return getPayslipDownloadUrlAsync(workerId, payslipId, _callback);
        }
    }

    /**
     * Download payslip PDF
     * Get download url for GP payslip.
     * @param workerId Unique identifier for a worker. (required)
     * @param payslipId Unique identifier for a payslip. (required)
     * @return GetPayslipDownloadUrlRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetPayslipDownloadUrlRequestBuilder getPayslipDownloadUrl(String workerId, String payslipId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        if (payslipId == null) throw new IllegalArgumentException("\"payslipId\" is required but got null");
            

        return new GetPayslipDownloadUrlRequestBuilder(workerId, payslipId);
    }
    private okhttp3.Call getPayslipsCall(String workerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gp/workers/{worker_id}/payslips"
            .replace("{" + "worker_id" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayslipsValidateBeforeCall(String workerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling getPayslips(Async)");
        }

        return getPayslipsCall(workerId, _callback);

    }


    private ApiResponse<GPPayslipsListContainer> getPayslipsWithHttpInfo(String workerId) throws ApiException {
        okhttp3.Call localVarCall = getPayslipsValidateBeforeCall(workerId, null);
        Type localVarReturnType = new TypeToken<GPPayslipsListContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPayslipsAsync(String workerId, final ApiCallback<GPPayslipsListContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayslipsValidateBeforeCall(workerId, _callback);
        Type localVarReturnType = new TypeToken<GPPayslipsListContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPayslipsRequestBuilder {
        private final String workerId;

        private GetPayslipsRequestBuilder(String workerId) {
            this.workerId = workerId;
        }

        /**
         * Build call for getPayslips
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPayslipsCall(workerId, _callback);
        }


        /**
         * Execute getPayslips request
         * @return GPPayslipsListContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GPPayslipsListContainer execute() throws ApiException {
            ApiResponse<GPPayslipsListContainer> localVarResp = getPayslipsWithHttpInfo(workerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPayslips request with HTTP info returned
         * @return ApiResponse&lt;GPPayslipsListContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GPPayslipsListContainer> executeWithHttpInfo() throws ApiException {
            return getPayslipsWithHttpInfo(workerId);
        }

        /**
         * Execute getPayslips request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GPPayslipsListContainer> _callback) throws ApiException {
            return getPayslipsAsync(workerId, _callback);
        }
    }

    /**
     * Retrieve employee payslips
     * Get of payslips for an employee.
     * @param workerId Unique identifier for a worker. (required)
     * @return GetPayslipsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetPayslipsRequestBuilder getPayslips(String workerId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new GetPayslipsRequestBuilder(workerId);
    }
    private okhttp3.Call listPayrollEventsByLegalEntityCall(UUID legalEntityId, LocalDate startDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gp/legal-entities/{legal_entity_id}/reports"
            .replace("{" + "legal_entity_id" + "}", localVarApiClient.escapeString(legalEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPayrollEventsByLegalEntityValidateBeforeCall(UUID legalEntityId, LocalDate startDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'legalEntityId' is set
        if (legalEntityId == null) {
            throw new ApiException("Missing the required parameter 'legalEntityId' when calling listPayrollEventsByLegalEntity(Async)");
        }

        return listPayrollEventsByLegalEntityCall(legalEntityId, startDate, _callback);

    }


    private ApiResponse<GPPayrollEventReportContainer> listPayrollEventsByLegalEntityWithHttpInfo(UUID legalEntityId, LocalDate startDate) throws ApiException {
        okhttp3.Call localVarCall = listPayrollEventsByLegalEntityValidateBeforeCall(legalEntityId, startDate, null);
        Type localVarReturnType = new TypeToken<GPPayrollEventReportContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPayrollEventsByLegalEntityAsync(UUID legalEntityId, LocalDate startDate, final ApiCallback<GPPayrollEventReportContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPayrollEventsByLegalEntityValidateBeforeCall(legalEntityId, startDate, _callback);
        Type localVarReturnType = new TypeToken<GPPayrollEventReportContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListPayrollEventsByLegalEntityRequestBuilder {
        private final UUID legalEntityId;
        private LocalDate startDate;

        private ListPayrollEventsByLegalEntityRequestBuilder(UUID legalEntityId) {
            this.legalEntityId = legalEntityId;
        }

        /**
         * Set startDate
         * @param startDate Start date of payroll report. (optional)
         * @return ListPayrollEventsByLegalEntityRequestBuilder
         */
        public ListPayrollEventsByLegalEntityRequestBuilder startDate(LocalDate startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Build call for listPayrollEventsByLegalEntity
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPayrollEventsByLegalEntityCall(legalEntityId, startDate, _callback);
        }


        /**
         * Execute listPayrollEventsByLegalEntity request
         * @return GPPayrollEventReportContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GPPayrollEventReportContainer execute() throws ApiException {
            ApiResponse<GPPayrollEventReportContainer> localVarResp = listPayrollEventsByLegalEntityWithHttpInfo(legalEntityId, startDate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listPayrollEventsByLegalEntity request with HTTP info returned
         * @return ApiResponse&lt;GPPayrollEventReportContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GPPayrollEventReportContainer> executeWithHttpInfo() throws ApiException {
            return listPayrollEventsByLegalEntityWithHttpInfo(legalEntityId, startDate);
        }

        /**
         * Execute listPayrollEventsByLegalEntity request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GPPayrollEventReportContainer> _callback) throws ApiException {
            return listPayrollEventsByLegalEntityAsync(legalEntityId, startDate, _callback);
        }
    }

    /**
     * List payroll events by legal entity
     * Get list of global payroll events by legal entities.
     * @param legalEntityId Id of an legal entity. (required)
     * @return ListPayrollEventsByLegalEntityRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public ListPayrollEventsByLegalEntityRequestBuilder listPayrollEventsByLegalEntity(UUID legalEntityId) throws IllegalArgumentException {
        if (legalEntityId == null) throw new IllegalArgumentException("\"legalEntityId\" is required but got null");
            

        return new ListPayrollEventsByLegalEntityRequestBuilder(legalEntityId);
    }
    private okhttp3.Call modifyBankAccountCall(String workerId, String bankId, AddWorkerBankAccountContainer addWorkerBankAccountContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addWorkerBankAccountContainer;

        // create path and map variables
        String localVarPath = "/gp/workers/{worker_id}/banks/{bank_id}"
            .replace("{" + "worker_id" + "}", localVarApiClient.escapeString(workerId.toString()))
            .replace("{" + "bank_id" + "}", localVarApiClient.escapeString(bankId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifyBankAccountValidateBeforeCall(String workerId, String bankId, AddWorkerBankAccountContainer addWorkerBankAccountContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling modifyBankAccount(Async)");
        }

        // verify the required parameter 'bankId' is set
        if (bankId == null) {
            throw new ApiException("Missing the required parameter 'bankId' when calling modifyBankAccount(Async)");
        }

        // verify the required parameter 'addWorkerBankAccountContainer' is set
        if (addWorkerBankAccountContainer == null) {
            throw new ApiException("Missing the required parameter 'addWorkerBankAccountContainer' when calling modifyBankAccount(Async)");
        }

        return modifyBankAccountCall(workerId, bankId, addWorkerBankAccountContainer, _callback);

    }


    private ApiResponse<BankAccountUpdatedContainer> modifyBankAccountWithHttpInfo(String workerId, String bankId, AddWorkerBankAccountContainer addWorkerBankAccountContainer) throws ApiException {
        okhttp3.Call localVarCall = modifyBankAccountValidateBeforeCall(workerId, bankId, addWorkerBankAccountContainer, null);
        Type localVarReturnType = new TypeToken<BankAccountUpdatedContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call modifyBankAccountAsync(String workerId, String bankId, AddWorkerBankAccountContainer addWorkerBankAccountContainer, final ApiCallback<BankAccountUpdatedContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifyBankAccountValidateBeforeCall(workerId, bankId, addWorkerBankAccountContainer, _callback);
        Type localVarReturnType = new TypeToken<BankAccountUpdatedContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ModifyBankAccountRequestBuilder {
        private final WorkerBankAccountToAdd data;
        private final String workerId;
        private final String bankId;

        private ModifyBankAccountRequestBuilder(WorkerBankAccountToAdd data, String workerId, String bankId) {
            this.data = data;
            this.workerId = workerId;
            this.bankId = bankId;
        }

        /**
         * Build call for modifyBankAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddWorkerBankAccountContainer addWorkerBankAccountContainer = buildBodyParams();
            return modifyBankAccountCall(workerId, bankId, addWorkerBankAccountContainer, _callback);
        }

        private AddWorkerBankAccountContainer buildBodyParams() {
            AddWorkerBankAccountContainer addWorkerBankAccountContainer = new AddWorkerBankAccountContainer();
            addWorkerBankAccountContainer.data(this.data);
            return addWorkerBankAccountContainer;
        }

        /**
         * Execute modifyBankAccount request
         * @return BankAccountUpdatedContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public BankAccountUpdatedContainer execute() throws ApiException {
            AddWorkerBankAccountContainer addWorkerBankAccountContainer = buildBodyParams();
            ApiResponse<BankAccountUpdatedContainer> localVarResp = modifyBankAccountWithHttpInfo(workerId, bankId, addWorkerBankAccountContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute modifyBankAccount request with HTTP info returned
         * @return ApiResponse&lt;BankAccountUpdatedContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BankAccountUpdatedContainer> executeWithHttpInfo() throws ApiException {
            AddWorkerBankAccountContainer addWorkerBankAccountContainer = buildBodyParams();
            return modifyBankAccountWithHttpInfo(workerId, bankId, addWorkerBankAccountContainer);
        }

        /**
         * Execute modifyBankAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BankAccountUpdatedContainer> _callback) throws ApiException {
            AddWorkerBankAccountContainer addWorkerBankAccountContainer = buildBodyParams();
            return modifyBankAccountAsync(workerId, bankId, addWorkerBankAccountContainer, _callback);
        }
    }

    /**
     * Modify bank account
     * Modify bank account for an employee.
     * @param workerId Unique identifier for a worker. (required)
     * @param bankId Bank Account id. (required)
     * @param addWorkerBankAccountContainer Request body to add new bank account for employee (required)
     * @return ModifyBankAccountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public ModifyBankAccountRequestBuilder modifyBankAccount(WorkerBankAccountToAdd data, String workerId, String bankId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        if (bankId == null) throw new IllegalArgumentException("\"bankId\" is required but got null");
            

        return new ModifyBankAccountRequestBuilder(data, workerId, bankId);
    }
    private okhttp3.Call requestTerminationProcessCall(String workerId, WorkerTerminationBodyContainer workerTerminationBodyContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workerTerminationBodyContainer;

        // create path and map variables
        String localVarPath = "/gp/workers/{worker_id}/terminations"
            .replace("{" + "worker_id" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestTerminationProcessValidateBeforeCall(String workerId, WorkerTerminationBodyContainer workerTerminationBodyContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling requestTerminationProcess(Async)");
        }

        // verify the required parameter 'workerTerminationBodyContainer' is set
        if (workerTerminationBodyContainer == null) {
            throw new ApiException("Missing the required parameter 'workerTerminationBodyContainer' when calling requestTerminationProcess(Async)");
        }

        return requestTerminationProcessCall(workerId, workerTerminationBodyContainer, _callback);

    }


    private ApiResponse<WorkerTerminationContainer> requestTerminationProcessWithHttpInfo(String workerId, WorkerTerminationBodyContainer workerTerminationBodyContainer) throws ApiException {
        okhttp3.Call localVarCall = requestTerminationProcessValidateBeforeCall(workerId, workerTerminationBodyContainer, null);
        Type localVarReturnType = new TypeToken<WorkerTerminationContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call requestTerminationProcessAsync(String workerId, WorkerTerminationBodyContainer workerTerminationBodyContainer, final ApiCallback<WorkerTerminationContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestTerminationProcessValidateBeforeCall(workerId, workerTerminationBodyContainer, _callback);
        Type localVarReturnType = new TypeToken<WorkerTerminationContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RequestTerminationProcessRequestBuilder {
        private final WorkerTerminationBody data;
        private final String workerId;

        private RequestTerminationProcessRequestBuilder(WorkerTerminationBody data, String workerId) {
            this.data = data;
            this.workerId = workerId;
        }

        /**
         * Build call for requestTerminationProcess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WorkerTerminationBodyContainer workerTerminationBodyContainer = buildBodyParams();
            return requestTerminationProcessCall(workerId, workerTerminationBodyContainer, _callback);
        }

        private WorkerTerminationBodyContainer buildBodyParams() {
            WorkerTerminationBodyContainer workerTerminationBodyContainer = new WorkerTerminationBodyContainer();
            workerTerminationBodyContainer.data(this.data);
            return workerTerminationBodyContainer;
        }

        /**
         * Execute requestTerminationProcess request
         * @return WorkerTerminationContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public WorkerTerminationContainer execute() throws ApiException {
            WorkerTerminationBodyContainer workerTerminationBodyContainer = buildBodyParams();
            ApiResponse<WorkerTerminationContainer> localVarResp = requestTerminationProcessWithHttpInfo(workerId, workerTerminationBodyContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute requestTerminationProcess request with HTTP info returned
         * @return ApiResponse&lt;WorkerTerminationContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkerTerminationContainer> executeWithHttpInfo() throws ApiException {
            WorkerTerminationBodyContainer workerTerminationBodyContainer = buildBodyParams();
            return requestTerminationProcessWithHttpInfo(workerId, workerTerminationBodyContainer);
        }

        /**
         * Execute requestTerminationProcess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkerTerminationContainer> _callback) throws ApiException {
            WorkerTerminationBodyContainer workerTerminationBodyContainer = buildBodyParams();
            return requestTerminationProcessAsync(workerId, workerTerminationBodyContainer, _callback);
        }
    }

    /**
     * Request termination
     * Request a termination for a global payroll employee. A successful call starts the termination process and does not confirm termination.
     * @param workerId Unique identifier for a worker. (required)
     * @param workerTerminationBodyContainer Request body to add new bank account for employee (required)
     * @return RequestTerminationProcessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public RequestTerminationProcessRequestBuilder requestTerminationProcess(WorkerTerminationBody data, String workerId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new RequestTerminationProcessRequestBuilder(data, workerId);
    }
    private okhttp3.Call updateCompensationHistoryCall(String workerId, GPEmployeeCompensationToUpdateContainer gpEmployeeCompensationToUpdateContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gpEmployeeCompensationToUpdateContainer;

        // create path and map variables
        String localVarPath = "/gp/workers/{worker_id}/compensation"
            .replace("{" + "worker_id" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCompensationHistoryValidateBeforeCall(String workerId, GPEmployeeCompensationToUpdateContainer gpEmployeeCompensationToUpdateContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling updateCompensationHistory(Async)");
        }

        // verify the required parameter 'gpEmployeeCompensationToUpdateContainer' is set
        if (gpEmployeeCompensationToUpdateContainer == null) {
            throw new ApiException("Missing the required parameter 'gpEmployeeCompensationToUpdateContainer' when calling updateCompensationHistory(Async)");
        }

        return updateCompensationHistoryCall(workerId, gpEmployeeCompensationToUpdateContainer, _callback);

    }


    private ApiResponse<GPEmployeeCompensationUpdatedContainer> updateCompensationHistoryWithHttpInfo(String workerId, GPEmployeeCompensationToUpdateContainer gpEmployeeCompensationToUpdateContainer) throws ApiException {
        okhttp3.Call localVarCall = updateCompensationHistoryValidateBeforeCall(workerId, gpEmployeeCompensationToUpdateContainer, null);
        Type localVarReturnType = new TypeToken<GPEmployeeCompensationUpdatedContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCompensationHistoryAsync(String workerId, GPEmployeeCompensationToUpdateContainer gpEmployeeCompensationToUpdateContainer, final ApiCallback<GPEmployeeCompensationUpdatedContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCompensationHistoryValidateBeforeCall(workerId, gpEmployeeCompensationToUpdateContainer, _callback);
        Type localVarReturnType = new TypeToken<GPEmployeeCompensationUpdatedContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCompensationHistoryRequestBuilder {
        private final GPEmployeeCompensationUpdateData data;
        private final String workerId;

        private UpdateCompensationHistoryRequestBuilder(GPEmployeeCompensationUpdateData data, String workerId) {
            this.data = data;
            this.workerId = workerId;
        }

        /**
         * Build call for updateCompensationHistory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GPEmployeeCompensationToUpdateContainer gpEmployeeCompensationToUpdateContainer = buildBodyParams();
            return updateCompensationHistoryCall(workerId, gpEmployeeCompensationToUpdateContainer, _callback);
        }

        private GPEmployeeCompensationToUpdateContainer buildBodyParams() {
            GPEmployeeCompensationToUpdateContainer gpEmployeeCompensationToUpdateContainer = new GPEmployeeCompensationToUpdateContainer();
            gpEmployeeCompensationToUpdateContainer.data(this.data);
            return gpEmployeeCompensationToUpdateContainer;
        }

        /**
         * Execute updateCompensationHistory request
         * @return GPEmployeeCompensationUpdatedContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GPEmployeeCompensationUpdatedContainer execute() throws ApiException {
            GPEmployeeCompensationToUpdateContainer gpEmployeeCompensationToUpdateContainer = buildBodyParams();
            ApiResponse<GPEmployeeCompensationUpdatedContainer> localVarResp = updateCompensationHistoryWithHttpInfo(workerId, gpEmployeeCompensationToUpdateContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCompensationHistory request with HTTP info returned
         * @return ApiResponse&lt;GPEmployeeCompensationUpdatedContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GPEmployeeCompensationUpdatedContainer> executeWithHttpInfo() throws ApiException {
            GPEmployeeCompensationToUpdateContainer gpEmployeeCompensationToUpdateContainer = buildBodyParams();
            return updateCompensationHistoryWithHttpInfo(workerId, gpEmployeeCompensationToUpdateContainer);
        }

        /**
         * Execute updateCompensationHistory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GPEmployeeCompensationUpdatedContainer> _callback) throws ApiException {
            GPEmployeeCompensationToUpdateContainer gpEmployeeCompensationToUpdateContainer = buildBodyParams();
            return updateCompensationHistoryAsync(workerId, gpEmployeeCompensationToUpdateContainer, _callback);
        }
    }

    /**
     * Update compensation
     * Update the compensation of a Global Payroll employee. Returns the full compensation history including the update.
     * @param workerId Unique identifier for a worker. (required)
     * @param gpEmployeeCompensationToUpdateContainer The desired compensation of the Global Payroll employee (required)
     * @return UpdateCompensationHistoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCompensationHistoryRequestBuilder updateCompensationHistory(GPEmployeeCompensationUpdateData data, String workerId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new UpdateCompensationHistoryRequestBuilder(data, workerId);
    }
    private okhttp3.Call updateEmployeeInformationCall(String workerId, GPEmployeeInformationToUpdateContainer gpEmployeeInformationToUpdateContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gpEmployeeInformationToUpdateContainer;

        // create path and map variables
        String localVarPath = "/gp/workers/{worker_id}/employee-information"
            .replace("{" + "worker_id" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEmployeeInformationValidateBeforeCall(String workerId, GPEmployeeInformationToUpdateContainer gpEmployeeInformationToUpdateContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling updateEmployeeInformation(Async)");
        }

        // verify the required parameter 'gpEmployeeInformationToUpdateContainer' is set
        if (gpEmployeeInformationToUpdateContainer == null) {
            throw new ApiException("Missing the required parameter 'gpEmployeeInformationToUpdateContainer' when calling updateEmployeeInformation(Async)");
        }

        return updateEmployeeInformationCall(workerId, gpEmployeeInformationToUpdateContainer, _callback);

    }


    private ApiResponse<GPEmployeeInformationUpdatedContainer> updateEmployeeInformationWithHttpInfo(String workerId, GPEmployeeInformationToUpdateContainer gpEmployeeInformationToUpdateContainer) throws ApiException {
        okhttp3.Call localVarCall = updateEmployeeInformationValidateBeforeCall(workerId, gpEmployeeInformationToUpdateContainer, null);
        Type localVarReturnType = new TypeToken<GPEmployeeInformationUpdatedContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateEmployeeInformationAsync(String workerId, GPEmployeeInformationToUpdateContainer gpEmployeeInformationToUpdateContainer, final ApiCallback<GPEmployeeInformationUpdatedContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEmployeeInformationValidateBeforeCall(workerId, gpEmployeeInformationToUpdateContainer, _callback);
        Type localVarReturnType = new TypeToken<GPEmployeeInformationUpdatedContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateEmployeeInformationRequestBuilder {
        private final GPEmployeeInformationUpdateData data;
        private final String workerId;

        private UpdateEmployeeInformationRequestBuilder(GPEmployeeInformationUpdateData data, String workerId) {
            this.data = data;
            this.workerId = workerId;
        }

        /**
         * Build call for updateEmployeeInformation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GPEmployeeInformationToUpdateContainer gpEmployeeInformationToUpdateContainer = buildBodyParams();
            return updateEmployeeInformationCall(workerId, gpEmployeeInformationToUpdateContainer, _callback);
        }

        private GPEmployeeInformationToUpdateContainer buildBodyParams() {
            GPEmployeeInformationToUpdateContainer gpEmployeeInformationToUpdateContainer = new GPEmployeeInformationToUpdateContainer();
            gpEmployeeInformationToUpdateContainer.data(this.data);
            return gpEmployeeInformationToUpdateContainer;
        }

        /**
         * Execute updateEmployeeInformation request
         * @return GPEmployeeInformationUpdatedContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GPEmployeeInformationUpdatedContainer execute() throws ApiException {
            GPEmployeeInformationToUpdateContainer gpEmployeeInformationToUpdateContainer = buildBodyParams();
            ApiResponse<GPEmployeeInformationUpdatedContainer> localVarResp = updateEmployeeInformationWithHttpInfo(workerId, gpEmployeeInformationToUpdateContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateEmployeeInformation request with HTTP info returned
         * @return ApiResponse&lt;GPEmployeeInformationUpdatedContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GPEmployeeInformationUpdatedContainer> executeWithHttpInfo() throws ApiException {
            GPEmployeeInformationToUpdateContainer gpEmployeeInformationToUpdateContainer = buildBodyParams();
            return updateEmployeeInformationWithHttpInfo(workerId, gpEmployeeInformationToUpdateContainer);
        }

        /**
         * Execute updateEmployeeInformation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GPEmployeeInformationUpdatedContainer> _callback) throws ApiException {
            GPEmployeeInformationToUpdateContainer gpEmployeeInformationToUpdateContainer = buildBodyParams();
            return updateEmployeeInformationAsync(workerId, gpEmployeeInformationToUpdateContainer, _callback);
        }
    }

    /**
     * Update employee information
     * Update Global Payroll employee information.
     * @param workerId Unique identifier for a worker. (required)
     * @param gpEmployeeInformationToUpdateContainer The desired information of the Global Payroll employee (required)
     * @return UpdateEmployeeInformationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateEmployeeInformationRequestBuilder updateEmployeeInformation(GPEmployeeInformationUpdateData data, String workerId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new UpdateEmployeeInformationRequestBuilder(data, workerId);
    }
    private okhttp3.Call updatePtoPolicyCall(String workerId, GPEmployeePTOToUpdateContainer gpEmployeePTOToUpdateContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gpEmployeePTOToUpdateContainer;

        // create path and map variables
        String localVarPath = "/gp/workers/{worker_id}/pto-policy"
            .replace("{" + "worker_id" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePtoPolicyValidateBeforeCall(String workerId, GPEmployeePTOToUpdateContainer gpEmployeePTOToUpdateContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling updatePtoPolicy(Async)");
        }

        // verify the required parameter 'gpEmployeePTOToUpdateContainer' is set
        if (gpEmployeePTOToUpdateContainer == null) {
            throw new ApiException("Missing the required parameter 'gpEmployeePTOToUpdateContainer' when calling updatePtoPolicy(Async)");
        }

        return updatePtoPolicyCall(workerId, gpEmployeePTOToUpdateContainer, _callback);

    }


    private ApiResponse<GenericResultUpdated> updatePtoPolicyWithHttpInfo(String workerId, GPEmployeePTOToUpdateContainer gpEmployeePTOToUpdateContainer) throws ApiException {
        okhttp3.Call localVarCall = updatePtoPolicyValidateBeforeCall(workerId, gpEmployeePTOToUpdateContainer, null);
        Type localVarReturnType = new TypeToken<GenericResultUpdated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePtoPolicyAsync(String workerId, GPEmployeePTOToUpdateContainer gpEmployeePTOToUpdateContainer, final ApiCallback<GenericResultUpdated> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePtoPolicyValidateBeforeCall(workerId, gpEmployeePTOToUpdateContainer, _callback);
        Type localVarReturnType = new TypeToken<GenericResultUpdated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePtoPolicyRequestBuilder {
        private final GPEmployeePTOUpdateData data;
        private final String workerId;

        private UpdatePtoPolicyRequestBuilder(GPEmployeePTOUpdateData data, String workerId) {
            this.data = data;
            this.workerId = workerId;
        }

        /**
         * Build call for updatePtoPolicy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GPEmployeePTOToUpdateContainer gpEmployeePTOToUpdateContainer = buildBodyParams();
            return updatePtoPolicyCall(workerId, gpEmployeePTOToUpdateContainer, _callback);
        }

        private GPEmployeePTOToUpdateContainer buildBodyParams() {
            GPEmployeePTOToUpdateContainer gpEmployeePTOToUpdateContainer = new GPEmployeePTOToUpdateContainer();
            gpEmployeePTOToUpdateContainer.data(this.data);
            return gpEmployeePTOToUpdateContainer;
        }

        /**
         * Execute updatePtoPolicy request
         * @return GenericResultUpdated
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GenericResultUpdated execute() throws ApiException {
            GPEmployeePTOToUpdateContainer gpEmployeePTOToUpdateContainer = buildBodyParams();
            ApiResponse<GenericResultUpdated> localVarResp = updatePtoPolicyWithHttpInfo(workerId, gpEmployeePTOToUpdateContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePtoPolicy request with HTTP info returned
         * @return ApiResponse&lt;GenericResultUpdated&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GenericResultUpdated> executeWithHttpInfo() throws ApiException {
            GPEmployeePTOToUpdateContainer gpEmployeePTOToUpdateContainer = buildBodyParams();
            return updatePtoPolicyWithHttpInfo(workerId, gpEmployeePTOToUpdateContainer);
        }

        /**
         * Execute updatePtoPolicy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GenericResultUpdated> _callback) throws ApiException {
            GPEmployeePTOToUpdateContainer gpEmployeePTOToUpdateContainer = buildBodyParams();
            return updatePtoPolicyAsync(workerId, gpEmployeePTOToUpdateContainer, _callback);
        }
    }

    /**
     * Update PTO policy
     * Update the PTO policy of a Global Payroll employee.
     * @param workerId Unique identifier for a worker. (required)
     * @param gpEmployeePTOToUpdateContainer The desired PTO policy of the Global Payroll employee (required)
     * @return UpdatePtoPolicyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePtoPolicyRequestBuilder updatePtoPolicy(GPEmployeePTOUpdateData data, String workerId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new UpdatePtoPolicyRequestBuilder(data, workerId);
    }
    private okhttp3.Call updateWorkerAddressCall(String workerId, GPEmployeeAddressToUpdateContainer gpEmployeeAddressToUpdateContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gpEmployeeAddressToUpdateContainer;

        // create path and map variables
        String localVarPath = "/gp/workers/{worker_id}/address"
            .replace("{" + "worker_id" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWorkerAddressValidateBeforeCall(String workerId, GPEmployeeAddressToUpdateContainer gpEmployeeAddressToUpdateContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling updateWorkerAddress(Async)");
        }

        // verify the required parameter 'gpEmployeeAddressToUpdateContainer' is set
        if (gpEmployeeAddressToUpdateContainer == null) {
            throw new ApiException("Missing the required parameter 'gpEmployeeAddressToUpdateContainer' when calling updateWorkerAddress(Async)");
        }

        return updateWorkerAddressCall(workerId, gpEmployeeAddressToUpdateContainer, _callback);

    }


    private ApiResponse<GPEmployeeAddressUpdatedContainer> updateWorkerAddressWithHttpInfo(String workerId, GPEmployeeAddressToUpdateContainer gpEmployeeAddressToUpdateContainer) throws ApiException {
        okhttp3.Call localVarCall = updateWorkerAddressValidateBeforeCall(workerId, gpEmployeeAddressToUpdateContainer, null);
        Type localVarReturnType = new TypeToken<GPEmployeeAddressUpdatedContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateWorkerAddressAsync(String workerId, GPEmployeeAddressToUpdateContainer gpEmployeeAddressToUpdateContainer, final ApiCallback<GPEmployeeAddressUpdatedContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWorkerAddressValidateBeforeCall(workerId, gpEmployeeAddressToUpdateContainer, _callback);
        Type localVarReturnType = new TypeToken<GPEmployeeAddressUpdatedContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateWorkerAddressRequestBuilder {
        private final GPEmployeeAddressUpdateData data;
        private final String workerId;

        private UpdateWorkerAddressRequestBuilder(GPEmployeeAddressUpdateData data, String workerId) {
            this.data = data;
            this.workerId = workerId;
        }

        /**
         * Build call for updateWorkerAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GPEmployeeAddressToUpdateContainer gpEmployeeAddressToUpdateContainer = buildBodyParams();
            return updateWorkerAddressCall(workerId, gpEmployeeAddressToUpdateContainer, _callback);
        }

        private GPEmployeeAddressToUpdateContainer buildBodyParams() {
            GPEmployeeAddressToUpdateContainer gpEmployeeAddressToUpdateContainer = new GPEmployeeAddressToUpdateContainer();
            gpEmployeeAddressToUpdateContainer.data(this.data);
            return gpEmployeeAddressToUpdateContainer;
        }

        /**
         * Execute updateWorkerAddress request
         * @return GPEmployeeAddressUpdatedContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GPEmployeeAddressUpdatedContainer execute() throws ApiException {
            GPEmployeeAddressToUpdateContainer gpEmployeeAddressToUpdateContainer = buildBodyParams();
            ApiResponse<GPEmployeeAddressUpdatedContainer> localVarResp = updateWorkerAddressWithHttpInfo(workerId, gpEmployeeAddressToUpdateContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateWorkerAddress request with HTTP info returned
         * @return ApiResponse&lt;GPEmployeeAddressUpdatedContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GPEmployeeAddressUpdatedContainer> executeWithHttpInfo() throws ApiException {
            GPEmployeeAddressToUpdateContainer gpEmployeeAddressToUpdateContainer = buildBodyParams();
            return updateWorkerAddressWithHttpInfo(workerId, gpEmployeeAddressToUpdateContainer);
        }

        /**
         * Execute updateWorkerAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GPEmployeeAddressUpdatedContainer> _callback) throws ApiException {
            GPEmployeeAddressToUpdateContainer gpEmployeeAddressToUpdateContainer = buildBodyParams();
            return updateWorkerAddressAsync(workerId, gpEmployeeAddressToUpdateContainer, _callback);
        }
    }

    /**
     * Update address
     * Update the address of a Global Payroll employee.
     * @param workerId Unique identifier for a worker. (required)
     * @param gpEmployeeAddressToUpdateContainer The desired address of the Global Payroll employee (required)
     * @return UpdateWorkerAddressRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateWorkerAddressRequestBuilder updateWorkerAddress(GPEmployeeAddressUpdateData data, String workerId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new UpdateWorkerAddressRequestBuilder(data, workerId);
    }
}
