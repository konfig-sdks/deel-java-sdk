/*
 * Deel REST API
 * API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CountryListContainer;
import com.konfigthis.client.model.CurrencyListContainer;
import com.konfigthis.client.model.JobTitleListContainer;
import com.konfigthis.client.model.SeniorityListContainer;
import com.konfigthis.client.model.TimeoffTypeListContainer;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LookupsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LookupsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LookupsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getCountryListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lookups/countries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCountryListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getCountryListCall(_callback);

    }


    private ApiResponse<CountryListContainer> getCountryListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCountryListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CountryListContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCountryListAsync(final ApiCallback<CountryListContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCountryListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CountryListContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCountryListRequestBuilder {

        private GetCountryListRequestBuilder() {
        }

        /**
         * Build call for getCountryList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCountryListCall(_callback);
        }


        /**
         * Execute getCountryList request
         * @return CountryListContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public CountryListContainer execute() throws ApiException {
            ApiResponse<CountryListContainer> localVarResp = getCountryListWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCountryList request with HTTP info returned
         * @return ApiResponse&lt;CountryListContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CountryListContainer> executeWithHttpInfo() throws ApiException {
            return getCountryListWithHttpInfo();
        }

        /**
         * Execute getCountryList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CountryListContainer> _callback) throws ApiException {
            return getCountryListAsync(_callback);
        }
    }

    /**
     * Country list
     * Retrieve a list of countries supported by Deel.
     * @return GetCountryListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetCountryListRequestBuilder getCountryList() throws IllegalArgumentException {
        return new GetCountryListRequestBuilder();
    }
    private okhttp3.Call getCurrenciesListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lookups/currencies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrenciesListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getCurrenciesListCall(_callback);

    }


    private ApiResponse<CurrencyListContainer> getCurrenciesListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCurrenciesListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CurrencyListContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCurrenciesListAsync(final ApiCallback<CurrencyListContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrenciesListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CurrencyListContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCurrenciesListRequestBuilder {

        private GetCurrenciesListRequestBuilder() {
        }

        /**
         * Build call for getCurrenciesList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCurrenciesListCall(_callback);
        }


        /**
         * Execute getCurrenciesList request
         * @return CurrencyListContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public CurrencyListContainer execute() throws ApiException {
            ApiResponse<CurrencyListContainer> localVarResp = getCurrenciesListWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCurrenciesList request with HTTP info returned
         * @return ApiResponse&lt;CurrencyListContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CurrencyListContainer> executeWithHttpInfo() throws ApiException {
            return getCurrenciesListWithHttpInfo();
        }

        /**
         * Execute getCurrenciesList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CurrencyListContainer> _callback) throws ApiException {
            return getCurrenciesListAsync(_callback);
        }
    }

    /**
     * Currency list
     * Retrieve the list of currencies used by Deel.
     * @return GetCurrenciesListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetCurrenciesListRequestBuilder getCurrenciesList() throws IllegalArgumentException {
        return new GetCurrenciesListRequestBuilder();
    }
    private okhttp3.Call getJobTitlesListCall(Double limit, String afterCursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lookups/job-titles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (afterCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after_cursor", afterCursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobTitlesListValidateBeforeCall(Double limit, String afterCursor, final ApiCallback _callback) throws ApiException {
        return getJobTitlesListCall(limit, afterCursor, _callback);

    }


    private ApiResponse<JobTitleListContainer> getJobTitlesListWithHttpInfo(Double limit, String afterCursor) throws ApiException {
        okhttp3.Call localVarCall = getJobTitlesListValidateBeforeCall(limit, afterCursor, null);
        Type localVarReturnType = new TypeToken<JobTitleListContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getJobTitlesListAsync(Double limit, String afterCursor, final ApiCallback<JobTitleListContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobTitlesListValidateBeforeCall(limit, afterCursor, _callback);
        Type localVarReturnType = new TypeToken<JobTitleListContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetJobTitlesListRequestBuilder {
        private Double limit;
        private String afterCursor;

        private GetJobTitlesListRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit Return a page of results with given number of records; NOTE: technically ALL query parameters are strings or array of strings (optional, default to 99)
         * @return GetJobTitlesListRequestBuilder
         */
        public GetJobTitlesListRequestBuilder limit(Double limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set afterCursor
         * @param afterCursor Return next page of results after given cursor (optional)
         * @return GetJobTitlesListRequestBuilder
         */
        public GetJobTitlesListRequestBuilder afterCursor(String afterCursor) {
            this.afterCursor = afterCursor;
            return this;
        }
        
        /**
         * Build call for getJobTitlesList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getJobTitlesListCall(limit, afterCursor, _callback);
        }


        /**
         * Execute getJobTitlesList request
         * @return JobTitleListContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public JobTitleListContainer execute() throws ApiException {
            ApiResponse<JobTitleListContainer> localVarResp = getJobTitlesListWithHttpInfo(limit, afterCursor);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getJobTitlesList request with HTTP info returned
         * @return ApiResponse&lt;JobTitleListContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobTitleListContainer> executeWithHttpInfo() throws ApiException {
            return getJobTitlesListWithHttpInfo(limit, afterCursor);
        }

        /**
         * Execute getJobTitlesList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobTitleListContainer> _callback) throws ApiException {
            return getJobTitlesListAsync(limit, afterCursor, _callback);
        }
    }

    /**
     * Job titles list
     * Retrieve a list of pre-defined job titles in Deel platform.
     * @return GetJobTitlesListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetJobTitlesListRequestBuilder getJobTitlesList() throws IllegalArgumentException {
        return new GetJobTitlesListRequestBuilder();
    }
    private okhttp3.Call getSeniorityLevelsCall(Double limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lookups/seniorities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSeniorityLevelsValidateBeforeCall(Double limit, final ApiCallback _callback) throws ApiException {
        return getSeniorityLevelsCall(limit, _callback);

    }


    private ApiResponse<SeniorityListContainer> getSeniorityLevelsWithHttpInfo(Double limit) throws ApiException {
        okhttp3.Call localVarCall = getSeniorityLevelsValidateBeforeCall(limit, null);
        Type localVarReturnType = new TypeToken<SeniorityListContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSeniorityLevelsAsync(Double limit, final ApiCallback<SeniorityListContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSeniorityLevelsValidateBeforeCall(limit, _callback);
        Type localVarReturnType = new TypeToken<SeniorityListContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSeniorityLevelsRequestBuilder {
        private Double limit;

        private GetSeniorityLevelsRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit Return a page of results with given number of records; NOTE: technically ALL query parameters are strings or array of strings (optional, default to 50)
         * @return GetSeniorityLevelsRequestBuilder
         */
        public GetSeniorityLevelsRequestBuilder limit(Double limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getSeniorityLevels
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSeniorityLevelsCall(limit, _callback);
        }


        /**
         * Execute getSeniorityLevels request
         * @return SeniorityListContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public SeniorityListContainer execute() throws ApiException {
            ApiResponse<SeniorityListContainer> localVarResp = getSeniorityLevelsWithHttpInfo(limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSeniorityLevels request with HTTP info returned
         * @return ApiResponse&lt;SeniorityListContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SeniorityListContainer> executeWithHttpInfo() throws ApiException {
            return getSeniorityLevelsWithHttpInfo(limit);
        }

        /**
         * Execute getSeniorityLevels request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SeniorityListContainer> _callback) throws ApiException {
            return getSeniorityLevelsAsync(limit, _callback);
        }
    }

    /**
     * Seniority levels
     * Retrieve a list of pre-defined seniority level for roles in Deel platform.
     * @return GetSeniorityLevelsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetSeniorityLevelsRequestBuilder getSeniorityLevels() throws IllegalArgumentException {
        return new GetSeniorityLevelsRequestBuilder();
    }
    private okhttp3.Call getTimeOffTypesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lookups/time-off-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTimeOffTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getTimeOffTypesCall(_callback);

    }


    private ApiResponse<TimeoffTypeListContainer> getTimeOffTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getTimeOffTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<TimeoffTypeListContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTimeOffTypesAsync(final ApiCallback<TimeoffTypeListContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTimeOffTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<TimeoffTypeListContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTimeOffTypesRequestBuilder {

        private GetTimeOffTypesRequestBuilder() {
        }

        /**
         * Build call for getTimeOffTypes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTimeOffTypesCall(_callback);
        }


        /**
         * Execute getTimeOffTypes request
         * @return TimeoffTypeListContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public TimeoffTypeListContainer execute() throws ApiException {
            ApiResponse<TimeoffTypeListContainer> localVarResp = getTimeOffTypesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTimeOffTypes request with HTTP info returned
         * @return ApiResponse&lt;TimeoffTypeListContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeoffTypeListContainer> executeWithHttpInfo() throws ApiException {
            return getTimeOffTypesWithHttpInfo();
        }

        /**
         * Execute getTimeOffTypes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeoffTypeListContainer> _callback) throws ApiException {
            return getTimeOffTypesAsync(_callback);
        }
    }

    /**
     * Time-off types
     * Retrieve a list of pre-defined time off types to register in Deel platform.
     * @return GetTimeOffTypesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetTimeOffTypesRequestBuilder getTimeOffTypes() throws IllegalArgumentException {
        return new GetTimeOffTypesRequestBuilder();
    }
}
