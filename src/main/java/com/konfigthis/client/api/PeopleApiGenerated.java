/*
 * Deel REST API
 * API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreatePeopleTimeoff;
import com.konfigthis.client.model.EmployeeTimeoffsContainer;
import com.konfigthis.client.model.EmployeeTimeoffsCreationContainer;
import com.konfigthis.client.model.EmployeeTimeoffsEntitlementsContainer;
import com.konfigthis.client.model.EmployeeTimeoffsPoliciesContainer;
import java.io.File;
import com.konfigthis.client.model.GenericResultDeleted;
import com.konfigthis.client.model.GenericResultUpdated;
import com.konfigthis.client.model.HiringStatusEnum;
import com.konfigthis.client.model.HrisCompensation;
import com.konfigthis.client.model.HrisDirectEmployee;
import com.konfigthis.client.model.HrisDirectEmployeeContainer;
import com.konfigthis.client.model.HrisDirectEmployeeDetails;
import com.konfigthis.client.model.HrisDirectEmployeeVacationInfo;
import com.konfigthis.client.model.HrisTeamInformation;
import com.konfigthis.client.model.InternalPeopleContainer;
import com.konfigthis.client.model.PeopleByIdContainer;
import com.konfigthis.client.model.PeopleContainer;
import com.konfigthis.client.model.PeopleMe;
import com.konfigthis.client.model.PeopleSortByEnum;
import com.konfigthis.client.model.PeopleTimeOffContainer;
import com.konfigthis.client.model.SortDirEnum;
import com.konfigthis.client.model.TimeoffReviewInternal;
import com.konfigthis.client.model.TimeoffToReviewInternalContainer;
import com.konfigthis.client.model.UpdateWorkerDepartment;
import com.konfigthis.client.model.UpdateWorkerDepartmentContainer;
import com.konfigthis.client.model.UpdateWorkerWorkingLocation;
import com.konfigthis.client.model.UpdateWorkerWorkingLocationContainer;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PeopleApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PeopleApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PeopleApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addTimeOffRequestCall(String workerId, CreatePeopleTimeoff createPeopleTimeoff, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPeopleTimeoff;

        // create path and map variables
        String localVarPath = "/people/{worker_id}/time-offs"
            .replace("{" + "worker_id" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addTimeOffRequestValidateBeforeCall(String workerId, CreatePeopleTimeoff createPeopleTimeoff, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling addTimeOffRequest(Async)");
        }

        return addTimeOffRequestCall(workerId, createPeopleTimeoff, _callback);

    }


    private ApiResponse<EmployeeTimeoffsCreationContainer> addTimeOffRequestWithHttpInfo(String workerId, CreatePeopleTimeoff createPeopleTimeoff) throws ApiException {
        okhttp3.Call localVarCall = addTimeOffRequestValidateBeforeCall(workerId, createPeopleTimeoff, null);
        Type localVarReturnType = new TypeToken<EmployeeTimeoffsCreationContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addTimeOffRequestAsync(String workerId, CreatePeopleTimeoff createPeopleTimeoff, final ApiCallback<EmployeeTimeoffsCreationContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = addTimeOffRequestValidateBeforeCall(workerId, createPeopleTimeoff, _callback);
        Type localVarReturnType = new TypeToken<EmployeeTimeoffsCreationContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddTimeOffRequestRequestBuilder {
        private final String type;
        private final String startDate;
        private final String endDate;
        private final String reason;
        private final String workerId;
        private File attachments;

        private AddTimeOffRequestRequestBuilder(String type, String startDate, String endDate, String reason, String workerId) {
            this.type = type;
            this.startDate = startDate;
            this.endDate = endDate;
            this.reason = reason;
            this.workerId = workerId;
        }

        /**
         * Set attachments
         * @param attachments Attachments for employee&#39;s time off. (optional)
         * @return AddTimeOffRequestRequestBuilder
         */
        public AddTimeOffRequestRequestBuilder attachments(File attachments) {
            this.attachments = attachments;
            return this;
        }
        
        /**
         * Build call for addTimeOffRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreatePeopleTimeoff createPeopleTimeoff = buildBodyParams();
            return addTimeOffRequestCall(workerId, createPeopleTimeoff, _callback);
        }

        private CreatePeopleTimeoff buildBodyParams() {
            CreatePeopleTimeoff createPeopleTimeoff = new CreatePeopleTimeoff();
            if (this.type != null)
            createPeopleTimeoff.type(CreatePeopleTimeoff.TypeEnum.fromValue(this.type));
            createPeopleTimeoff.startDate(this.startDate);
            createPeopleTimeoff.endDate(this.endDate);
            createPeopleTimeoff.reason(this.reason);
            createPeopleTimeoff.attachments(this.attachments);
            return createPeopleTimeoff;
        }

        /**
         * Execute addTimeOffRequest request
         * @return EmployeeTimeoffsCreationContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeTimeoffsCreationContainer execute() throws ApiException {
            CreatePeopleTimeoff createPeopleTimeoff = buildBodyParams();
            ApiResponse<EmployeeTimeoffsCreationContainer> localVarResp = addTimeOffRequestWithHttpInfo(workerId, createPeopleTimeoff);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addTimeOffRequest request with HTTP info returned
         * @return ApiResponse&lt;EmployeeTimeoffsCreationContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeTimeoffsCreationContainer> executeWithHttpInfo() throws ApiException {
            CreatePeopleTimeoff createPeopleTimeoff = buildBodyParams();
            return addTimeOffRequestWithHttpInfo(workerId, createPeopleTimeoff);
        }

        /**
         * Execute addTimeOffRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeTimeoffsCreationContainer> _callback) throws ApiException {
            CreatePeopleTimeoff createPeopleTimeoff = buildBodyParams();
            return addTimeOffRequestAsync(workerId, createPeopleTimeoff, _callback);
        }
    }

    /**
     * Add a time off request
     * Add a time off request for a worker. New requests are auto-approved.
     * @param workerId Unique identifier for a worker. (required)
     * @return AddTimeOffRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AddTimeOffRequestRequestBuilder addTimeOffRequest(String type, String startDate, String endDate, String reason, String workerId) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (startDate == null) throw new IllegalArgumentException("\"startDate\" is required but got null");
            

        if (endDate == null) throw new IllegalArgumentException("\"endDate\" is required but got null");
            

        if (reason == null) throw new IllegalArgumentException("\"reason\" is required but got null");
            

        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new AddTimeOffRequestRequestBuilder(type, startDate, endDate, reason, workerId);
    }
    private okhttp3.Call createDirectEmployeeCall(HrisDirectEmployee hrisDirectEmployee, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hrisDirectEmployee;

        // create path and map variables
        String localVarPath = "/hris/direct-employees";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDirectEmployeeValidateBeforeCall(HrisDirectEmployee hrisDirectEmployee, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hrisDirectEmployee' is set
        if (hrisDirectEmployee == null) {
            throw new ApiException("Missing the required parameter 'hrisDirectEmployee' when calling createDirectEmployee(Async)");
        }

        return createDirectEmployeeCall(hrisDirectEmployee, _callback);

    }


    private ApiResponse<HrisDirectEmployeeContainer> createDirectEmployeeWithHttpInfo(HrisDirectEmployee hrisDirectEmployee) throws ApiException {
        okhttp3.Call localVarCall = createDirectEmployeeValidateBeforeCall(hrisDirectEmployee, null);
        Type localVarReturnType = new TypeToken<HrisDirectEmployeeContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createDirectEmployeeAsync(HrisDirectEmployee hrisDirectEmployee, final ApiCallback<HrisDirectEmployeeContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDirectEmployeeValidateBeforeCall(hrisDirectEmployee, _callback);
        Type localVarReturnType = new TypeToken<HrisDirectEmployeeContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateDirectEmployeeRequestBuilder {
        private final HrisDirectEmployeeDetails employeeDetails;
        private final HrisTeamInformation teamInformation;
        private final Object jobInformation;
        private final HrisCompensation compensation;
        private final Object contract;
        private HrisDirectEmployeeVacationInfo vacationInfo;

        private CreateDirectEmployeeRequestBuilder(HrisDirectEmployeeDetails employeeDetails, HrisTeamInformation teamInformation, Object jobInformation, HrisCompensation compensation, Object contract) {
            this.employeeDetails = employeeDetails;
            this.teamInformation = teamInformation;
            this.jobInformation = jobInformation;
            this.compensation = compensation;
            this.contract = contract;
        }

        /**
         * Set vacationInfo
         * @param vacationInfo  (optional)
         * @return CreateDirectEmployeeRequestBuilder
         */
        public CreateDirectEmployeeRequestBuilder vacationInfo(HrisDirectEmployeeVacationInfo vacationInfo) {
            this.vacationInfo = vacationInfo;
            return this;
        }
        
        /**
         * Build call for createDirectEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Hris direct employee object that was created or edited </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> A matching profile already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            HrisDirectEmployee hrisDirectEmployee = buildBodyParams();
            return createDirectEmployeeCall(hrisDirectEmployee, _callback);
        }

        private HrisDirectEmployee buildBodyParams() {
            HrisDirectEmployee hrisDirectEmployee = new HrisDirectEmployee();
            hrisDirectEmployee.employeeDetails(this.employeeDetails);
            hrisDirectEmployee.teamInformation(this.teamInformation);
            hrisDirectEmployee.jobInformation(this.jobInformation);
            hrisDirectEmployee.compensation(this.compensation);
            hrisDirectEmployee.contract(this.contract);
            hrisDirectEmployee.vacationInfo(this.vacationInfo);
            return hrisDirectEmployee;
        }

        /**
         * Execute createDirectEmployee request
         * @return HrisDirectEmployeeContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Hris direct employee object that was created or edited </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> A matching profile already exists </td><td>  -  </td></tr>
         </table>
         */
        public HrisDirectEmployeeContainer execute() throws ApiException {
            HrisDirectEmployee hrisDirectEmployee = buildBodyParams();
            ApiResponse<HrisDirectEmployeeContainer> localVarResp = createDirectEmployeeWithHttpInfo(hrisDirectEmployee);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createDirectEmployee request with HTTP info returned
         * @return ApiResponse&lt;HrisDirectEmployeeContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Hris direct employee object that was created or edited </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> A matching profile already exists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HrisDirectEmployeeContainer> executeWithHttpInfo() throws ApiException {
            HrisDirectEmployee hrisDirectEmployee = buildBodyParams();
            return createDirectEmployeeWithHttpInfo(hrisDirectEmployee);
        }

        /**
         * Execute createDirectEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Hris direct employee object that was created or edited </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> A matching profile already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HrisDirectEmployeeContainer> _callback) throws ApiException {
            HrisDirectEmployee hrisDirectEmployee = buildBodyParams();
            return createDirectEmployeeAsync(hrisDirectEmployee, _callback);
        }
    }

    /**
     * Create a new Hris direct employee
     * 
     * @param hrisDirectEmployee Hris direct employee object that will be created (required)
     * @return CreateDirectEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Hris direct employee object that was created or edited </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A matching profile already exists </td><td>  -  </td></tr>
     </table>
     */
    public CreateDirectEmployeeRequestBuilder createDirectEmployee(HrisDirectEmployeeDetails employeeDetails, HrisTeamInformation teamInformation, Object jobInformation, HrisCompensation compensation, Object contract) throws IllegalArgumentException {
        if (employeeDetails == null) throw new IllegalArgumentException("\"employeeDetails\" is required but got null");
        if (teamInformation == null) throw new IllegalArgumentException("\"teamInformation\" is required but got null");
        
        if (compensation == null) throw new IllegalArgumentException("\"compensation\" is required but got null");
        
        return new CreateDirectEmployeeRequestBuilder(employeeDetails, teamInformation, jobInformation, compensation, contract);
    }
    private okhttp3.Call deleteTimeOffRequestCall(String timeoffId, String workerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{worker_id}/time-offs/{timeoff_id}"
            .replace("{" + "timeoff_id" + "}", localVarApiClient.escapeString(timeoffId.toString()))
            .replace("{" + "worker_id" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTimeOffRequestValidateBeforeCall(String timeoffId, String workerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timeoffId' is set
        if (timeoffId == null) {
            throw new ApiException("Missing the required parameter 'timeoffId' when calling deleteTimeOffRequest(Async)");
        }

        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling deleteTimeOffRequest(Async)");
        }

        return deleteTimeOffRequestCall(timeoffId, workerId, _callback);

    }


    private ApiResponse<GenericResultDeleted> deleteTimeOffRequestWithHttpInfo(String timeoffId, String workerId) throws ApiException {
        okhttp3.Call localVarCall = deleteTimeOffRequestValidateBeforeCall(timeoffId, workerId, null);
        Type localVarReturnType = new TypeToken<GenericResultDeleted>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteTimeOffRequestAsync(String timeoffId, String workerId, final ApiCallback<GenericResultDeleted> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTimeOffRequestValidateBeforeCall(timeoffId, workerId, _callback);
        Type localVarReturnType = new TypeToken<GenericResultDeleted>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteTimeOffRequestRequestBuilder {
        private final String timeoffId;
        private final String workerId;

        private DeleteTimeOffRequestRequestBuilder(String timeoffId, String workerId) {
            this.timeoffId = timeoffId;
            this.workerId = workerId;
        }

        /**
         * Build call for deleteTimeOffRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteTimeOffRequestCall(timeoffId, workerId, _callback);
        }


        /**
         * Execute deleteTimeOffRequest request
         * @return GenericResultDeleted
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GenericResultDeleted execute() throws ApiException {
            ApiResponse<GenericResultDeleted> localVarResp = deleteTimeOffRequestWithHttpInfo(timeoffId, workerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteTimeOffRequest request with HTTP info returned
         * @return ApiResponse&lt;GenericResultDeleted&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GenericResultDeleted> executeWithHttpInfo() throws ApiException {
            return deleteTimeOffRequestWithHttpInfo(timeoffId, workerId);
        }

        /**
         * Execute deleteTimeOffRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GenericResultDeleted> _callback) throws ApiException {
            return deleteTimeOffRequestAsync(timeoffId, workerId, _callback);
        }
    }

    /**
     * Delete a time off request
     * Delete a time off request.
     * @param timeoffId Unique identifier for a time-off in Deel. (required)
     * @param workerId Unique identifier for a worker. (required)
     * @return DeleteTimeOffRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteTimeOffRequestRequestBuilder deleteTimeOffRequest(String timeoffId, String workerId) throws IllegalArgumentException {
        if (timeoffId == null) throw new IllegalArgumentException("\"timeoffId\" is required but got null");
            

        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new DeleteTimeOffRequestRequestBuilder(timeoffId, workerId);
    }
    private okhttp3.Call editTimeOffRequestCall(String timeoffId, String workerId, PeopleTimeOffContainer peopleTimeOffContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = peopleTimeOffContainer;

        // create path and map variables
        String localVarPath = "/people/{worker_id}/time-offs/{timeoff_id}"
            .replace("{" + "timeoff_id" + "}", localVarApiClient.escapeString(timeoffId.toString()))
            .replace("{" + "worker_id" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editTimeOffRequestValidateBeforeCall(String timeoffId, String workerId, PeopleTimeOffContainer peopleTimeOffContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timeoffId' is set
        if (timeoffId == null) {
            throw new ApiException("Missing the required parameter 'timeoffId' when calling editTimeOffRequest(Async)");
        }

        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling editTimeOffRequest(Async)");
        }

        return editTimeOffRequestCall(timeoffId, workerId, peopleTimeOffContainer, _callback);

    }


    private ApiResponse<EmployeeTimeoffsCreationContainer> editTimeOffRequestWithHttpInfo(String timeoffId, String workerId, PeopleTimeOffContainer peopleTimeOffContainer) throws ApiException {
        okhttp3.Call localVarCall = editTimeOffRequestValidateBeforeCall(timeoffId, workerId, peopleTimeOffContainer, null);
        Type localVarReturnType = new TypeToken<EmployeeTimeoffsCreationContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call editTimeOffRequestAsync(String timeoffId, String workerId, PeopleTimeOffContainer peopleTimeOffContainer, final ApiCallback<EmployeeTimeoffsCreationContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = editTimeOffRequestValidateBeforeCall(timeoffId, workerId, peopleTimeOffContainer, _callback);
        Type localVarReturnType = new TypeToken<EmployeeTimeoffsCreationContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EditTimeOffRequestRequestBuilder {
        private final String timeoffId;
        private final String workerId;
        private String type;
        private String startDate;
        private String endDate;
        private String reason;
        private File attachments;

        private EditTimeOffRequestRequestBuilder(String timeoffId, String workerId) {
            this.timeoffId = timeoffId;
            this.workerId = workerId;
        }

        /**
         * Set type
         * @param type Time off type. (optional)
         * @return EditTimeOffRequestRequestBuilder
         */
        public EditTimeOffRequestRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate Start date of employee&#39;s time off. (optional)
         * @return EditTimeOffRequestRequestBuilder
         */
        public EditTimeOffRequestRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate End date of employee&#39;s time off. (optional)
         * @return EditTimeOffRequestRequestBuilder
         */
        public EditTimeOffRequestRequestBuilder endDate(String endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set reason
         * @param reason Description for employee&#39;s time off. (optional)
         * @return EditTimeOffRequestRequestBuilder
         */
        public EditTimeOffRequestRequestBuilder reason(String reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Set attachments
         * @param attachments Attachments for employee&#39;s time off. (optional)
         * @return EditTimeOffRequestRequestBuilder
         */
        public EditTimeOffRequestRequestBuilder attachments(File attachments) {
            this.attachments = attachments;
            return this;
        }
        
        /**
         * Build call for editTimeOffRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PeopleTimeOffContainer peopleTimeOffContainer = buildBodyParams();
            return editTimeOffRequestCall(timeoffId, workerId, peopleTimeOffContainer, _callback);
        }

        private PeopleTimeOffContainer buildBodyParams() {
            PeopleTimeOffContainer peopleTimeOffContainer = new PeopleTimeOffContainer();
            if (this.type != null)
            peopleTimeOffContainer.type(PeopleTimeOffContainer.TypeEnum.fromValue(this.type));
            peopleTimeOffContainer.startDate(this.startDate);
            peopleTimeOffContainer.endDate(this.endDate);
            peopleTimeOffContainer.reason(this.reason);
            peopleTimeOffContainer.attachments(this.attachments);
            return peopleTimeOffContainer;
        }

        /**
         * Execute editTimeOffRequest request
         * @return EmployeeTimeoffsCreationContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeTimeoffsCreationContainer execute() throws ApiException {
            PeopleTimeOffContainer peopleTimeOffContainer = buildBodyParams();
            ApiResponse<EmployeeTimeoffsCreationContainer> localVarResp = editTimeOffRequestWithHttpInfo(timeoffId, workerId, peopleTimeOffContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute editTimeOffRequest request with HTTP info returned
         * @return ApiResponse&lt;EmployeeTimeoffsCreationContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeTimeoffsCreationContainer> executeWithHttpInfo() throws ApiException {
            PeopleTimeOffContainer peopleTimeOffContainer = buildBodyParams();
            return editTimeOffRequestWithHttpInfo(timeoffId, workerId, peopleTimeOffContainer);
        }

        /**
         * Execute editTimeOffRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeTimeoffsCreationContainer> _callback) throws ApiException {
            PeopleTimeOffContainer peopleTimeOffContainer = buildBodyParams();
            return editTimeOffRequestAsync(timeoffId, workerId, peopleTimeOffContainer, _callback);
        }
    }

    /**
     * Edit a time off request
     * Edit a time off request for a worker.
     * @param timeoffId Unique identifier for a time-off in Deel. (required)
     * @param workerId Unique identifier for a worker. (required)
     * @return EditTimeOffRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public EditTimeOffRequestRequestBuilder editTimeOffRequest(String timeoffId, String workerId) throws IllegalArgumentException {
        if (timeoffId == null) throw new IllegalArgumentException("\"timeoffId\" is required but got null");
            

        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new EditTimeOffRequestRequestBuilder(timeoffId, workerId);
    }
    private okhttp3.Call getCurrentProfileCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrentProfileValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getCurrentProfileCall(_callback);

    }


    private ApiResponse<PeopleMe> getCurrentProfileWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCurrentProfileValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<PeopleMe>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCurrentProfileAsync(final ApiCallback<PeopleMe> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrentProfileValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<PeopleMe>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCurrentProfileRequestBuilder {

        private GetCurrentProfileRequestBuilder() {
        }

        /**
         * Build call for getCurrentProfile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCurrentProfileCall(_callback);
        }


        /**
         * Execute getCurrentProfile request
         * @return PeopleMe
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public PeopleMe execute() throws ApiException {
            ApiResponse<PeopleMe> localVarResp = getCurrentProfileWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCurrentProfile request with HTTP info returned
         * @return ApiResponse&lt;PeopleMe&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PeopleMe> executeWithHttpInfo() throws ApiException {
            return getCurrentProfileWithHttpInfo();
        }

        /**
         * Execute getCurrentProfile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PeopleMe> _callback) throws ApiException {
            return getCurrentProfileAsync(_callback);
        }
    }

    /**
     * Get my current profile
     * 
     * @return GetCurrentProfileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetCurrentProfileRequestBuilder getCurrentProfile() throws IllegalArgumentException {
        return new GetCurrentProfileRequestBuilder();
    }
    private okhttp3.Call getListCall(Double offset, Double limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/internal/people";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListValidateBeforeCall(Double offset, Double limit, final ApiCallback _callback) throws ApiException {
        return getListCall(offset, limit, _callback);

    }


    private ApiResponse<InternalPeopleContainer> getListWithHttpInfo(Double offset, Double limit) throws ApiException {
        okhttp3.Call localVarCall = getListValidateBeforeCall(offset, limit, null);
        Type localVarReturnType = new TypeToken<InternalPeopleContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getListAsync(Double offset, Double limit, final ApiCallback<InternalPeopleContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListValidateBeforeCall(offset, limit, _callback);
        Type localVarReturnType = new TypeToken<InternalPeopleContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetListRequestBuilder {
        private Double offset;
        private Double limit;

        private GetListRequestBuilder() {
        }

        /**
         * Set offset
         * @param offset Return a page of results with given number of records. (optional, default to 0)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder offset(Double offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Return a page of results with given number of records. (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder limit(Double limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListCall(offset, limit, _callback);
        }


        /**
         * Execute getList request
         * @return InternalPeopleContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public InternalPeopleContainer execute() throws ApiException {
            ApiResponse<InternalPeopleContainer> localVarResp = getListWithHttpInfo(offset, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getList request with HTTP info returned
         * @return ApiResponse&lt;InternalPeopleContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InternalPeopleContainer> executeWithHttpInfo() throws ApiException {
            return getListWithHttpInfo(offset, limit);
        }

        /**
         * Execute getList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InternalPeopleContainer> _callback) throws ApiException {
            return getListAsync(offset, limit, _callback);
        }
    }

    /**
     * Get internal people list
     * 
     * @return GetListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetListRequestBuilder getList() throws IllegalArgumentException {
        return new GetListRequestBuilder();
    }
    private okhttp3.Call getList_0Call(Double offset, Double limit, String search, PeopleSortByEnum sortBy, SortDirEnum sortOrder, HiringStatusEnum hiringStatuses, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        if (hiringStatuses != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hiring_statuses[]", hiringStatuses));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getList_0ValidateBeforeCall(Double offset, Double limit, String search, PeopleSortByEnum sortBy, SortDirEnum sortOrder, HiringStatusEnum hiringStatuses, final ApiCallback _callback) throws ApiException {
        return getList_0Call(offset, limit, search, sortBy, sortOrder, hiringStatuses, _callback);

    }


    private ApiResponse<PeopleContainer> getList_0WithHttpInfo(Double offset, Double limit, String search, PeopleSortByEnum sortBy, SortDirEnum sortOrder, HiringStatusEnum hiringStatuses) throws ApiException {
        okhttp3.Call localVarCall = getList_0ValidateBeforeCall(offset, limit, search, sortBy, sortOrder, hiringStatuses, null);
        Type localVarReturnType = new TypeToken<PeopleContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getList_0Async(Double offset, Double limit, String search, PeopleSortByEnum sortBy, SortDirEnum sortOrder, HiringStatusEnum hiringStatuses, final ApiCallback<PeopleContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getList_0ValidateBeforeCall(offset, limit, search, sortBy, sortOrder, hiringStatuses, _callback);
        Type localVarReturnType = new TypeToken<PeopleContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetList0RequestBuilder {
        private Double offset;
        private Double limit;
        private String search;
        private PeopleSortByEnum sortBy;
        private SortDirEnum sortOrder;
        private HiringStatusEnum hiringStatuses;

        private GetList0RequestBuilder() {
        }

        /**
         * Set offset
         * @param offset Return a page of results with given number of records. (optional, default to 0)
         * @return GetList0RequestBuilder
         */
        public GetList0RequestBuilder offset(Double offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Return a page of results with given number of records. (optional)
         * @return GetList0RequestBuilder
         */
        public GetList0RequestBuilder limit(Double limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set search
         * @param search Include a contract if by name or contractor name contains given search term. (optional)
         * @return GetList0RequestBuilder
         */
        public GetList0RequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Set sortBy
         * @param sortBy Sort people by given field name. (optional)
         * @return GetList0RequestBuilder
         */
        public GetList0RequestBuilder sortBy(PeopleSortByEnum sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Set sortOrder
         * @param sortOrder Order direction of results; ascending or descending. (optional)
         * @return GetList0RequestBuilder
         */
        public GetList0RequestBuilder sortOrder(SortDirEnum sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }
        
        /**
         * Set hiringStatuses
         * @param hiringStatuses Employee&#39;s current hiring status. (optional)
         * @return GetList0RequestBuilder
         */
        public GetList0RequestBuilder hiringStatuses(HiringStatusEnum hiringStatuses) {
            this.hiringStatuses = hiringStatuses;
            return this;
        }
        
        /**
         * Build call for getList_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getList_0Call(offset, limit, search, sortBy, sortOrder, hiringStatuses, _callback);
        }


        /**
         * Execute getList_0 request
         * @return PeopleContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public PeopleContainer execute() throws ApiException {
            ApiResponse<PeopleContainer> localVarResp = getList_0WithHttpInfo(offset, limit, search, sortBy, sortOrder, hiringStatuses);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getList_0 request with HTTP info returned
         * @return ApiResponse&lt;PeopleContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PeopleContainer> executeWithHttpInfo() throws ApiException {
            return getList_0WithHttpInfo(offset, limit, search, sortBy, sortOrder, hiringStatuses);
        }

        /**
         * Execute getList_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PeopleContainer> _callback) throws ApiException {
            return getList_0Async(offset, limit, search, sortBy, sortOrder, hiringStatuses, _callback);
        }
    }

    /**
     * List of people
     * Retrieve a list of People in your organization.
     * @return GetList0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetList0RequestBuilder getList_0() throws IllegalArgumentException {
        return new GetList0RequestBuilder();
    }
    private okhttp3.Call getPersonCall(String workerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{worker_id}"
            .replace("{" + "worker_id" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPersonValidateBeforeCall(String workerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling getPerson(Async)");
        }

        return getPersonCall(workerId, _callback);

    }


    private ApiResponse<PeopleByIdContainer> getPersonWithHttpInfo(String workerId) throws ApiException {
        okhttp3.Call localVarCall = getPersonValidateBeforeCall(workerId, null);
        Type localVarReturnType = new TypeToken<PeopleByIdContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPersonAsync(String workerId, final ApiCallback<PeopleByIdContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPersonValidateBeforeCall(workerId, _callback);
        Type localVarReturnType = new TypeToken<PeopleByIdContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPersonRequestBuilder {
        private final String workerId;

        private GetPersonRequestBuilder(String workerId) {
            this.workerId = workerId;
        }

        /**
         * Build call for getPerson
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPersonCall(workerId, _callback);
        }


        /**
         * Execute getPerson request
         * @return PeopleByIdContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public PeopleByIdContainer execute() throws ApiException {
            ApiResponse<PeopleByIdContainer> localVarResp = getPersonWithHttpInfo(workerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPerson request with HTTP info returned
         * @return ApiResponse&lt;PeopleByIdContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PeopleByIdContainer> executeWithHttpInfo() throws ApiException {
            return getPersonWithHttpInfo(workerId);
        }

        /**
         * Execute getPerson request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PeopleByIdContainer> _callback) throws ApiException {
            return getPersonAsync(workerId, _callback);
        }
    }

    /**
     * Retrieve a single person
     * Retrieve a single person in your organization.
     * @param workerId Unique identifier for a worker. (required)
     * @return GetPersonRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetPersonRequestBuilder getPerson(String workerId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new GetPersonRequestBuilder(workerId);
    }
    private okhttp3.Call listTimeOffEntitlementsCall(String workerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{worker_id}/time-offs/entitlements"
            .replace("{" + "worker_id" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTimeOffEntitlementsValidateBeforeCall(String workerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling listTimeOffEntitlements(Async)");
        }

        return listTimeOffEntitlementsCall(workerId, _callback);

    }


    private ApiResponse<EmployeeTimeoffsEntitlementsContainer> listTimeOffEntitlementsWithHttpInfo(String workerId) throws ApiException {
        okhttp3.Call localVarCall = listTimeOffEntitlementsValidateBeforeCall(workerId, null);
        Type localVarReturnType = new TypeToken<EmployeeTimeoffsEntitlementsContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTimeOffEntitlementsAsync(String workerId, final ApiCallback<EmployeeTimeoffsEntitlementsContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTimeOffEntitlementsValidateBeforeCall(workerId, _callback);
        Type localVarReturnType = new TypeToken<EmployeeTimeoffsEntitlementsContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTimeOffEntitlementsRequestBuilder {
        private final String workerId;

        private ListTimeOffEntitlementsRequestBuilder(String workerId) {
            this.workerId = workerId;
        }

        /**
         * Build call for listTimeOffEntitlements
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTimeOffEntitlementsCall(workerId, _callback);
        }


        /**
         * Execute listTimeOffEntitlements request
         * @return EmployeeTimeoffsEntitlementsContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeTimeoffsEntitlementsContainer execute() throws ApiException {
            ApiResponse<EmployeeTimeoffsEntitlementsContainer> localVarResp = listTimeOffEntitlementsWithHttpInfo(workerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTimeOffEntitlements request with HTTP info returned
         * @return ApiResponse&lt;EmployeeTimeoffsEntitlementsContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeTimeoffsEntitlementsContainer> executeWithHttpInfo() throws ApiException {
            return listTimeOffEntitlementsWithHttpInfo(workerId);
        }

        /**
         * Execute listTimeOffEntitlements request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeTimeoffsEntitlementsContainer> _callback) throws ApiException {
            return listTimeOffEntitlementsAsync(workerId, _callback);
        }
    }

    /**
     * List of time off entitlements
     * Retrieve a list of time off entitlements for a worker.
     * @param workerId Unique identifier for a worker. (required)
     * @return ListTimeOffEntitlementsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ListTimeOffEntitlementsRequestBuilder listTimeOffEntitlements(String workerId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new ListTimeOffEntitlementsRequestBuilder(workerId);
    }
    private okhttp3.Call listTimeOffPoliciesCall(String workerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{worker_id}/time-offs/policies"
            .replace("{" + "worker_id" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTimeOffPoliciesValidateBeforeCall(String workerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling listTimeOffPolicies(Async)");
        }

        return listTimeOffPoliciesCall(workerId, _callback);

    }


    private ApiResponse<EmployeeTimeoffsPoliciesContainer> listTimeOffPoliciesWithHttpInfo(String workerId) throws ApiException {
        okhttp3.Call localVarCall = listTimeOffPoliciesValidateBeforeCall(workerId, null);
        Type localVarReturnType = new TypeToken<EmployeeTimeoffsPoliciesContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTimeOffPoliciesAsync(String workerId, final ApiCallback<EmployeeTimeoffsPoliciesContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTimeOffPoliciesValidateBeforeCall(workerId, _callback);
        Type localVarReturnType = new TypeToken<EmployeeTimeoffsPoliciesContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTimeOffPoliciesRequestBuilder {
        private final String workerId;

        private ListTimeOffPoliciesRequestBuilder(String workerId) {
            this.workerId = workerId;
        }

        /**
         * Build call for listTimeOffPolicies
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTimeOffPoliciesCall(workerId, _callback);
        }


        /**
         * Execute listTimeOffPolicies request
         * @return EmployeeTimeoffsPoliciesContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeTimeoffsPoliciesContainer execute() throws ApiException {
            ApiResponse<EmployeeTimeoffsPoliciesContainer> localVarResp = listTimeOffPoliciesWithHttpInfo(workerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTimeOffPolicies request with HTTP info returned
         * @return ApiResponse&lt;EmployeeTimeoffsPoliciesContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeTimeoffsPoliciesContainer> executeWithHttpInfo() throws ApiException {
            return listTimeOffPoliciesWithHttpInfo(workerId);
        }

        /**
         * Execute listTimeOffPolicies request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeTimeoffsPoliciesContainer> _callback) throws ApiException {
            return listTimeOffPoliciesAsync(workerId, _callback);
        }
    }

    /**
     * List of time off policies
     * Retrieve a list of time off policies for a worker.
     * @param workerId Unique identifier for a worker. (required)
     * @return ListTimeOffPoliciesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ListTimeOffPoliciesRequestBuilder listTimeOffPolicies(String workerId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new ListTimeOffPoliciesRequestBuilder(workerId);
    }
    private okhttp3.Call listTimeOffsByWorkerIdCall(String workerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{worker_id}/time-offs"
            .replace("{" + "worker_id" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTimeOffsByWorkerIdValidateBeforeCall(String workerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling listTimeOffsByWorkerId(Async)");
        }

        return listTimeOffsByWorkerIdCall(workerId, _callback);

    }


    private ApiResponse<EmployeeTimeoffsContainer> listTimeOffsByWorkerIdWithHttpInfo(String workerId) throws ApiException {
        okhttp3.Call localVarCall = listTimeOffsByWorkerIdValidateBeforeCall(workerId, null);
        Type localVarReturnType = new TypeToken<EmployeeTimeoffsContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTimeOffsByWorkerIdAsync(String workerId, final ApiCallback<EmployeeTimeoffsContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTimeOffsByWorkerIdValidateBeforeCall(workerId, _callback);
        Type localVarReturnType = new TypeToken<EmployeeTimeoffsContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTimeOffsByWorkerIdRequestBuilder {
        private final String workerId;

        private ListTimeOffsByWorkerIdRequestBuilder(String workerId) {
            this.workerId = workerId;
        }

        /**
         * Build call for listTimeOffsByWorkerId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTimeOffsByWorkerIdCall(workerId, _callback);
        }


        /**
         * Execute listTimeOffsByWorkerId request
         * @return EmployeeTimeoffsContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeTimeoffsContainer execute() throws ApiException {
            ApiResponse<EmployeeTimeoffsContainer> localVarResp = listTimeOffsByWorkerIdWithHttpInfo(workerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTimeOffsByWorkerId request with HTTP info returned
         * @return ApiResponse&lt;EmployeeTimeoffsContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeTimeoffsContainer> executeWithHttpInfo() throws ApiException {
            return listTimeOffsByWorkerIdWithHttpInfo(workerId);
        }

        /**
         * Execute listTimeOffsByWorkerId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeTimeoffsContainer> _callback) throws ApiException {
            return listTimeOffsByWorkerIdAsync(workerId, _callback);
        }
    }

    /**
     * List of time off entries
     * List of time offs by worker id. Worker id can be retreived using /people endpoint.
     * @param workerId Unique identifier for a worker. (required)
     * @return ListTimeOffsByWorkerIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ListTimeOffsByWorkerIdRequestBuilder listTimeOffsByWorkerId(String workerId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new ListTimeOffsByWorkerIdRequestBuilder(workerId);
    }
    private okhttp3.Call reviewTimeOffCall(String timeoffId, String workerId, TimeoffToReviewInternalContainer timeoffToReviewInternalContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeoffToReviewInternalContainer;

        // create path and map variables
        String localVarPath = "/people/{worker_id}/time-offs/{timeoff_id}/review"
            .replace("{" + "timeoff_id" + "}", localVarApiClient.escapeString(timeoffId.toString()))
            .replace("{" + "worker_id" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reviewTimeOffValidateBeforeCall(String timeoffId, String workerId, TimeoffToReviewInternalContainer timeoffToReviewInternalContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timeoffId' is set
        if (timeoffId == null) {
            throw new ApiException("Missing the required parameter 'timeoffId' when calling reviewTimeOff(Async)");
        }

        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling reviewTimeOff(Async)");
        }

        // verify the required parameter 'timeoffToReviewInternalContainer' is set
        if (timeoffToReviewInternalContainer == null) {
            throw new ApiException("Missing the required parameter 'timeoffToReviewInternalContainer' when calling reviewTimeOff(Async)");
        }

        return reviewTimeOffCall(timeoffId, workerId, timeoffToReviewInternalContainer, _callback);

    }


    private ApiResponse<EmployeeTimeoffsContainer> reviewTimeOffWithHttpInfo(String timeoffId, String workerId, TimeoffToReviewInternalContainer timeoffToReviewInternalContainer) throws ApiException {
        okhttp3.Call localVarCall = reviewTimeOffValidateBeforeCall(timeoffId, workerId, timeoffToReviewInternalContainer, null);
        Type localVarReturnType = new TypeToken<EmployeeTimeoffsContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call reviewTimeOffAsync(String timeoffId, String workerId, TimeoffToReviewInternalContainer timeoffToReviewInternalContainer, final ApiCallback<EmployeeTimeoffsContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = reviewTimeOffValidateBeforeCall(timeoffId, workerId, timeoffToReviewInternalContainer, _callback);
        Type localVarReturnType = new TypeToken<EmployeeTimeoffsContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ReviewTimeOffRequestBuilder {
        private final TimeoffReviewInternal data;
        private final String timeoffId;
        private final String workerId;

        private ReviewTimeOffRequestBuilder(TimeoffReviewInternal data, String timeoffId, String workerId) {
            this.data = data;
            this.timeoffId = timeoffId;
            this.workerId = workerId;
        }

        /**
         * Build call for reviewTimeOff
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeoffToReviewInternalContainer timeoffToReviewInternalContainer = buildBodyParams();
            return reviewTimeOffCall(timeoffId, workerId, timeoffToReviewInternalContainer, _callback);
        }

        private TimeoffToReviewInternalContainer buildBodyParams() {
            TimeoffToReviewInternalContainer timeoffToReviewInternalContainer = new TimeoffToReviewInternalContainer();
            timeoffToReviewInternalContainer.data(this.data);
            return timeoffToReviewInternalContainer;
        }

        /**
         * Execute reviewTimeOff request
         * @return EmployeeTimeoffsContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeTimeoffsContainer execute() throws ApiException {
            TimeoffToReviewInternalContainer timeoffToReviewInternalContainer = buildBodyParams();
            ApiResponse<EmployeeTimeoffsContainer> localVarResp = reviewTimeOffWithHttpInfo(timeoffId, workerId, timeoffToReviewInternalContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute reviewTimeOff request with HTTP info returned
         * @return ApiResponse&lt;EmployeeTimeoffsContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeTimeoffsContainer> executeWithHttpInfo() throws ApiException {
            TimeoffToReviewInternalContainer timeoffToReviewInternalContainer = buildBodyParams();
            return reviewTimeOffWithHttpInfo(timeoffId, workerId, timeoffToReviewInternalContainer);
        }

        /**
         * Execute reviewTimeOff request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeTimeoffsContainer> _callback) throws ApiException {
            TimeoffToReviewInternalContainer timeoffToReviewInternalContainer = buildBodyParams();
            return reviewTimeOffAsync(timeoffId, workerId, timeoffToReviewInternalContainer, _callback);
        }
    }

    /**
     * Review a time off request
     * Approve or decline a time off request. New requests are auto-approved. Hence they don&#39;t need to be manually approved.
     * @param timeoffId Unique identifier for a time-off in Deel. (required)
     * @param workerId Unique identifier for a worker. (required)
     * @param timeoffToReviewInternalContainer Timeoff acceptance approve or decline. (required)
     * @return ReviewTimeOffRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ReviewTimeOffRequestBuilder reviewTimeOff(TimeoffReviewInternal data, String timeoffId, String workerId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (timeoffId == null) throw new IllegalArgumentException("\"timeoffId\" is required but got null");
            

        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new ReviewTimeOffRequestBuilder(data, timeoffId, workerId);
    }
    private okhttp3.Call updateDepartmentCall(String workerId, UpdateWorkerDepartmentContainer updateWorkerDepartmentContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateWorkerDepartmentContainer;

        // create path and map variables
        String localVarPath = "/people/{worker_id}/department"
            .replace("{" + "worker_id" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDepartmentValidateBeforeCall(String workerId, UpdateWorkerDepartmentContainer updateWorkerDepartmentContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling updateDepartment(Async)");
        }

        return updateDepartmentCall(workerId, updateWorkerDepartmentContainer, _callback);

    }


    private ApiResponse<GenericResultUpdated> updateDepartmentWithHttpInfo(String workerId, UpdateWorkerDepartmentContainer updateWorkerDepartmentContainer) throws ApiException {
        okhttp3.Call localVarCall = updateDepartmentValidateBeforeCall(workerId, updateWorkerDepartmentContainer, null);
        Type localVarReturnType = new TypeToken<GenericResultUpdated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateDepartmentAsync(String workerId, UpdateWorkerDepartmentContainer updateWorkerDepartmentContainer, final ApiCallback<GenericResultUpdated> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDepartmentValidateBeforeCall(workerId, updateWorkerDepartmentContainer, _callback);
        Type localVarReturnType = new TypeToken<GenericResultUpdated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateDepartmentRequestBuilder {
        private final UpdateWorkerDepartment data;
        private final String workerId;

        private UpdateDepartmentRequestBuilder(UpdateWorkerDepartment data, String workerId) {
            this.data = data;
            this.workerId = workerId;
        }

        /**
         * Build call for updateDepartment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateWorkerDepartmentContainer updateWorkerDepartmentContainer = buildBodyParams();
            return updateDepartmentCall(workerId, updateWorkerDepartmentContainer, _callback);
        }

        private UpdateWorkerDepartmentContainer buildBodyParams() {
            UpdateWorkerDepartmentContainer updateWorkerDepartmentContainer = new UpdateWorkerDepartmentContainer();
            updateWorkerDepartmentContainer.data(this.data);
            return updateWorkerDepartmentContainer;
        }

        /**
         * Execute updateDepartment request
         * @return GenericResultUpdated
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GenericResultUpdated execute() throws ApiException {
            UpdateWorkerDepartmentContainer updateWorkerDepartmentContainer = buildBodyParams();
            ApiResponse<GenericResultUpdated> localVarResp = updateDepartmentWithHttpInfo(workerId, updateWorkerDepartmentContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateDepartment request with HTTP info returned
         * @return ApiResponse&lt;GenericResultUpdated&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GenericResultUpdated> executeWithHttpInfo() throws ApiException {
            UpdateWorkerDepartmentContainer updateWorkerDepartmentContainer = buildBodyParams();
            return updateDepartmentWithHttpInfo(workerId, updateWorkerDepartmentContainer);
        }

        /**
         * Execute updateDepartment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GenericResultUpdated> _callback) throws ApiException {
            UpdateWorkerDepartmentContainer updateWorkerDepartmentContainer = buildBodyParams();
            return updateDepartmentAsync(workerId, updateWorkerDepartmentContainer, _callback);
        }
    }

    /**
     * Update department
     * Update worker department.
     * @param workerId Unique identifier for a worker. (required)
     * @return UpdateDepartmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDepartmentRequestBuilder updateDepartment(UpdateWorkerDepartment data, String workerId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new UpdateDepartmentRequestBuilder(data, workerId);
    }
    private okhttp3.Call updateWorkingLocationCall(String workerId, UpdateWorkerWorkingLocationContainer updateWorkerWorkingLocationContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateWorkerWorkingLocationContainer;

        // create path and map variables
        String localVarPath = "/people/{worker_id}/working-location"
            .replace("{" + "worker_id" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWorkingLocationValidateBeforeCall(String workerId, UpdateWorkerWorkingLocationContainer updateWorkerWorkingLocationContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling updateWorkingLocation(Async)");
        }

        return updateWorkingLocationCall(workerId, updateWorkerWorkingLocationContainer, _callback);

    }


    private ApiResponse<GenericResultUpdated> updateWorkingLocationWithHttpInfo(String workerId, UpdateWorkerWorkingLocationContainer updateWorkerWorkingLocationContainer) throws ApiException {
        okhttp3.Call localVarCall = updateWorkingLocationValidateBeforeCall(workerId, updateWorkerWorkingLocationContainer, null);
        Type localVarReturnType = new TypeToken<GenericResultUpdated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateWorkingLocationAsync(String workerId, UpdateWorkerWorkingLocationContainer updateWorkerWorkingLocationContainer, final ApiCallback<GenericResultUpdated> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWorkingLocationValidateBeforeCall(workerId, updateWorkerWorkingLocationContainer, _callback);
        Type localVarReturnType = new TypeToken<GenericResultUpdated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateWorkingLocationRequestBuilder {
        private final UpdateWorkerWorkingLocation data;
        private final String workerId;

        private UpdateWorkingLocationRequestBuilder(UpdateWorkerWorkingLocation data, String workerId) {
            this.data = data;
            this.workerId = workerId;
        }

        /**
         * Build call for updateWorkingLocation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateWorkerWorkingLocationContainer updateWorkerWorkingLocationContainer = buildBodyParams();
            return updateWorkingLocationCall(workerId, updateWorkerWorkingLocationContainer, _callback);
        }

        private UpdateWorkerWorkingLocationContainer buildBodyParams() {
            UpdateWorkerWorkingLocationContainer updateWorkerWorkingLocationContainer = new UpdateWorkerWorkingLocationContainer();
            updateWorkerWorkingLocationContainer.data(this.data);
            return updateWorkerWorkingLocationContainer;
        }

        /**
         * Execute updateWorkingLocation request
         * @return GenericResultUpdated
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GenericResultUpdated execute() throws ApiException {
            UpdateWorkerWorkingLocationContainer updateWorkerWorkingLocationContainer = buildBodyParams();
            ApiResponse<GenericResultUpdated> localVarResp = updateWorkingLocationWithHttpInfo(workerId, updateWorkerWorkingLocationContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateWorkingLocation request with HTTP info returned
         * @return ApiResponse&lt;GenericResultUpdated&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GenericResultUpdated> executeWithHttpInfo() throws ApiException {
            UpdateWorkerWorkingLocationContainer updateWorkerWorkingLocationContainer = buildBodyParams();
            return updateWorkingLocationWithHttpInfo(workerId, updateWorkerWorkingLocationContainer);
        }

        /**
         * Execute updateWorkingLocation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GenericResultUpdated> _callback) throws ApiException {
            UpdateWorkerWorkingLocationContainer updateWorkerWorkingLocationContainer = buildBodyParams();
            return updateWorkingLocationAsync(workerId, updateWorkerWorkingLocationContainer, _callback);
        }
    }

    /**
     * Update working location
     * Update worker working location.
     * @param workerId Unique identifier for a worker. (required)
     * @return UpdateWorkingLocationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateWorkingLocationRequestBuilder updateWorkingLocation(UpdateWorkerWorkingLocation data, String workerId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new UpdateWorkingLocationRequestBuilder(data, workerId);
    }
}
