/*
 * Deel REST API
 * API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AdditionalEORInfoContainer;
import com.konfigthis.client.model.BankAccountAddedContainer;
import com.konfigthis.client.model.BankAccountGuideContainer;
import com.konfigthis.client.model.BankAccountToAddContainer;
import com.konfigthis.client.model.BankAccountToAddInner;
import com.konfigthis.client.model.EmployeeAgreementDownloadContainer;
import com.konfigthis.client.model.EmployeeContractSignatureToCreate;
import com.konfigthis.client.model.EmployeeContractSignatureToCreateContainer;
import com.konfigthis.client.model.EmployeePayslipsListContainer;
import com.konfigthis.client.model.EmployeeTaxDocumentsListContainer;
import java.io.File;
import com.konfigthis.client.model.GenericResultCreated;
import com.konfigthis.client.model.GenericResultUpdated;
import com.konfigthis.client.model.GetEmployeeComplianceDocumentTemplateDownloadLinkContainer;
import com.konfigthis.client.model.GetEmployeeComplianceDocumentsContainer;
import com.konfigthis.client.model.HrVerificationLettersAndDocumentsListContainer;
import com.konfigthis.client.model.LetterRequest;
import com.konfigthis.client.model.RequestCustomVerificationLetterContainer;
import com.konfigthis.client.model.RequestCustomVerificationLetterWithFile;
import com.konfigthis.client.model.UploadEmployeeComplianceDocumentContainer;
import com.konfigthis.client.model.UploadEmployeeComplianceDocumentFileContainer;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PartnerManagedApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PartnerManagedApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PartnerManagedApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addAdditionalInformationForEorEmployeeCall(String employeeId, String contractId, AdditionalEORInfoContainer additionalEORInfoContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = additionalEORInfoContainer;

        // create path and map variables
        String localVarPath = "/partner-managed/employees/{employee_id}/contracts/{contract_id}/additional-information"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addAdditionalInformationForEorEmployeeValidateBeforeCall(String employeeId, String contractId, AdditionalEORInfoContainer additionalEORInfoContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling addAdditionalInformationForEorEmployee(Async)");
        }

        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling addAdditionalInformationForEorEmployee(Async)");
        }

        // verify the required parameter 'additionalEORInfoContainer' is set
        if (additionalEORInfoContainer == null) {
            throw new ApiException("Missing the required parameter 'additionalEORInfoContainer' when calling addAdditionalInformationForEorEmployee(Async)");
        }

        return addAdditionalInformationForEorEmployeeCall(employeeId, contractId, additionalEORInfoContainer, _callback);

    }


    private ApiResponse<GenericResultUpdated> addAdditionalInformationForEorEmployeeWithHttpInfo(String employeeId, String contractId, AdditionalEORInfoContainer additionalEORInfoContainer) throws ApiException {
        okhttp3.Call localVarCall = addAdditionalInformationForEorEmployeeValidateBeforeCall(employeeId, contractId, additionalEORInfoContainer, null);
        Type localVarReturnType = new TypeToken<GenericResultUpdated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addAdditionalInformationForEorEmployeeAsync(String employeeId, String contractId, AdditionalEORInfoContainer additionalEORInfoContainer, final ApiCallback<GenericResultUpdated> _callback) throws ApiException {

        okhttp3.Call localVarCall = addAdditionalInformationForEorEmployeeValidateBeforeCall(employeeId, contractId, additionalEORInfoContainer, _callback);
        Type localVarReturnType = new TypeToken<GenericResultUpdated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddAdditionalInformationForEorEmployeeRequestBuilder {
        private final Object data;
        private final String employeeId;
        private final String contractId;

        private AddAdditionalInformationForEorEmployeeRequestBuilder(Object data, String employeeId, String contractId) {
            this.data = data;
            this.employeeId = employeeId;
            this.contractId = contractId;
        }

        /**
         * Build call for addAdditionalInformationForEorEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdditionalEORInfoContainer additionalEORInfoContainer = buildBodyParams();
            return addAdditionalInformationForEorEmployeeCall(employeeId, contractId, additionalEORInfoContainer, _callback);
        }

        private AdditionalEORInfoContainer buildBodyParams() {
            AdditionalEORInfoContainer additionalEORInfoContainer = new AdditionalEORInfoContainer();
            additionalEORInfoContainer.data(this.data);
            return additionalEORInfoContainer;
        }

        /**
         * Execute addAdditionalInformationForEorEmployee request
         * @return GenericResultUpdated
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GenericResultUpdated execute() throws ApiException {
            AdditionalEORInfoContainer additionalEORInfoContainer = buildBodyParams();
            ApiResponse<GenericResultUpdated> localVarResp = addAdditionalInformationForEorEmployeeWithHttpInfo(employeeId, contractId, additionalEORInfoContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addAdditionalInformationForEorEmployee request with HTTP info returned
         * @return ApiResponse&lt;GenericResultUpdated&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GenericResultUpdated> executeWithHttpInfo() throws ApiException {
            AdditionalEORInfoContainer additionalEORInfoContainer = buildBodyParams();
            return addAdditionalInformationForEorEmployeeWithHttpInfo(employeeId, contractId, additionalEORInfoContainer);
        }

        /**
         * Execute addAdditionalInformationForEorEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GenericResultUpdated> _callback) throws ApiException {
            AdditionalEORInfoContainer additionalEORInfoContainer = buildBodyParams();
            return addAdditionalInformationForEorEmployeeAsync(employeeId, contractId, additionalEORInfoContainer, _callback);
        }
    }

    /**
     * Add additional information
     * Add additional information for an EOR employee.
     * @param employeeId Unique identifier for an employee in Deel. (required)
     * @param contractId Deel contract id. (required)
     * @param additionalEORInfoContainer Bank Account object that needs to be created (required)
     * @return AddAdditionalInformationForEorEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public AddAdditionalInformationForEorEmployeeRequestBuilder addAdditionalInformationForEorEmployee(Object data, String employeeId, String contractId) throws IllegalArgumentException {
        
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        return new AddAdditionalInformationForEorEmployeeRequestBuilder(data, employeeId, contractId);
    }
    private okhttp3.Call addBankAccountForEorEmployeeCall(String employeeId, BankAccountToAddContainer bankAccountToAddContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bankAccountToAddContainer;

        // create path and map variables
        String localVarPath = "/partner-managed/employees/{employee_id}/banks"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addBankAccountForEorEmployeeValidateBeforeCall(String employeeId, BankAccountToAddContainer bankAccountToAddContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling addBankAccountForEorEmployee(Async)");
        }

        // verify the required parameter 'bankAccountToAddContainer' is set
        if (bankAccountToAddContainer == null) {
            throw new ApiException("Missing the required parameter 'bankAccountToAddContainer' when calling addBankAccountForEorEmployee(Async)");
        }

        return addBankAccountForEorEmployeeCall(employeeId, bankAccountToAddContainer, _callback);

    }


    private ApiResponse<BankAccountAddedContainer> addBankAccountForEorEmployeeWithHttpInfo(String employeeId, BankAccountToAddContainer bankAccountToAddContainer) throws ApiException {
        okhttp3.Call localVarCall = addBankAccountForEorEmployeeValidateBeforeCall(employeeId, bankAccountToAddContainer, null);
        Type localVarReturnType = new TypeToken<BankAccountAddedContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addBankAccountForEorEmployeeAsync(String employeeId, BankAccountToAddContainer bankAccountToAddContainer, final ApiCallback<BankAccountAddedContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = addBankAccountForEorEmployeeValidateBeforeCall(employeeId, bankAccountToAddContainer, _callback);
        Type localVarReturnType = new TypeToken<BankAccountAddedContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddBankAccountForEorEmployeeRequestBuilder {
        private final List<BankAccountToAddInner> data;
        private final String employeeId;

        private AddBankAccountForEorEmployeeRequestBuilder(List<BankAccountToAddInner> data, String employeeId) {
            this.data = data;
            this.employeeId = employeeId;
        }

        /**
         * Build call for addBankAccountForEorEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BankAccountToAddContainer bankAccountToAddContainer = buildBodyParams();
            return addBankAccountForEorEmployeeCall(employeeId, bankAccountToAddContainer, _callback);
        }

        private BankAccountToAddContainer buildBodyParams() {
            BankAccountToAddContainer bankAccountToAddContainer = new BankAccountToAddContainer();
            bankAccountToAddContainer.data(this.data);
            return bankAccountToAddContainer;
        }

        /**
         * Execute addBankAccountForEorEmployee request
         * @return BankAccountAddedContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public BankAccountAddedContainer execute() throws ApiException {
            BankAccountToAddContainer bankAccountToAddContainer = buildBodyParams();
            ApiResponse<BankAccountAddedContainer> localVarResp = addBankAccountForEorEmployeeWithHttpInfo(employeeId, bankAccountToAddContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addBankAccountForEorEmployee request with HTTP info returned
         * @return ApiResponse&lt;BankAccountAddedContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BankAccountAddedContainer> executeWithHttpInfo() throws ApiException {
            BankAccountToAddContainer bankAccountToAddContainer = buildBodyParams();
            return addBankAccountForEorEmployeeWithHttpInfo(employeeId, bankAccountToAddContainer);
        }

        /**
         * Execute addBankAccountForEorEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BankAccountAddedContainer> _callback) throws ApiException {
            BankAccountToAddContainer bankAccountToAddContainer = buildBodyParams();
            return addBankAccountForEorEmployeeAsync(employeeId, bankAccountToAddContainer, _callback);
        }
    }

    /**
     * Add bank account
     * Add bank account for an EOR employee.
     * @param employeeId Unique identifier for an employee in Deel. (required)
     * @param bankAccountToAddContainer Bank Account object that needs to be created (required)
     * @return AddBankAccountForEorEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public AddBankAccountForEorEmployeeRequestBuilder addBankAccountForEorEmployee(List<BankAccountToAddInner> data, String employeeId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new AddBankAccountForEorEmployeeRequestBuilder(data, employeeId);
    }
    private okhttp3.Call downloadComplianceDocumentTemplateCall(String employeeId, Double documentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/partner-managed/employees/{employee_id}/compliance-documents/{document_id}/templates/download"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "document_id" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadComplianceDocumentTemplateValidateBeforeCall(String employeeId, Double documentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling downloadComplianceDocumentTemplate(Async)");
        }

        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling downloadComplianceDocumentTemplate(Async)");
        }

        return downloadComplianceDocumentTemplateCall(employeeId, documentId, _callback);

    }


    private ApiResponse<GetEmployeeComplianceDocumentTemplateDownloadLinkContainer> downloadComplianceDocumentTemplateWithHttpInfo(String employeeId, Double documentId) throws ApiException {
        okhttp3.Call localVarCall = downloadComplianceDocumentTemplateValidateBeforeCall(employeeId, documentId, null);
        Type localVarReturnType = new TypeToken<GetEmployeeComplianceDocumentTemplateDownloadLinkContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call downloadComplianceDocumentTemplateAsync(String employeeId, Double documentId, final ApiCallback<GetEmployeeComplianceDocumentTemplateDownloadLinkContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadComplianceDocumentTemplateValidateBeforeCall(employeeId, documentId, _callback);
        Type localVarReturnType = new TypeToken<GetEmployeeComplianceDocumentTemplateDownloadLinkContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DownloadComplianceDocumentTemplateRequestBuilder {
        private final String employeeId;
        private final Double documentId;

        private DownloadComplianceDocumentTemplateRequestBuilder(String employeeId, double documentId) {
            this.employeeId = employeeId;
            this.documentId = documentId;
        }

        /**
         * Build call for downloadComplianceDocumentTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return downloadComplianceDocumentTemplateCall(employeeId, documentId, _callback);
        }


        /**
         * Execute downloadComplianceDocumentTemplate request
         * @return GetEmployeeComplianceDocumentTemplateDownloadLinkContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GetEmployeeComplianceDocumentTemplateDownloadLinkContainer execute() throws ApiException {
            ApiResponse<GetEmployeeComplianceDocumentTemplateDownloadLinkContainer> localVarResp = downloadComplianceDocumentTemplateWithHttpInfo(employeeId, documentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute downloadComplianceDocumentTemplate request with HTTP info returned
         * @return ApiResponse&lt;GetEmployeeComplianceDocumentTemplateDownloadLinkContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetEmployeeComplianceDocumentTemplateDownloadLinkContainer> executeWithHttpInfo() throws ApiException {
            return downloadComplianceDocumentTemplateWithHttpInfo(employeeId, documentId);
        }

        /**
         * Execute downloadComplianceDocumentTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetEmployeeComplianceDocumentTemplateDownloadLinkContainer> _callback) throws ApiException {
            return downloadComplianceDocumentTemplateAsync(employeeId, documentId, _callback);
        }
    }

    /**
     * Download employee compliance document template
     * Get the download link for an employee compliance document template, if it exists.
     * @param employeeId Unique identifier for an employee in Deel. (required)
     * @param documentId Unique identifier for a compliance document in Deel. (required)
     * @return DownloadComplianceDocumentTemplateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public DownloadComplianceDocumentTemplateRequestBuilder downloadComplianceDocumentTemplate(String employeeId, double documentId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        
        return new DownloadComplianceDocumentTemplateRequestBuilder(employeeId, documentId);
    }
    private okhttp3.Call downloadEmployeeAgreementPdfCall(String employeeId, String contractId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/partner-managed/employees/{employee_id}/contracts/{contract_id}/employee-agreement/download"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadEmployeeAgreementPdfValidateBeforeCall(String employeeId, String contractId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling downloadEmployeeAgreementPdf(Async)");
        }

        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling downloadEmployeeAgreementPdf(Async)");
        }

        return downloadEmployeeAgreementPdfCall(employeeId, contractId, _callback);

    }


    private ApiResponse<EmployeeAgreementDownloadContainer> downloadEmployeeAgreementPdfWithHttpInfo(String employeeId, String contractId) throws ApiException {
        okhttp3.Call localVarCall = downloadEmployeeAgreementPdfValidateBeforeCall(employeeId, contractId, null);
        Type localVarReturnType = new TypeToken<EmployeeAgreementDownloadContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call downloadEmployeeAgreementPdfAsync(String employeeId, String contractId, final ApiCallback<EmployeeAgreementDownloadContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadEmployeeAgreementPdfValidateBeforeCall(employeeId, contractId, _callback);
        Type localVarReturnType = new TypeToken<EmployeeAgreementDownloadContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DownloadEmployeeAgreementPdfRequestBuilder {
        private final String employeeId;
        private final String contractId;

        private DownloadEmployeeAgreementPdfRequestBuilder(String employeeId, String contractId) {
            this.employeeId = employeeId;
            this.contractId = contractId;
        }

        /**
         * Build call for downloadEmployeeAgreementPdf
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return downloadEmployeeAgreementPdfCall(employeeId, contractId, _callback);
        }


        /**
         * Execute downloadEmployeeAgreementPdf request
         * @return EmployeeAgreementDownloadContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeAgreementDownloadContainer execute() throws ApiException {
            ApiResponse<EmployeeAgreementDownloadContainer> localVarResp = downloadEmployeeAgreementPdfWithHttpInfo(employeeId, contractId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute downloadEmployeeAgreementPdf request with HTTP info returned
         * @return ApiResponse&lt;EmployeeAgreementDownloadContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeAgreementDownloadContainer> executeWithHttpInfo() throws ApiException {
            return downloadEmployeeAgreementPdfWithHttpInfo(employeeId, contractId);
        }

        /**
         * Execute downloadEmployeeAgreementPdf request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeAgreementDownloadContainer> _callback) throws ApiException {
            return downloadEmployeeAgreementPdfAsync(employeeId, contractId, _callback);
        }
    }

    /**
     * Download employee agreement PDF
     * Get link to download the employee agreement PDF.
     * @param employeeId Unique identifier for an employee in Deel. (required)
     * @param contractId Deel contract id. (required)
     * @return DownloadEmployeeAgreementPdfRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public DownloadEmployeeAgreementPdfRequestBuilder downloadEmployeeAgreementPdf(String employeeId, String contractId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        return new DownloadEmployeeAgreementPdfRequestBuilder(employeeId, contractId);
    }
    private okhttp3.Call downloadHrVerificationLettersAndDocumentsCall(String employeeId, String contractId, Double documentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/partner-managed/employees/{employee_id}/contracts/{contract_id}/hr-documents/{document_id}/download"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()))
            .replace("{" + "document_id" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadHrVerificationLettersAndDocumentsValidateBeforeCall(String employeeId, String contractId, Double documentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling downloadHrVerificationLettersAndDocuments(Async)");
        }

        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling downloadHrVerificationLettersAndDocuments(Async)");
        }

        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling downloadHrVerificationLettersAndDocuments(Async)");
        }

        return downloadHrVerificationLettersAndDocumentsCall(employeeId, contractId, documentId, _callback);

    }


    private ApiResponse<EmployeeAgreementDownloadContainer> downloadHrVerificationLettersAndDocumentsWithHttpInfo(String employeeId, String contractId, Double documentId) throws ApiException {
        okhttp3.Call localVarCall = downloadHrVerificationLettersAndDocumentsValidateBeforeCall(employeeId, contractId, documentId, null);
        Type localVarReturnType = new TypeToken<EmployeeAgreementDownloadContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call downloadHrVerificationLettersAndDocumentsAsync(String employeeId, String contractId, Double documentId, final ApiCallback<EmployeeAgreementDownloadContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadHrVerificationLettersAndDocumentsValidateBeforeCall(employeeId, contractId, documentId, _callback);
        Type localVarReturnType = new TypeToken<EmployeeAgreementDownloadContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DownloadHrVerificationLettersAndDocumentsRequestBuilder {
        private final String employeeId;
        private final String contractId;
        private final Double documentId;

        private DownloadHrVerificationLettersAndDocumentsRequestBuilder(String employeeId, String contractId, double documentId) {
            this.employeeId = employeeId;
            this.contractId = contractId;
            this.documentId = documentId;
        }

        /**
         * Build call for downloadHrVerificationLettersAndDocuments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return downloadHrVerificationLettersAndDocumentsCall(employeeId, contractId, documentId, _callback);
        }


        /**
         * Execute downloadHrVerificationLettersAndDocuments request
         * @return EmployeeAgreementDownloadContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeAgreementDownloadContainer execute() throws ApiException {
            ApiResponse<EmployeeAgreementDownloadContainer> localVarResp = downloadHrVerificationLettersAndDocumentsWithHttpInfo(employeeId, contractId, documentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute downloadHrVerificationLettersAndDocuments request with HTTP info returned
         * @return ApiResponse&lt;EmployeeAgreementDownloadContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeAgreementDownloadContainer> executeWithHttpInfo() throws ApiException {
            return downloadHrVerificationLettersAndDocumentsWithHttpInfo(employeeId, contractId, documentId);
        }

        /**
         * Execute downloadHrVerificationLettersAndDocuments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeAgreementDownloadContainer> _callback) throws ApiException {
            return downloadHrVerificationLettersAndDocumentsAsync(employeeId, contractId, documentId, _callback);
        }
    }

    /**
     * Download HR verification letters and documents
     * Retrieve URL to download HR verification letters and documents.
     * @param employeeId Unique identifier for an employee in Deel. (required)
     * @param contractId Deel contract id. (required)
     * @param documentId Unique identifier for a compliance document in Deel. (required)
     * @return DownloadHrVerificationLettersAndDocumentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public DownloadHrVerificationLettersAndDocumentsRequestBuilder downloadHrVerificationLettersAndDocuments(String employeeId, String contractId, double documentId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        
        return new DownloadHrVerificationLettersAndDocumentsRequestBuilder(employeeId, contractId, documentId);
    }
    private okhttp3.Call getBankGuideForEorEmployeeCall(String employeeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/partner-managed/employees/{employee_id}/banks/guide"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBankGuideForEorEmployeeValidateBeforeCall(String employeeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getBankGuideForEorEmployee(Async)");
        }

        return getBankGuideForEorEmployeeCall(employeeId, _callback);

    }


    private ApiResponse<BankAccountGuideContainer> getBankGuideForEorEmployeeWithHttpInfo(String employeeId) throws ApiException {
        okhttp3.Call localVarCall = getBankGuideForEorEmployeeValidateBeforeCall(employeeId, null);
        Type localVarReturnType = new TypeToken<BankAccountGuideContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBankGuideForEorEmployeeAsync(String employeeId, final ApiCallback<BankAccountGuideContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBankGuideForEorEmployeeValidateBeforeCall(employeeId, _callback);
        Type localVarReturnType = new TypeToken<BankAccountGuideContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBankGuideForEorEmployeeRequestBuilder {
        private final String employeeId;

        private GetBankGuideForEorEmployeeRequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Build call for getBankGuideForEorEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBankGuideForEorEmployeeCall(employeeId, _callback);
        }


        /**
         * Execute getBankGuideForEorEmployee request
         * @return BankAccountGuideContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public BankAccountGuideContainer execute() throws ApiException {
            ApiResponse<BankAccountGuideContainer> localVarResp = getBankGuideForEorEmployeeWithHttpInfo(employeeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBankGuideForEorEmployee request with HTTP info returned
         * @return ApiResponse&lt;BankAccountGuideContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BankAccountGuideContainer> executeWithHttpInfo() throws ApiException {
            return getBankGuideForEorEmployeeWithHttpInfo(employeeId);
        }

        /**
         * Execute getBankGuideForEorEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BankAccountGuideContainer> _callback) throws ApiException {
            return getBankGuideForEorEmployeeAsync(employeeId, _callback);
        }
    }

    /**
     * Bank account form
     * Retrieve bank account form guide for an EOR employee. This data can be used to add a new bank account for an employee.
     * @param employeeId Unique identifier for an employee in Deel. (required)
     * @return GetBankGuideForEorEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetBankGuideForEorEmployeeRequestBuilder getBankGuideForEorEmployee(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new GetBankGuideForEorEmployeeRequestBuilder(employeeId);
    }
    private okhttp3.Call getEmployeeAgreementHtmlCall(String employeeId, String contractId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/partner-managed/employees/{employee_id}/contracts/{contract_id}/employee-agreement"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/html",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmployeeAgreementHtmlValidateBeforeCall(String employeeId, String contractId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getEmployeeAgreementHtml(Async)");
        }

        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling getEmployeeAgreementHtml(Async)");
        }

        return getEmployeeAgreementHtmlCall(employeeId, contractId, _callback);

    }


    private ApiResponse<String> getEmployeeAgreementHtmlWithHttpInfo(String employeeId, String contractId) throws ApiException {
        okhttp3.Call localVarCall = getEmployeeAgreementHtmlValidateBeforeCall(employeeId, contractId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmployeeAgreementHtmlAsync(String employeeId, String contractId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmployeeAgreementHtmlValidateBeforeCall(employeeId, contractId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEmployeeAgreementHtmlRequestBuilder {
        private final String employeeId;
        private final String contractId;

        private GetEmployeeAgreementHtmlRequestBuilder(String employeeId, String contractId) {
            this.employeeId = employeeId;
            this.contractId = contractId;
        }

        /**
         * Build call for getEmployeeAgreementHtml
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmployeeAgreementHtmlCall(employeeId, contractId, _callback);
        }


        /**
         * Execute getEmployeeAgreementHtml request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getEmployeeAgreementHtmlWithHttpInfo(employeeId, contractId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEmployeeAgreementHtml request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getEmployeeAgreementHtmlWithHttpInfo(employeeId, contractId);
        }

        /**
         * Execute getEmployeeAgreementHtml request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getEmployeeAgreementHtmlAsync(employeeId, contractId, _callback);
        }
    }

    /**
     * Preview employee agreement
     * Retrieve an EOR Employee Agreement content in HTML.
     * @param employeeId Unique identifier for an employee in Deel. (required)
     * @param contractId Deel contract id. (required)
     * @return GetEmployeeAgreementHtmlRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetEmployeeAgreementHtmlRequestBuilder getEmployeeAgreementHtml(String employeeId, String contractId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        return new GetEmployeeAgreementHtmlRequestBuilder(employeeId, contractId);
    }
    private okhttp3.Call listEmployeeComplianceDocumentsCall(String employeeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/partner-managed/employees/{employee_id}/compliance-documents"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEmployeeComplianceDocumentsValidateBeforeCall(String employeeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling listEmployeeComplianceDocuments(Async)");
        }

        return listEmployeeComplianceDocumentsCall(employeeId, _callback);

    }


    private ApiResponse<GetEmployeeComplianceDocumentsContainer> listEmployeeComplianceDocumentsWithHttpInfo(String employeeId) throws ApiException {
        okhttp3.Call localVarCall = listEmployeeComplianceDocumentsValidateBeforeCall(employeeId, null);
        Type localVarReturnType = new TypeToken<GetEmployeeComplianceDocumentsContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listEmployeeComplianceDocumentsAsync(String employeeId, final ApiCallback<GetEmployeeComplianceDocumentsContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEmployeeComplianceDocumentsValidateBeforeCall(employeeId, _callback);
        Type localVarReturnType = new TypeToken<GetEmployeeComplianceDocumentsContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListEmployeeComplianceDocumentsRequestBuilder {
        private final String employeeId;

        private ListEmployeeComplianceDocumentsRequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Build call for listEmployeeComplianceDocuments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listEmployeeComplianceDocumentsCall(employeeId, _callback);
        }


        /**
         * Execute listEmployeeComplianceDocuments request
         * @return GetEmployeeComplianceDocumentsContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GetEmployeeComplianceDocumentsContainer execute() throws ApiException {
            ApiResponse<GetEmployeeComplianceDocumentsContainer> localVarResp = listEmployeeComplianceDocumentsWithHttpInfo(employeeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listEmployeeComplianceDocuments request with HTTP info returned
         * @return ApiResponse&lt;GetEmployeeComplianceDocumentsContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetEmployeeComplianceDocumentsContainer> executeWithHttpInfo() throws ApiException {
            return listEmployeeComplianceDocumentsWithHttpInfo(employeeId);
        }

        /**
         * Execute listEmployeeComplianceDocuments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetEmployeeComplianceDocumentsContainer> _callback) throws ApiException {
            return listEmployeeComplianceDocumentsAsync(employeeId, _callback);
        }
    }

    /**
     * List of employee compliance documents
     * Get a list of employee compliance documents.
     * @param employeeId Unique identifier for an employee in Deel. (required)
     * @return ListEmployeeComplianceDocumentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public ListEmployeeComplianceDocumentsRequestBuilder listEmployeeComplianceDocuments(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new ListEmployeeComplianceDocumentsRequestBuilder(employeeId);
    }
    private okhttp3.Call listHrVerificationLettersAndDocumentsCall(String employeeId, String contractId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/partner-managed/employees/{employee_id}/contracts/{contract_id}/hr-documents"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listHrVerificationLettersAndDocumentsValidateBeforeCall(String employeeId, String contractId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling listHrVerificationLettersAndDocuments(Async)");
        }

        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling listHrVerificationLettersAndDocuments(Async)");
        }

        return listHrVerificationLettersAndDocumentsCall(employeeId, contractId, _callback);

    }


    private ApiResponse<HrVerificationLettersAndDocumentsListContainer> listHrVerificationLettersAndDocumentsWithHttpInfo(String employeeId, String contractId) throws ApiException {
        okhttp3.Call localVarCall = listHrVerificationLettersAndDocumentsValidateBeforeCall(employeeId, contractId, null);
        Type localVarReturnType = new TypeToken<HrVerificationLettersAndDocumentsListContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listHrVerificationLettersAndDocumentsAsync(String employeeId, String contractId, final ApiCallback<HrVerificationLettersAndDocumentsListContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = listHrVerificationLettersAndDocumentsValidateBeforeCall(employeeId, contractId, _callback);
        Type localVarReturnType = new TypeToken<HrVerificationLettersAndDocumentsListContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListHrVerificationLettersAndDocumentsRequestBuilder {
        private final String employeeId;
        private final String contractId;

        private ListHrVerificationLettersAndDocumentsRequestBuilder(String employeeId, String contractId) {
            this.employeeId = employeeId;
            this.contractId = contractId;
        }

        /**
         * Build call for listHrVerificationLettersAndDocuments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listHrVerificationLettersAndDocumentsCall(employeeId, contractId, _callback);
        }


        /**
         * Execute listHrVerificationLettersAndDocuments request
         * @return HrVerificationLettersAndDocumentsListContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public HrVerificationLettersAndDocumentsListContainer execute() throws ApiException {
            ApiResponse<HrVerificationLettersAndDocumentsListContainer> localVarResp = listHrVerificationLettersAndDocumentsWithHttpInfo(employeeId, contractId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listHrVerificationLettersAndDocuments request with HTTP info returned
         * @return ApiResponse&lt;HrVerificationLettersAndDocumentsListContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HrVerificationLettersAndDocumentsListContainer> executeWithHttpInfo() throws ApiException {
            return listHrVerificationLettersAndDocumentsWithHttpInfo(employeeId, contractId);
        }

        /**
         * Execute listHrVerificationLettersAndDocuments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HrVerificationLettersAndDocumentsListContainer> _callback) throws ApiException {
            return listHrVerificationLettersAndDocumentsAsync(employeeId, contractId, _callback);
        }
    }

    /**
     * List HR verification letters and documents
     * List all HR verification letters and documents available.
     * @param employeeId Unique identifier for an employee in Deel. (required)
     * @param contractId Deel contract id. (required)
     * @return ListHrVerificationLettersAndDocumentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public ListHrVerificationLettersAndDocumentsRequestBuilder listHrVerificationLettersAndDocuments(String employeeId, String contractId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        return new ListHrVerificationLettersAndDocumentsRequestBuilder(employeeId, contractId);
    }
    private okhttp3.Call listPayslipsForEorEmployeeCall(String employeeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/partner-managed/employees/{employee_id}/payslips"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPayslipsForEorEmployeeValidateBeforeCall(String employeeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling listPayslipsForEorEmployee(Async)");
        }

        return listPayslipsForEorEmployeeCall(employeeId, _callback);

    }


    private ApiResponse<EmployeePayslipsListContainer> listPayslipsForEorEmployeeWithHttpInfo(String employeeId) throws ApiException {
        okhttp3.Call localVarCall = listPayslipsForEorEmployeeValidateBeforeCall(employeeId, null);
        Type localVarReturnType = new TypeToken<EmployeePayslipsListContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPayslipsForEorEmployeeAsync(String employeeId, final ApiCallback<EmployeePayslipsListContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPayslipsForEorEmployeeValidateBeforeCall(employeeId, _callback);
        Type localVarReturnType = new TypeToken<EmployeePayslipsListContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListPayslipsForEorEmployeeRequestBuilder {
        private final String employeeId;

        private ListPayslipsForEorEmployeeRequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Build call for listPayslipsForEorEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPayslipsForEorEmployeeCall(employeeId, _callback);
        }


        /**
         * Execute listPayslipsForEorEmployee request
         * @return EmployeePayslipsListContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public EmployeePayslipsListContainer execute() throws ApiException {
            ApiResponse<EmployeePayslipsListContainer> localVarResp = listPayslipsForEorEmployeeWithHttpInfo(employeeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listPayslipsForEorEmployee request with HTTP info returned
         * @return ApiResponse&lt;EmployeePayslipsListContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeePayslipsListContainer> executeWithHttpInfo() throws ApiException {
            return listPayslipsForEorEmployeeWithHttpInfo(employeeId);
        }

        /**
         * Execute listPayslipsForEorEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeePayslipsListContainer> _callback) throws ApiException {
            return listPayslipsForEorEmployeeAsync(employeeId, _callback);
        }
    }

    /**
     * Get list of payslips for an EOR employee
     * Get list of payslips for an EOR employee.
     * @param employeeId Unique identifier for an employee in Deel. (required)
     * @return ListPayslipsForEorEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public ListPayslipsForEorEmployeeRequestBuilder listPayslipsForEorEmployee(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new ListPayslipsForEorEmployeeRequestBuilder(employeeId);
    }
    private okhttp3.Call listTaxDocumentsForEmployeeCall(String employeeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/partner-managed/employees/{employee_id}/tax-documents"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTaxDocumentsForEmployeeValidateBeforeCall(String employeeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling listTaxDocumentsForEmployee(Async)");
        }

        return listTaxDocumentsForEmployeeCall(employeeId, _callback);

    }


    private ApiResponse<EmployeeTaxDocumentsListContainer> listTaxDocumentsForEmployeeWithHttpInfo(String employeeId) throws ApiException {
        okhttp3.Call localVarCall = listTaxDocumentsForEmployeeValidateBeforeCall(employeeId, null);
        Type localVarReturnType = new TypeToken<EmployeeTaxDocumentsListContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTaxDocumentsForEmployeeAsync(String employeeId, final ApiCallback<EmployeeTaxDocumentsListContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTaxDocumentsForEmployeeValidateBeforeCall(employeeId, _callback);
        Type localVarReturnType = new TypeToken<EmployeeTaxDocumentsListContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTaxDocumentsForEmployeeRequestBuilder {
        private final String employeeId;

        private ListTaxDocumentsForEmployeeRequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Build call for listTaxDocumentsForEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTaxDocumentsForEmployeeCall(employeeId, _callback);
        }


        /**
         * Execute listTaxDocumentsForEmployee request
         * @return EmployeeTaxDocumentsListContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeTaxDocumentsListContainer execute() throws ApiException {
            ApiResponse<EmployeeTaxDocumentsListContainer> localVarResp = listTaxDocumentsForEmployeeWithHttpInfo(employeeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTaxDocumentsForEmployee request with HTTP info returned
         * @return ApiResponse&lt;EmployeeTaxDocumentsListContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeTaxDocumentsListContainer> executeWithHttpInfo() throws ApiException {
            return listTaxDocumentsForEmployeeWithHttpInfo(employeeId);
        }

        /**
         * Execute listTaxDocumentsForEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeTaxDocumentsListContainer> _callback) throws ApiException {
            return listTaxDocumentsForEmployeeAsync(employeeId, _callback);
        }
    }

    /**
     * List of tax documents for an employee
     * Get list of tax documents for an employee.
     * @param employeeId Unique identifier for an employee in Deel. (required)
     * @return ListTaxDocumentsForEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public ListTaxDocumentsForEmployeeRequestBuilder listTaxDocumentsForEmployee(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new ListTaxDocumentsForEmployeeRequestBuilder(employeeId);
    }
    private okhttp3.Call modifyBankAccountForEorEmployeeCall(String employeeId, String bankId, BankAccountToAddContainer bankAccountToAddContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bankAccountToAddContainer;

        // create path and map variables
        String localVarPath = "/partner-managed/employees/{employee_id}/banks/{bank_id}"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "bank_id" + "}", localVarApiClient.escapeString(bankId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifyBankAccountForEorEmployeeValidateBeforeCall(String employeeId, String bankId, BankAccountToAddContainer bankAccountToAddContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling modifyBankAccountForEorEmployee(Async)");
        }

        // verify the required parameter 'bankId' is set
        if (bankId == null) {
            throw new ApiException("Missing the required parameter 'bankId' when calling modifyBankAccountForEorEmployee(Async)");
        }

        // verify the required parameter 'bankAccountToAddContainer' is set
        if (bankAccountToAddContainer == null) {
            throw new ApiException("Missing the required parameter 'bankAccountToAddContainer' when calling modifyBankAccountForEorEmployee(Async)");
        }

        return modifyBankAccountForEorEmployeeCall(employeeId, bankId, bankAccountToAddContainer, _callback);

    }


    private ApiResponse<BankAccountAddedContainer> modifyBankAccountForEorEmployeeWithHttpInfo(String employeeId, String bankId, BankAccountToAddContainer bankAccountToAddContainer) throws ApiException {
        okhttp3.Call localVarCall = modifyBankAccountForEorEmployeeValidateBeforeCall(employeeId, bankId, bankAccountToAddContainer, null);
        Type localVarReturnType = new TypeToken<BankAccountAddedContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call modifyBankAccountForEorEmployeeAsync(String employeeId, String bankId, BankAccountToAddContainer bankAccountToAddContainer, final ApiCallback<BankAccountAddedContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifyBankAccountForEorEmployeeValidateBeforeCall(employeeId, bankId, bankAccountToAddContainer, _callback);
        Type localVarReturnType = new TypeToken<BankAccountAddedContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ModifyBankAccountForEorEmployeeRequestBuilder {
        private final List<BankAccountToAddInner> data;
        private final String employeeId;
        private final String bankId;

        private ModifyBankAccountForEorEmployeeRequestBuilder(List<BankAccountToAddInner> data, String employeeId, String bankId) {
            this.data = data;
            this.employeeId = employeeId;
            this.bankId = bankId;
        }

        /**
         * Build call for modifyBankAccountForEorEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BankAccountToAddContainer bankAccountToAddContainer = buildBodyParams();
            return modifyBankAccountForEorEmployeeCall(employeeId, bankId, bankAccountToAddContainer, _callback);
        }

        private BankAccountToAddContainer buildBodyParams() {
            BankAccountToAddContainer bankAccountToAddContainer = new BankAccountToAddContainer();
            bankAccountToAddContainer.data(this.data);
            return bankAccountToAddContainer;
        }

        /**
         * Execute modifyBankAccountForEorEmployee request
         * @return BankAccountAddedContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public BankAccountAddedContainer execute() throws ApiException {
            BankAccountToAddContainer bankAccountToAddContainer = buildBodyParams();
            ApiResponse<BankAccountAddedContainer> localVarResp = modifyBankAccountForEorEmployeeWithHttpInfo(employeeId, bankId, bankAccountToAddContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute modifyBankAccountForEorEmployee request with HTTP info returned
         * @return ApiResponse&lt;BankAccountAddedContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BankAccountAddedContainer> executeWithHttpInfo() throws ApiException {
            BankAccountToAddContainer bankAccountToAddContainer = buildBodyParams();
            return modifyBankAccountForEorEmployeeWithHttpInfo(employeeId, bankId, bankAccountToAddContainer);
        }

        /**
         * Execute modifyBankAccountForEorEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BankAccountAddedContainer> _callback) throws ApiException {
            BankAccountToAddContainer bankAccountToAddContainer = buildBodyParams();
            return modifyBankAccountForEorEmployeeAsync(employeeId, bankId, bankAccountToAddContainer, _callback);
        }
    }

    /**
     * Modify bank account for an EOR employee
     * Modify bank account for an EOR employee.
     * @param employeeId Unique identifier for an employee in Deel. (required)
     * @param bankId Bank Account id. (required)
     * @param bankAccountToAddContainer Bank Account object that needs to be modified (required)
     * @return ModifyBankAccountForEorEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public ModifyBankAccountForEorEmployeeRequestBuilder modifyBankAccountForEorEmployee(List<BankAccountToAddInner> data, String employeeId, String bankId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (bankId == null) throw new IllegalArgumentException("\"bankId\" is required but got null");
            

        return new ModifyBankAccountForEorEmployeeRequestBuilder(data, employeeId, bankId);
    }
    private okhttp3.Call previewJobOfferLetterCall(String employeeId, String contractId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/partner-managed/employees/{employee_id}/contracts/{contract_id}/offer-letter"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/html",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call previewJobOfferLetterValidateBeforeCall(String employeeId, String contractId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling previewJobOfferLetter(Async)");
        }

        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling previewJobOfferLetter(Async)");
        }

        return previewJobOfferLetterCall(employeeId, contractId, _callback);

    }


    private ApiResponse<String> previewJobOfferLetterWithHttpInfo(String employeeId, String contractId) throws ApiException {
        okhttp3.Call localVarCall = previewJobOfferLetterValidateBeforeCall(employeeId, contractId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call previewJobOfferLetterAsync(String employeeId, String contractId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = previewJobOfferLetterValidateBeforeCall(employeeId, contractId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PreviewJobOfferLetterRequestBuilder {
        private final String employeeId;
        private final String contractId;

        private PreviewJobOfferLetterRequestBuilder(String employeeId, String contractId) {
            this.employeeId = employeeId;
            this.contractId = contractId;
        }

        /**
         * Build call for previewJobOfferLetter
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return previewJobOfferLetterCall(employeeId, contractId, _callback);
        }


        /**
         * Execute previewJobOfferLetter request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = previewJobOfferLetterWithHttpInfo(employeeId, contractId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute previewJobOfferLetter request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return previewJobOfferLetterWithHttpInfo(employeeId, contractId);
        }

        /**
         * Execute previewJobOfferLetter request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return previewJobOfferLetterAsync(employeeId, contractId, _callback);
        }
    }

    /**
     * Preview job offer letter
     * Retrieve an EOR job offer letter in HTML. This endpoint does not support IC and Global Payroll contract types.
     * @param employeeId Unique identifier for an employee in Deel. (required)
     * @param contractId Deel contract id. (required)
     * @return PreviewJobOfferLetterRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public PreviewJobOfferLetterRequestBuilder previewJobOfferLetter(String employeeId, String contractId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        return new PreviewJobOfferLetterRequestBuilder(employeeId, contractId);
    }
    private okhttp3.Call requestCustomVerificationLetterCall(String employeeId, String contractId, RequestCustomVerificationLetterContainer requestCustomVerificationLetterContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestCustomVerificationLetterContainer;

        // create path and map variables
        String localVarPath = "/partner-managed/employees/{employee_id}/contracts/{contract_id}/custom-verification-letter"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestCustomVerificationLetterValidateBeforeCall(String employeeId, String contractId, RequestCustomVerificationLetterContainer requestCustomVerificationLetterContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling requestCustomVerificationLetter(Async)");
        }

        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling requestCustomVerificationLetter(Async)");
        }

        // verify the required parameter 'requestCustomVerificationLetterContainer' is set
        if (requestCustomVerificationLetterContainer == null) {
            throw new ApiException("Missing the required parameter 'requestCustomVerificationLetterContainer' when calling requestCustomVerificationLetter(Async)");
        }

        return requestCustomVerificationLetterCall(employeeId, contractId, requestCustomVerificationLetterContainer, _callback);

    }


    private ApiResponse<GenericResultCreated> requestCustomVerificationLetterWithHttpInfo(String employeeId, String contractId, RequestCustomVerificationLetterContainer requestCustomVerificationLetterContainer) throws ApiException {
        okhttp3.Call localVarCall = requestCustomVerificationLetterValidateBeforeCall(employeeId, contractId, requestCustomVerificationLetterContainer, null);
        Type localVarReturnType = new TypeToken<GenericResultCreated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call requestCustomVerificationLetterAsync(String employeeId, String contractId, RequestCustomVerificationLetterContainer requestCustomVerificationLetterContainer, final ApiCallback<GenericResultCreated> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestCustomVerificationLetterValidateBeforeCall(employeeId, contractId, requestCustomVerificationLetterContainer, _callback);
        Type localVarReturnType = new TypeToken<GenericResultCreated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RequestCustomVerificationLetterRequestBuilder {
        private final LetterRequest data;
        private final String employeeId;
        private final String contractId;

        private RequestCustomVerificationLetterRequestBuilder(LetterRequest data, String employeeId, String contractId) {
            this.data = data;
            this.employeeId = employeeId;
            this.contractId = contractId;
        }

        /**
         * Build call for requestCustomVerificationLetter
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RequestCustomVerificationLetterContainer requestCustomVerificationLetterContainer = buildBodyParams();
            return requestCustomVerificationLetterCall(employeeId, contractId, requestCustomVerificationLetterContainer, _callback);
        }

        private RequestCustomVerificationLetterContainer buildBodyParams() {
            RequestCustomVerificationLetterContainer requestCustomVerificationLetterContainer = new RequestCustomVerificationLetterContainer();
            requestCustomVerificationLetterContainer.data(this.data);
            return requestCustomVerificationLetterContainer;
        }

        /**
         * Execute requestCustomVerificationLetter request
         * @return GenericResultCreated
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GenericResultCreated execute() throws ApiException {
            RequestCustomVerificationLetterContainer requestCustomVerificationLetterContainer = buildBodyParams();
            ApiResponse<GenericResultCreated> localVarResp = requestCustomVerificationLetterWithHttpInfo(employeeId, contractId, requestCustomVerificationLetterContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute requestCustomVerificationLetter request with HTTP info returned
         * @return ApiResponse&lt;GenericResultCreated&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GenericResultCreated> executeWithHttpInfo() throws ApiException {
            RequestCustomVerificationLetterContainer requestCustomVerificationLetterContainer = buildBodyParams();
            return requestCustomVerificationLetterWithHttpInfo(employeeId, contractId, requestCustomVerificationLetterContainer);
        }

        /**
         * Execute requestCustomVerificationLetter request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GenericResultCreated> _callback) throws ApiException {
            RequestCustomVerificationLetterContainer requestCustomVerificationLetterContainer = buildBodyParams();
            return requestCustomVerificationLetterAsync(employeeId, contractId, requestCustomVerificationLetterContainer, _callback);
        }
    }

    /**
     * Request custom verification letter
     * Request employment verification letters, visa support, bank verification and more.
     * @param employeeId Unique identifier for an employee in Deel. (required)
     * @param contractId Deel contract id. (required)
     * @param requestCustomVerificationLetterContainer Request custom verification letter to be requested (required)
     * @return RequestCustomVerificationLetterRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public RequestCustomVerificationLetterRequestBuilder requestCustomVerificationLetter(LetterRequest data, String employeeId, String contractId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        return new RequestCustomVerificationLetterRequestBuilder(data, employeeId, contractId);
    }
    private okhttp3.Call signContractCall(String employeeId, String contractId, EmployeeContractSignatureToCreateContainer employeeContractSignatureToCreateContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeContractSignatureToCreateContainer;

        // create path and map variables
        String localVarPath = "/partner-managed/employees/{employee_id}/contracts/{contract_id}/signatures"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signContractValidateBeforeCall(String employeeId, String contractId, EmployeeContractSignatureToCreateContainer employeeContractSignatureToCreateContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling signContract(Async)");
        }

        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling signContract(Async)");
        }

        // verify the required parameter 'employeeContractSignatureToCreateContainer' is set
        if (employeeContractSignatureToCreateContainer == null) {
            throw new ApiException("Missing the required parameter 'employeeContractSignatureToCreateContainer' when calling signContract(Async)");
        }

        return signContractCall(employeeId, contractId, employeeContractSignatureToCreateContainer, _callback);

    }


    private ApiResponse<GenericResultCreated> signContractWithHttpInfo(String employeeId, String contractId, EmployeeContractSignatureToCreateContainer employeeContractSignatureToCreateContainer) throws ApiException {
        okhttp3.Call localVarCall = signContractValidateBeforeCall(employeeId, contractId, employeeContractSignatureToCreateContainer, null);
        Type localVarReturnType = new TypeToken<GenericResultCreated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call signContractAsync(String employeeId, String contractId, EmployeeContractSignatureToCreateContainer employeeContractSignatureToCreateContainer, final ApiCallback<GenericResultCreated> _callback) throws ApiException {

        okhttp3.Call localVarCall = signContractValidateBeforeCall(employeeId, contractId, employeeContractSignatureToCreateContainer, _callback);
        Type localVarReturnType = new TypeToken<GenericResultCreated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SignContractRequestBuilder {
        private final EmployeeContractSignatureToCreate data;
        private final String employeeId;
        private final String contractId;

        private SignContractRequestBuilder(EmployeeContractSignatureToCreate data, String employeeId, String contractId) {
            this.data = data;
            this.employeeId = employeeId;
            this.contractId = contractId;
        }

        /**
         * Build call for signContract
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeContractSignatureToCreateContainer employeeContractSignatureToCreateContainer = buildBodyParams();
            return signContractCall(employeeId, contractId, employeeContractSignatureToCreateContainer, _callback);
        }

        private EmployeeContractSignatureToCreateContainer buildBodyParams() {
            EmployeeContractSignatureToCreateContainer employeeContractSignatureToCreateContainer = new EmployeeContractSignatureToCreateContainer();
            employeeContractSignatureToCreateContainer.data(this.data);
            return employeeContractSignatureToCreateContainer;
        }

        /**
         * Execute signContract request
         * @return GenericResultCreated
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GenericResultCreated execute() throws ApiException {
            EmployeeContractSignatureToCreateContainer employeeContractSignatureToCreateContainer = buildBodyParams();
            ApiResponse<GenericResultCreated> localVarResp = signContractWithHttpInfo(employeeId, contractId, employeeContractSignatureToCreateContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute signContract request with HTTP info returned
         * @return ApiResponse&lt;GenericResultCreated&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GenericResultCreated> executeWithHttpInfo() throws ApiException {
            EmployeeContractSignatureToCreateContainer employeeContractSignatureToCreateContainer = buildBodyParams();
            return signContractWithHttpInfo(employeeId, contractId, employeeContractSignatureToCreateContainer);
        }

        /**
         * Execute signContract request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GenericResultCreated> _callback) throws ApiException {
            EmployeeContractSignatureToCreateContainer employeeContractSignatureToCreateContainer = buildBodyParams();
            return signContractAsync(employeeId, contractId, employeeContractSignatureToCreateContainer, _callback);
        }
    }

    /**
     * Sign a contract
     * Sign a contract as a employee.
     * @param employeeId Unique identifier for an employee in Deel. (required)
     * @param contractId Deel contract id. (required)
     * @param employeeContractSignatureToCreateContainer Contract signature object that needs to be created (required)
     * @return SignContractRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public SignContractRequestBuilder signContract(EmployeeContractSignatureToCreate data, String employeeId, String contractId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        return new SignContractRequestBuilder(data, employeeId, contractId);
    }
    private okhttp3.Call uploadComplianceDocumentCall(String employeeId, Double documentId, UploadEmployeeComplianceDocumentFileContainer uploadEmployeeComplianceDocumentFileContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uploadEmployeeComplianceDocumentFileContainer;

        // create path and map variables
        String localVarPath = "/partner-managed/employees/{employee_id}/compliance-documents/{document_id}"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "document_id" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadComplianceDocumentValidateBeforeCall(String employeeId, Double documentId, UploadEmployeeComplianceDocumentFileContainer uploadEmployeeComplianceDocumentFileContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling uploadComplianceDocument(Async)");
        }

        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling uploadComplianceDocument(Async)");
        }

        // verify the required parameter 'uploadEmployeeComplianceDocumentFileContainer' is set
        if (uploadEmployeeComplianceDocumentFileContainer == null) {
            throw new ApiException("Missing the required parameter 'uploadEmployeeComplianceDocumentFileContainer' when calling uploadComplianceDocument(Async)");
        }

        return uploadComplianceDocumentCall(employeeId, documentId, uploadEmployeeComplianceDocumentFileContainer, _callback);

    }


    private ApiResponse<UploadEmployeeComplianceDocumentContainer> uploadComplianceDocumentWithHttpInfo(String employeeId, Double documentId, UploadEmployeeComplianceDocumentFileContainer uploadEmployeeComplianceDocumentFileContainer) throws ApiException {
        okhttp3.Call localVarCall = uploadComplianceDocumentValidateBeforeCall(employeeId, documentId, uploadEmployeeComplianceDocumentFileContainer, null);
        Type localVarReturnType = new TypeToken<UploadEmployeeComplianceDocumentContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call uploadComplianceDocumentAsync(String employeeId, Double documentId, UploadEmployeeComplianceDocumentFileContainer uploadEmployeeComplianceDocumentFileContainer, final ApiCallback<UploadEmployeeComplianceDocumentContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadComplianceDocumentValidateBeforeCall(employeeId, documentId, uploadEmployeeComplianceDocumentFileContainer, _callback);
        Type localVarReturnType = new TypeToken<UploadEmployeeComplianceDocumentContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UploadComplianceDocumentRequestBuilder {
        private final File _file;
        private final String employeeId;
        private final Double documentId;

        private UploadComplianceDocumentRequestBuilder(File _file, String employeeId, double documentId) {
            this._file = _file;
            this.employeeId = employeeId;
            this.documentId = documentId;
        }

        /**
         * Build call for uploadComplianceDocument
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UploadEmployeeComplianceDocumentFileContainer uploadEmployeeComplianceDocumentFileContainer = buildBodyParams();
            return uploadComplianceDocumentCall(employeeId, documentId, uploadEmployeeComplianceDocumentFileContainer, _callback);
        }

        private UploadEmployeeComplianceDocumentFileContainer buildBodyParams() {
            UploadEmployeeComplianceDocumentFileContainer uploadEmployeeComplianceDocumentFileContainer = new UploadEmployeeComplianceDocumentFileContainer();
            uploadEmployeeComplianceDocumentFileContainer._file(this._file);
            return uploadEmployeeComplianceDocumentFileContainer;
        }

        /**
         * Execute uploadComplianceDocument request
         * @return UploadEmployeeComplianceDocumentContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public UploadEmployeeComplianceDocumentContainer execute() throws ApiException {
            UploadEmployeeComplianceDocumentFileContainer uploadEmployeeComplianceDocumentFileContainer = buildBodyParams();
            ApiResponse<UploadEmployeeComplianceDocumentContainer> localVarResp = uploadComplianceDocumentWithHttpInfo(employeeId, documentId, uploadEmployeeComplianceDocumentFileContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute uploadComplianceDocument request with HTTP info returned
         * @return ApiResponse&lt;UploadEmployeeComplianceDocumentContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UploadEmployeeComplianceDocumentContainer> executeWithHttpInfo() throws ApiException {
            UploadEmployeeComplianceDocumentFileContainer uploadEmployeeComplianceDocumentFileContainer = buildBodyParams();
            return uploadComplianceDocumentWithHttpInfo(employeeId, documentId, uploadEmployeeComplianceDocumentFileContainer);
        }

        /**
         * Execute uploadComplianceDocument request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UploadEmployeeComplianceDocumentContainer> _callback) throws ApiException {
            UploadEmployeeComplianceDocumentFileContainer uploadEmployeeComplianceDocumentFileContainer = buildBodyParams();
            return uploadComplianceDocumentAsync(employeeId, documentId, uploadEmployeeComplianceDocumentFileContainer, _callback);
        }
    }

    /**
     * Upload employee compliance document
     * Upload an employee compliance document.
     * @param employeeId Unique identifier for an employee in Deel. (required)
     * @param documentId Unique identifier for a compliance document in Deel. (required)
     * @param uploadEmployeeComplianceDocumentFileContainer The employee compliance document data to upload. (required)
     * @return UploadComplianceDocumentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public UploadComplianceDocumentRequestBuilder uploadComplianceDocument(File _file, String employeeId, double documentId) throws IllegalArgumentException {
        if (_file == null) throw new IllegalArgumentException("\"_file\" is required but got null");
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        
        return new UploadComplianceDocumentRequestBuilder(_file, employeeId, documentId);
    }
}
