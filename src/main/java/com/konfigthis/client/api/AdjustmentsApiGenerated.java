/*
 * Deel REST API
 * API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AdjustmentCreatedContainer;
import com.konfigthis.client.model.AdjustmentToCreate;
import com.konfigthis.client.model.AdjustmentToCreateContainer;
import com.konfigthis.client.model.AdjustmentToUpdate;
import com.konfigthis.client.model.AdjustmentToUpdateContainer;
import com.konfigthis.client.model.AdjustmentsCategoriesContainer;
import com.konfigthis.client.model.AdjustmentsContainer;
import com.konfigthis.client.model.GenericResultDeleted;
import com.konfigthis.client.model.GenericResultUpdated;
import java.time.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AdjustmentsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AdjustmentsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AdjustmentsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewAdjustmentCall(AdjustmentToCreateContainer adjustmentToCreateContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adjustmentToCreateContainer;

        // create path and map variables
        String localVarPath = "/adjustments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewAdjustmentValidateBeforeCall(AdjustmentToCreateContainer adjustmentToCreateContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'adjustmentToCreateContainer' is set
        if (adjustmentToCreateContainer == null) {
            throw new ApiException("Missing the required parameter 'adjustmentToCreateContainer' when calling createNewAdjustment(Async)");
        }

        return createNewAdjustmentCall(adjustmentToCreateContainer, _callback);

    }


    private ApiResponse<AdjustmentCreatedContainer> createNewAdjustmentWithHttpInfo(AdjustmentToCreateContainer adjustmentToCreateContainer) throws ApiException {
        okhttp3.Call localVarCall = createNewAdjustmentValidateBeforeCall(adjustmentToCreateContainer, null);
        Type localVarReturnType = new TypeToken<AdjustmentCreatedContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewAdjustmentAsync(AdjustmentToCreateContainer adjustmentToCreateContainer, final ApiCallback<AdjustmentCreatedContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewAdjustmentValidateBeforeCall(adjustmentToCreateContainer, _callback);
        Type localVarReturnType = new TypeToken<AdjustmentCreatedContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewAdjustmentRequestBuilder {
        private final AdjustmentToCreate data;

        private CreateNewAdjustmentRequestBuilder(AdjustmentToCreate data) {
            this.data = data;
        }

        /**
         * Build call for createNewAdjustment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdjustmentToCreateContainer adjustmentToCreateContainer = buildBodyParams();
            return createNewAdjustmentCall(adjustmentToCreateContainer, _callback);
        }

        private AdjustmentToCreateContainer buildBodyParams() {
            AdjustmentToCreateContainer adjustmentToCreateContainer = new AdjustmentToCreateContainer();
            adjustmentToCreateContainer.data(this.data);
            return adjustmentToCreateContainer;
        }

        /**
         * Execute createNewAdjustment request
         * @return AdjustmentCreatedContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public AdjustmentCreatedContainer execute() throws ApiException {
            AdjustmentToCreateContainer adjustmentToCreateContainer = buildBodyParams();
            ApiResponse<AdjustmentCreatedContainer> localVarResp = createNewAdjustmentWithHttpInfo(adjustmentToCreateContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewAdjustment request with HTTP info returned
         * @return ApiResponse&lt;AdjustmentCreatedContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdjustmentCreatedContainer> executeWithHttpInfo() throws ApiException {
            AdjustmentToCreateContainer adjustmentToCreateContainer = buildBodyParams();
            return createNewAdjustmentWithHttpInfo(adjustmentToCreateContainer);
        }

        /**
         * Execute createNewAdjustment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdjustmentCreatedContainer> _callback) throws ApiException {
            AdjustmentToCreateContainer adjustmentToCreateContainer = buildBodyParams();
            return createNewAdjustmentAsync(adjustmentToCreateContainer, _callback);
        }
    }

    /**
     * Create a new adjustment
     * Create a new adjustment.
     * @param adjustmentToCreateContainer Creation data for a new adjustment (required)
     * @return CreateNewAdjustmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewAdjustmentRequestBuilder createNewAdjustment(AdjustmentToCreate data) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        return new CreateNewAdjustmentRequestBuilder(data);
    }
    private okhttp3.Call getAllCall(String contractId, LocalDate from, LocalDate to, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/adjustments"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllValidateBeforeCall(String contractId, LocalDate from, LocalDate to, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling getAll(Async)");
        }

        return getAllCall(contractId, from, to, _callback);

    }


    private ApiResponse<AdjustmentsContainer> getAllWithHttpInfo(String contractId, LocalDate from, LocalDate to) throws ApiException {
        okhttp3.Call localVarCall = getAllValidateBeforeCall(contractId, from, to, null);
        Type localVarReturnType = new TypeToken<AdjustmentsContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAsync(String contractId, LocalDate from, LocalDate to, final ApiCallback<AdjustmentsContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllValidateBeforeCall(contractId, from, to, _callback);
        Type localVarReturnType = new TypeToken<AdjustmentsContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRequestBuilder {
        private final String contractId;
        private LocalDate from;
        private LocalDate to;

        private GetAllRequestBuilder(String contractId) {
            this.contractId = contractId;
        }

        /**
         * Set from
         * @param from Filter adjustments by start date. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder from(LocalDate from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set to
         * @param to Filter adjustments by end date. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder to(LocalDate to) {
            this.to = to;
            return this;
        }
        
        /**
         * Build call for getAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCall(contractId, from, to, _callback);
        }


        /**
         * Execute getAll request
         * @return AdjustmentsContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public AdjustmentsContainer execute() throws ApiException {
            ApiResponse<AdjustmentsContainer> localVarResp = getAllWithHttpInfo(contractId, from, to);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAll request with HTTP info returned
         * @return ApiResponse&lt;AdjustmentsContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdjustmentsContainer> executeWithHttpInfo() throws ApiException {
            return getAllWithHttpInfo(contractId, from, to);
        }

        /**
         * Execute getAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdjustmentsContainer> _callback) throws ApiException {
            return getAllAsync(contractId, from, to, _callback);
        }
    }

    /**
     * Retrieve adjustments
     * Get all adjustments for the specific contract.
     * @param contractId Deel contract id. (required)
     * @return GetAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRequestBuilder getAll(String contractId) throws IllegalArgumentException {
        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        return new GetAllRequestBuilder(contractId);
    }
    private okhttp3.Call getByIdCall(String adjustmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/adjustments/{adjustment_id}"
            .replace("{" + "adjustment_id" + "}", localVarApiClient.escapeString(adjustmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String adjustmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'adjustmentId' is set
        if (adjustmentId == null) {
            throw new ApiException("Missing the required parameter 'adjustmentId' when calling getById(Async)");
        }

        return getByIdCall(adjustmentId, _callback);

    }


    private ApiResponse<AdjustmentCreatedContainer> getByIdWithHttpInfo(String adjustmentId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(adjustmentId, null);
        Type localVarReturnType = new TypeToken<AdjustmentCreatedContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String adjustmentId, final ApiCallback<AdjustmentCreatedContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(adjustmentId, _callback);
        Type localVarReturnType = new TypeToken<AdjustmentCreatedContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String adjustmentId;

        private GetByIdRequestBuilder(String adjustmentId) {
            this.adjustmentId = adjustmentId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(adjustmentId, _callback);
        }


        /**
         * Execute getById request
         * @return AdjustmentCreatedContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public AdjustmentCreatedContainer execute() throws ApiException {
            ApiResponse<AdjustmentCreatedContainer> localVarResp = getByIdWithHttpInfo(adjustmentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;AdjustmentCreatedContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdjustmentCreatedContainer> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(adjustmentId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdjustmentCreatedContainer> _callback) throws ApiException {
            return getByIdAsync(adjustmentId, _callback);
        }
    }

    /**
     * Retrieve an adjustment
     * Retrieve an adjustment.
     * @param adjustmentId Adjustment id. (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String adjustmentId) throws IllegalArgumentException {
        if (adjustmentId == null) throw new IllegalArgumentException("\"adjustmentId\" is required but got null");
            

        return new GetByIdRequestBuilder(adjustmentId);
    }
    private okhttp3.Call getCategoriesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/adjustments/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCategoriesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getCategoriesCall(_callback);

    }


    private ApiResponse<AdjustmentsCategoriesContainer> getCategoriesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCategoriesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AdjustmentsCategoriesContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCategoriesAsync(final ApiCallback<AdjustmentsCategoriesContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCategoriesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AdjustmentsCategoriesContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCategoriesRequestBuilder {

        private GetCategoriesRequestBuilder() {
        }

        /**
         * Build call for getCategories
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCategoriesCall(_callback);
        }


        /**
         * Execute getCategories request
         * @return AdjustmentsCategoriesContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public AdjustmentsCategoriesContainer execute() throws ApiException {
            ApiResponse<AdjustmentsCategoriesContainer> localVarResp = getCategoriesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCategories request with HTTP info returned
         * @return ApiResponse&lt;AdjustmentsCategoriesContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdjustmentsCategoriesContainer> executeWithHttpInfo() throws ApiException {
            return getCategoriesWithHttpInfo();
        }

        /**
         * Execute getCategories request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdjustmentsCategoriesContainer> _callback) throws ApiException {
            return getCategoriesAsync(_callback);
        }
    }

    /**
     * Retrieve categories
     * Get all categories for your organization.
     * @return GetCategoriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetCategoriesRequestBuilder getCategories() throws IllegalArgumentException {
        return new GetCategoriesRequestBuilder();
    }
    private okhttp3.Call removeAdjustmentCall(String adjustmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/adjustments/{adjustment_id}"
            .replace("{" + "adjustment_id" + "}", localVarApiClient.escapeString(adjustmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeAdjustmentValidateBeforeCall(String adjustmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'adjustmentId' is set
        if (adjustmentId == null) {
            throw new ApiException("Missing the required parameter 'adjustmentId' when calling removeAdjustment(Async)");
        }

        return removeAdjustmentCall(adjustmentId, _callback);

    }


    private ApiResponse<GenericResultDeleted> removeAdjustmentWithHttpInfo(String adjustmentId) throws ApiException {
        okhttp3.Call localVarCall = removeAdjustmentValidateBeforeCall(adjustmentId, null);
        Type localVarReturnType = new TypeToken<GenericResultDeleted>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeAdjustmentAsync(String adjustmentId, final ApiCallback<GenericResultDeleted> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeAdjustmentValidateBeforeCall(adjustmentId, _callback);
        Type localVarReturnType = new TypeToken<GenericResultDeleted>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveAdjustmentRequestBuilder {
        private final String adjustmentId;

        private RemoveAdjustmentRequestBuilder(String adjustmentId) {
            this.adjustmentId = adjustmentId;
        }

        /**
         * Build call for removeAdjustment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeAdjustmentCall(adjustmentId, _callback);
        }


        /**
         * Execute removeAdjustment request
         * @return GenericResultDeleted
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GenericResultDeleted execute() throws ApiException {
            ApiResponse<GenericResultDeleted> localVarResp = removeAdjustmentWithHttpInfo(adjustmentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeAdjustment request with HTTP info returned
         * @return ApiResponse&lt;GenericResultDeleted&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GenericResultDeleted> executeWithHttpInfo() throws ApiException {
            return removeAdjustmentWithHttpInfo(adjustmentId);
        }

        /**
         * Execute removeAdjustment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GenericResultDeleted> _callback) throws ApiException {
            return removeAdjustmentAsync(adjustmentId, _callback);
        }
    }

    /**
     * Delete an adjustment
     * Delete an adjustment.
     * @param adjustmentId Adjustment id. (required)
     * @return RemoveAdjustmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveAdjustmentRequestBuilder removeAdjustment(String adjustmentId) throws IllegalArgumentException {
        if (adjustmentId == null) throw new IllegalArgumentException("\"adjustmentId\" is required but got null");
            

        return new RemoveAdjustmentRequestBuilder(adjustmentId);
    }
    private okhttp3.Call updateAdjustmentCall(String adjustmentId, AdjustmentToUpdateContainer adjustmentToUpdateContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adjustmentToUpdateContainer;

        // create path and map variables
        String localVarPath = "/adjustments/{adjustment_id}"
            .replace("{" + "adjustment_id" + "}", localVarApiClient.escapeString(adjustmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAdjustmentValidateBeforeCall(String adjustmentId, AdjustmentToUpdateContainer adjustmentToUpdateContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'adjustmentId' is set
        if (adjustmentId == null) {
            throw new ApiException("Missing the required parameter 'adjustmentId' when calling updateAdjustment(Async)");
        }

        // verify the required parameter 'adjustmentToUpdateContainer' is set
        if (adjustmentToUpdateContainer == null) {
            throw new ApiException("Missing the required parameter 'adjustmentToUpdateContainer' when calling updateAdjustment(Async)");
        }

        return updateAdjustmentCall(adjustmentId, adjustmentToUpdateContainer, _callback);

    }


    private ApiResponse<GenericResultUpdated> updateAdjustmentWithHttpInfo(String adjustmentId, AdjustmentToUpdateContainer adjustmentToUpdateContainer) throws ApiException {
        okhttp3.Call localVarCall = updateAdjustmentValidateBeforeCall(adjustmentId, adjustmentToUpdateContainer, null);
        Type localVarReturnType = new TypeToken<GenericResultUpdated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAdjustmentAsync(String adjustmentId, AdjustmentToUpdateContainer adjustmentToUpdateContainer, final ApiCallback<GenericResultUpdated> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAdjustmentValidateBeforeCall(adjustmentId, adjustmentToUpdateContainer, _callback);
        Type localVarReturnType = new TypeToken<GenericResultUpdated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateAdjustmentRequestBuilder {
        private final AdjustmentToUpdate data;
        private final String adjustmentId;

        private UpdateAdjustmentRequestBuilder(AdjustmentToUpdate data, String adjustmentId) {
            this.data = data;
            this.adjustmentId = adjustmentId;
        }

        /**
         * Build call for updateAdjustment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdjustmentToUpdateContainer adjustmentToUpdateContainer = buildBodyParams();
            return updateAdjustmentCall(adjustmentId, adjustmentToUpdateContainer, _callback);
        }

        private AdjustmentToUpdateContainer buildBodyParams() {
            AdjustmentToUpdateContainer adjustmentToUpdateContainer = new AdjustmentToUpdateContainer();
            adjustmentToUpdateContainer.data(this.data);
            return adjustmentToUpdateContainer;
        }

        /**
         * Execute updateAdjustment request
         * @return GenericResultUpdated
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GenericResultUpdated execute() throws ApiException {
            AdjustmentToUpdateContainer adjustmentToUpdateContainer = buildBodyParams();
            ApiResponse<GenericResultUpdated> localVarResp = updateAdjustmentWithHttpInfo(adjustmentId, adjustmentToUpdateContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateAdjustment request with HTTP info returned
         * @return ApiResponse&lt;GenericResultUpdated&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GenericResultUpdated> executeWithHttpInfo() throws ApiException {
            AdjustmentToUpdateContainer adjustmentToUpdateContainer = buildBodyParams();
            return updateAdjustmentWithHttpInfo(adjustmentId, adjustmentToUpdateContainer);
        }

        /**
         * Execute updateAdjustment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GenericResultUpdated> _callback) throws ApiException {
            AdjustmentToUpdateContainer adjustmentToUpdateContainer = buildBodyParams();
            return updateAdjustmentAsync(adjustmentId, adjustmentToUpdateContainer, _callback);
        }
    }

    /**
     * Update an adjustment
     * Update an adjustment.
     * @param adjustmentId Adjustment id. (required)
     * @param adjustmentToUpdateContainer Adjustment object that needs to be updated (required)
     * @return UpdateAdjustmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAdjustmentRequestBuilder updateAdjustment(AdjustmentToUpdate data, String adjustmentId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (adjustmentId == null) throw new IllegalArgumentException("\"adjustmentId\" is required but got null");
            

        return new UpdateAdjustmentRequestBuilder(data, adjustmentId);
    }
}
