/*
 * Deel REST API
 * API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.GenericResultDeleted;
import com.konfigthis.client.model.InputToCreatePgoTask;
import com.konfigthis.client.model.PgoTaskReviewsByIdToCreate;
import com.konfigthis.client.model.PgoTaskReviewsToCreate;
import com.konfigthis.client.model.PgoTaskToCreate;
import com.konfigthis.client.model.RequestBodyToCreatePgoTaskReviewsByIdReviewsContainer;
import com.konfigthis.client.model.RequestBodyToCreatePgoTaskReviewsReviewsContainer;
import com.konfigthis.client.model.TaskCreatedContainer;
import com.konfigthis.client.model.TaskListContainer;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TasksApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TasksApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TasksApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewTaskCall(String contractId, InputToCreatePgoTask inputToCreatePgoTask, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inputToCreatePgoTask;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/tasks"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewTaskValidateBeforeCall(String contractId, InputToCreatePgoTask inputToCreatePgoTask, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling createNewTask(Async)");
        }

        // verify the required parameter 'inputToCreatePgoTask' is set
        if (inputToCreatePgoTask == null) {
            throw new ApiException("Missing the required parameter 'inputToCreatePgoTask' when calling createNewTask(Async)");
        }

        return createNewTaskCall(contractId, inputToCreatePgoTask, _callback);

    }


    private ApiResponse<TaskCreatedContainer> createNewTaskWithHttpInfo(String contractId, InputToCreatePgoTask inputToCreatePgoTask) throws ApiException {
        okhttp3.Call localVarCall = createNewTaskValidateBeforeCall(contractId, inputToCreatePgoTask, null);
        Type localVarReturnType = new TypeToken<TaskCreatedContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewTaskAsync(String contractId, InputToCreatePgoTask inputToCreatePgoTask, final ApiCallback<TaskCreatedContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewTaskValidateBeforeCall(contractId, inputToCreatePgoTask, _callback);
        Type localVarReturnType = new TypeToken<TaskCreatedContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewTaskRequestBuilder {
        private final PgoTaskToCreate data;
        private final String contractId;

        private CreateNewTaskRequestBuilder(PgoTaskToCreate data, String contractId) {
            this.data = data;
            this.contractId = contractId;
        }

        /**
         * Build call for createNewTask
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            InputToCreatePgoTask inputToCreatePgoTask = buildBodyParams();
            return createNewTaskCall(contractId, inputToCreatePgoTask, _callback);
        }

        private InputToCreatePgoTask buildBodyParams() {
            InputToCreatePgoTask inputToCreatePgoTask = new InputToCreatePgoTask();
            inputToCreatePgoTask.data(this.data);
            return inputToCreatePgoTask;
        }

        /**
         * Execute createNewTask request
         * @return TaskCreatedContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public TaskCreatedContainer execute() throws ApiException {
            InputToCreatePgoTask inputToCreatePgoTask = buildBodyParams();
            ApiResponse<TaskCreatedContainer> localVarResp = createNewTaskWithHttpInfo(contractId, inputToCreatePgoTask);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewTask request with HTTP info returned
         * @return ApiResponse&lt;TaskCreatedContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TaskCreatedContainer> executeWithHttpInfo() throws ApiException {
            InputToCreatePgoTask inputToCreatePgoTask = buildBodyParams();
            return createNewTaskWithHttpInfo(contractId, inputToCreatePgoTask);
        }

        /**
         * Execute createNewTask request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TaskCreatedContainer> _callback) throws ApiException {
            InputToCreatePgoTask inputToCreatePgoTask = buildBodyParams();
            return createNewTaskAsync(contractId, inputToCreatePgoTask, _callback);
        }
    }

    /**
     * Create new task
     * Create a new task for the contractor.
     * @param contractId Deel contract id. (required)
     * @param inputToCreatePgoTask Contract object that needs to be created (required)
     * @return CreateNewTaskRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewTaskRequestBuilder createNewTask(PgoTaskToCreate data, String contractId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        return new CreateNewTaskRequestBuilder(data, contractId);
    }
    private okhttp3.Call deleteFromContractCall(String contractId, String taskId, String reason, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/tasks/{task_id}"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()))
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reason", reason));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFromContractValidateBeforeCall(String contractId, String taskId, String reason, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling deleteFromContract(Async)");
        }

        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling deleteFromContract(Async)");
        }

        return deleteFromContractCall(contractId, taskId, reason, _callback);

    }


    private ApiResponse<GenericResultDeleted> deleteFromContractWithHttpInfo(String contractId, String taskId, String reason) throws ApiException {
        okhttp3.Call localVarCall = deleteFromContractValidateBeforeCall(contractId, taskId, reason, null);
        Type localVarReturnType = new TypeToken<GenericResultDeleted>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteFromContractAsync(String contractId, String taskId, String reason, final ApiCallback<GenericResultDeleted> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFromContractValidateBeforeCall(contractId, taskId, reason, _callback);
        Type localVarReturnType = new TypeToken<GenericResultDeleted>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteFromContractRequestBuilder {
        private final String contractId;
        private final String taskId;
        private String reason;

        private DeleteFromContractRequestBuilder(String contractId, String taskId) {
            this.contractId = contractId;
            this.taskId = taskId;
        }

        /**
         * Set reason
         * @param reason Reason for deleting an existing task (optional)
         * @return DeleteFromContractRequestBuilder
         */
        public DeleteFromContractRequestBuilder reason(String reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Build call for deleteFromContract
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteFromContractCall(contractId, taskId, reason, _callback);
        }


        /**
         * Execute deleteFromContract request
         * @return GenericResultDeleted
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GenericResultDeleted execute() throws ApiException {
            ApiResponse<GenericResultDeleted> localVarResp = deleteFromContractWithHttpInfo(contractId, taskId, reason);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteFromContract request with HTTP info returned
         * @return ApiResponse&lt;GenericResultDeleted&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GenericResultDeleted> executeWithHttpInfo() throws ApiException {
            return deleteFromContractWithHttpInfo(contractId, taskId, reason);
        }

        /**
         * Execute deleteFromContract request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GenericResultDeleted> _callback) throws ApiException {
            return deleteFromContractAsync(contractId, taskId, reason, _callback);
        }
    }

    /**
     * Delete task
     * Delete task from the contract.
     * @param contractId Deel contract id. (required)
     * @param taskId ID of task entity. (required)
     * @return DeleteFromContractRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteFromContractRequestBuilder deleteFromContract(String contractId, String taskId) throws IllegalArgumentException {
        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        if (taskId == null) throw new IllegalArgumentException("\"taskId\" is required but got null");
            

        return new DeleteFromContractRequestBuilder(contractId, taskId);
    }
    private okhttp3.Call getContractTasksCall(String contractId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/tasks"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContractTasksValidateBeforeCall(String contractId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling getContractTasks(Async)");
        }

        return getContractTasksCall(contractId, _callback);

    }


    private ApiResponse<TaskListContainer> getContractTasksWithHttpInfo(String contractId) throws ApiException {
        okhttp3.Call localVarCall = getContractTasksValidateBeforeCall(contractId, null);
        Type localVarReturnType = new TypeToken<TaskListContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getContractTasksAsync(String contractId, final ApiCallback<TaskListContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContractTasksValidateBeforeCall(contractId, _callback);
        Type localVarReturnType = new TypeToken<TaskListContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetContractTasksRequestBuilder {
        private final String contractId;

        private GetContractTasksRequestBuilder(String contractId) {
            this.contractId = contractId;
        }

        /**
         * Build call for getContractTasks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getContractTasksCall(contractId, _callback);
        }


        /**
         * Execute getContractTasks request
         * @return TaskListContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public TaskListContainer execute() throws ApiException {
            ApiResponse<TaskListContainer> localVarResp = getContractTasksWithHttpInfo(contractId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getContractTasks request with HTTP info returned
         * @return ApiResponse&lt;TaskListContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TaskListContainer> executeWithHttpInfo() throws ApiException {
            return getContractTasksWithHttpInfo(contractId);
        }

        /**
         * Execute getContractTasks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TaskListContainer> _callback) throws ApiException {
            return getContractTasksAsync(contractId, _callback);
        }
    }

    /**
     * List of tasks
     * Retrieve a list of tasks for a given contract.
     * @param contractId Deel contract id. (required)
     * @return GetContractTasksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetContractTasksRequestBuilder getContractTasks(String contractId) throws IllegalArgumentException {
        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        return new GetContractTasksRequestBuilder(contractId);
    }
    private okhttp3.Call reviewManyTasksCall(String contractId, RequestBodyToCreatePgoTaskReviewsReviewsContainer requestBodyToCreatePgoTaskReviewsReviewsContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBodyToCreatePgoTaskReviewsReviewsContainer;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/tasks/many/reviews"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reviewManyTasksValidateBeforeCall(String contractId, RequestBodyToCreatePgoTaskReviewsReviewsContainer requestBodyToCreatePgoTaskReviewsReviewsContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling reviewManyTasks(Async)");
        }

        return reviewManyTasksCall(contractId, requestBodyToCreatePgoTaskReviewsReviewsContainer, _callback);

    }


    private ApiResponse<TaskListContainer> reviewManyTasksWithHttpInfo(String contractId, RequestBodyToCreatePgoTaskReviewsReviewsContainer requestBodyToCreatePgoTaskReviewsReviewsContainer) throws ApiException {
        okhttp3.Call localVarCall = reviewManyTasksValidateBeforeCall(contractId, requestBodyToCreatePgoTaskReviewsReviewsContainer, null);
        Type localVarReturnType = new TypeToken<TaskListContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call reviewManyTasksAsync(String contractId, RequestBodyToCreatePgoTaskReviewsReviewsContainer requestBodyToCreatePgoTaskReviewsReviewsContainer, final ApiCallback<TaskListContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = reviewManyTasksValidateBeforeCall(contractId, requestBodyToCreatePgoTaskReviewsReviewsContainer, _callback);
        Type localVarReturnType = new TypeToken<TaskListContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ReviewManyTasksRequestBuilder {
        private final PgoTaskReviewsToCreate data;
        private final String contractId;

        private ReviewManyTasksRequestBuilder(PgoTaskReviewsToCreate data, String contractId) {
            this.data = data;
            this.contractId = contractId;
        }

        /**
         * Build call for reviewManyTasks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RequestBodyToCreatePgoTaskReviewsReviewsContainer requestBodyToCreatePgoTaskReviewsReviewsContainer = buildBodyParams();
            return reviewManyTasksCall(contractId, requestBodyToCreatePgoTaskReviewsReviewsContainer, _callback);
        }

        private RequestBodyToCreatePgoTaskReviewsReviewsContainer buildBodyParams() {
            RequestBodyToCreatePgoTaskReviewsReviewsContainer requestBodyToCreatePgoTaskReviewsReviewsContainer = new RequestBodyToCreatePgoTaskReviewsReviewsContainer();
            requestBodyToCreatePgoTaskReviewsReviewsContainer.data(this.data);
            return requestBodyToCreatePgoTaskReviewsReviewsContainer;
        }

        /**
         * Execute reviewManyTasks request
         * @return TaskListContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public TaskListContainer execute() throws ApiException {
            RequestBodyToCreatePgoTaskReviewsReviewsContainer requestBodyToCreatePgoTaskReviewsReviewsContainer = buildBodyParams();
            ApiResponse<TaskListContainer> localVarResp = reviewManyTasksWithHttpInfo(contractId, requestBodyToCreatePgoTaskReviewsReviewsContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute reviewManyTasks request with HTTP info returned
         * @return ApiResponse&lt;TaskListContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TaskListContainer> executeWithHttpInfo() throws ApiException {
            RequestBodyToCreatePgoTaskReviewsReviewsContainer requestBodyToCreatePgoTaskReviewsReviewsContainer = buildBodyParams();
            return reviewManyTasksWithHttpInfo(contractId, requestBodyToCreatePgoTaskReviewsReviewsContainer);
        }

        /**
         * Execute reviewManyTasks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TaskListContainer> _callback) throws ApiException {
            RequestBodyToCreatePgoTaskReviewsReviewsContainer requestBodyToCreatePgoTaskReviewsReviewsContainer = buildBodyParams();
            return reviewManyTasksAsync(contractId, requestBodyToCreatePgoTaskReviewsReviewsContainer, _callback);
        }
    }

    /**
     * Review multiple tasks
     * Review multiple tasks to approve or decline the submitted work.
     * @param contractId Deel contract id. (required)
     * @return ReviewManyTasksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public ReviewManyTasksRequestBuilder reviewManyTasks(PgoTaskReviewsToCreate data, String contractId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        return new ReviewManyTasksRequestBuilder(data, contractId);
    }
    private okhttp3.Call submitTaskReviewCall(String contractId, String taskId, RequestBodyToCreatePgoTaskReviewsByIdReviewsContainer requestBodyToCreatePgoTaskReviewsByIdReviewsContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBodyToCreatePgoTaskReviewsByIdReviewsContainer;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/tasks/{task_id}/reviews"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()))
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitTaskReviewValidateBeforeCall(String contractId, String taskId, RequestBodyToCreatePgoTaskReviewsByIdReviewsContainer requestBodyToCreatePgoTaskReviewsByIdReviewsContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling submitTaskReview(Async)");
        }

        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling submitTaskReview(Async)");
        }

        return submitTaskReviewCall(contractId, taskId, requestBodyToCreatePgoTaskReviewsByIdReviewsContainer, _callback);

    }


    private ApiResponse<TaskListContainer> submitTaskReviewWithHttpInfo(String contractId, String taskId, RequestBodyToCreatePgoTaskReviewsByIdReviewsContainer requestBodyToCreatePgoTaskReviewsByIdReviewsContainer) throws ApiException {
        okhttp3.Call localVarCall = submitTaskReviewValidateBeforeCall(contractId, taskId, requestBodyToCreatePgoTaskReviewsByIdReviewsContainer, null);
        Type localVarReturnType = new TypeToken<TaskListContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call submitTaskReviewAsync(String contractId, String taskId, RequestBodyToCreatePgoTaskReviewsByIdReviewsContainer requestBodyToCreatePgoTaskReviewsByIdReviewsContainer, final ApiCallback<TaskListContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitTaskReviewValidateBeforeCall(contractId, taskId, requestBodyToCreatePgoTaskReviewsByIdReviewsContainer, _callback);
        Type localVarReturnType = new TypeToken<TaskListContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SubmitTaskReviewRequestBuilder {
        private final PgoTaskReviewsByIdToCreate data;
        private final String contractId;
        private final String taskId;

        private SubmitTaskReviewRequestBuilder(PgoTaskReviewsByIdToCreate data, String contractId, String taskId) {
            this.data = data;
            this.contractId = contractId;
            this.taskId = taskId;
        }

        /**
         * Build call for submitTaskReview
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RequestBodyToCreatePgoTaskReviewsByIdReviewsContainer requestBodyToCreatePgoTaskReviewsByIdReviewsContainer = buildBodyParams();
            return submitTaskReviewCall(contractId, taskId, requestBodyToCreatePgoTaskReviewsByIdReviewsContainer, _callback);
        }

        private RequestBodyToCreatePgoTaskReviewsByIdReviewsContainer buildBodyParams() {
            RequestBodyToCreatePgoTaskReviewsByIdReviewsContainer requestBodyToCreatePgoTaskReviewsByIdReviewsContainer = new RequestBodyToCreatePgoTaskReviewsByIdReviewsContainer();
            requestBodyToCreatePgoTaskReviewsByIdReviewsContainer.data(this.data);
            return requestBodyToCreatePgoTaskReviewsByIdReviewsContainer;
        }

        /**
         * Execute submitTaskReview request
         * @return TaskListContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public TaskListContainer execute() throws ApiException {
            RequestBodyToCreatePgoTaskReviewsByIdReviewsContainer requestBodyToCreatePgoTaskReviewsByIdReviewsContainer = buildBodyParams();
            ApiResponse<TaskListContainer> localVarResp = submitTaskReviewWithHttpInfo(contractId, taskId, requestBodyToCreatePgoTaskReviewsByIdReviewsContainer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute submitTaskReview request with HTTP info returned
         * @return ApiResponse&lt;TaskListContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TaskListContainer> executeWithHttpInfo() throws ApiException {
            RequestBodyToCreatePgoTaskReviewsByIdReviewsContainer requestBodyToCreatePgoTaskReviewsByIdReviewsContainer = buildBodyParams();
            return submitTaskReviewWithHttpInfo(contractId, taskId, requestBodyToCreatePgoTaskReviewsByIdReviewsContainer);
        }

        /**
         * Execute submitTaskReview request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TaskListContainer> _callback) throws ApiException {
            RequestBodyToCreatePgoTaskReviewsByIdReviewsContainer requestBodyToCreatePgoTaskReviewsByIdReviewsContainer = buildBodyParams();
            return submitTaskReviewAsync(contractId, taskId, requestBodyToCreatePgoTaskReviewsByIdReviewsContainer, _callback);
        }
    }

    /**
     * Review a single task
     * Review a single task to approve or decline the submitted work.
     * @param contractId Deel contract id. (required)
     * @param taskId ID of task entity. (required)
     * @return SubmitTaskReviewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public SubmitTaskReviewRequestBuilder submitTaskReview(PgoTaskReviewsByIdToCreate data, String contractId, String taskId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        if (taskId == null) throw new IllegalArgumentException("\"taskId\" is required but got null");
            

        return new SubmitTaskReviewRequestBuilder(data, contractId, taskId);
    }
}
