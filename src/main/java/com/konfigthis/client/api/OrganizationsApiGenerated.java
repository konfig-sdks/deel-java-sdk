/*
 * Deel REST API
 * API specification for Deel HR user provisioning API. This YAML file is a preview of the API Deel is building. We are looking forward to your feedback.
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AgreementListContainer;
import com.konfigthis.client.model.DepartmentsContainer;
import com.konfigthis.client.model.LegalEntityListContainer;
import com.konfigthis.client.model.OrganizationListContainer;
import com.konfigthis.client.model.TeamListContainer;
import com.konfigthis.client.model.WorkingLocationsContainer;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OrganizationsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrganizationsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public OrganizationsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getDepartmentListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/departments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDepartmentListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getDepartmentListCall(_callback);

    }


    private ApiResponse<DepartmentsContainer> getDepartmentListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getDepartmentListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<DepartmentsContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDepartmentListAsync(final ApiCallback<DepartmentsContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDepartmentListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<DepartmentsContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDepartmentListRequestBuilder {

        private GetDepartmentListRequestBuilder() {
        }

        /**
         * Build call for getDepartmentList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDepartmentListCall(_callback);
        }


        /**
         * Execute getDepartmentList request
         * @return DepartmentsContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public DepartmentsContainer execute() throws ApiException {
            ApiResponse<DepartmentsContainer> localVarResp = getDepartmentListWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDepartmentList request with HTTP info returned
         * @return ApiResponse&lt;DepartmentsContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DepartmentsContainer> executeWithHttpInfo() throws ApiException {
            return getDepartmentListWithHttpInfo();
        }

        /**
         * Execute getDepartmentList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DepartmentsContainer> _callback) throws ApiException {
            return getDepartmentListAsync(_callback);
        }
    }

    /**
     * Retrieve departments
     * Get list of organization departments.
     * @return GetDepartmentListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetDepartmentListRequestBuilder getDepartmentList() throws IllegalArgumentException {
        return new GetDepartmentListRequestBuilder();
    }
    private okhttp3.Call getDetailsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getDetailsCall(_callback);

    }


    private ApiResponse<OrganizationListContainer> getDetailsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OrganizationListContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsAsync(final ApiCallback<OrganizationListContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OrganizationListContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsRequestBuilder {

        private GetDetailsRequestBuilder() {
        }

        /**
         * Build call for getDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsCall(_callback);
        }


        /**
         * Execute getDetails request
         * @return OrganizationListContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public OrganizationListContainer execute() throws ApiException {
            ApiResponse<OrganizationListContainer> localVarResp = getDetailsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetails request with HTTP info returned
         * @return ApiResponse&lt;OrganizationListContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrganizationListContainer> executeWithHttpInfo() throws ApiException {
            return getDetailsWithHttpInfo();
        }

        /**
         * Execute getDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrganizationListContainer> _callback) throws ApiException {
            return getDetailsAsync(_callback);
        }
    }

    /**
     * Get current organization
     * Retrieve the current organization details. Organization is automatically detected from the auth token.
     * @return GetDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsRequestBuilder getDetails() throws IllegalArgumentException {
        return new GetDetailsRequestBuilder();
    }
    private okhttp3.Call getLegalEntitiesListCall(String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/legal-entities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLegalEntitiesListValidateBeforeCall(String type, final ApiCallback _callback) throws ApiException {
        return getLegalEntitiesListCall(type, _callback);

    }


    private ApiResponse<LegalEntityListContainer> getLegalEntitiesListWithHttpInfo(String type) throws ApiException {
        okhttp3.Call localVarCall = getLegalEntitiesListValidateBeforeCall(type, null);
        Type localVarReturnType = new TypeToken<LegalEntityListContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLegalEntitiesListAsync(String type, final ApiCallback<LegalEntityListContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLegalEntitiesListValidateBeforeCall(type, _callback);
        Type localVarReturnType = new TypeToken<LegalEntityListContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLegalEntitiesListRequestBuilder {
        private String type;

        private GetLegalEntitiesListRequestBuilder() {
        }

        /**
         * Set type
         * @param type Return list of global payroll legal entities if provided (optional)
         * @return GetLegalEntitiesListRequestBuilder
         */
        public GetLegalEntitiesListRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for getLegalEntitiesList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLegalEntitiesListCall(type, _callback);
        }


        /**
         * Execute getLegalEntitiesList request
         * @return LegalEntityListContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public LegalEntityListContainer execute() throws ApiException {
            ApiResponse<LegalEntityListContainer> localVarResp = getLegalEntitiesListWithHttpInfo(type);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLegalEntitiesList request with HTTP info returned
         * @return ApiResponse&lt;LegalEntityListContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LegalEntityListContainer> executeWithHttpInfo() throws ApiException {
            return getLegalEntitiesListWithHttpInfo(type);
        }

        /**
         * Execute getLegalEntitiesList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LegalEntityListContainer> _callback) throws ApiException {
            return getLegalEntitiesListAsync(type, _callback);
        }
    }

    /**
     * List of legal entities
     * Retrieve a list of legal entities in your account.
     * @return GetLegalEntitiesListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetLegalEntitiesListRequestBuilder getLegalEntitiesList() throws IllegalArgumentException {
        return new GetLegalEntitiesListRequestBuilder();
    }
    private okhttp3.Call getTeamListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTeamListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getTeamListCall(_callback);

    }


    private ApiResponse<TeamListContainer> getTeamListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getTeamListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<TeamListContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTeamListAsync(final ApiCallback<TeamListContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTeamListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<TeamListContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTeamListRequestBuilder {

        private GetTeamListRequestBuilder() {
        }

        /**
         * Build call for getTeamList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTeamListCall(_callback);
        }


        /**
         * Execute getTeamList request
         * @return TeamListContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public TeamListContainer execute() throws ApiException {
            ApiResponse<TeamListContainer> localVarResp = getTeamListWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTeamList request with HTTP info returned
         * @return ApiResponse&lt;TeamListContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TeamListContainer> executeWithHttpInfo() throws ApiException {
            return getTeamListWithHttpInfo();
        }

        /**
         * Execute getTeamList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TeamListContainer> _callback) throws ApiException {
            return getTeamListAsync(_callback);
        }
    }

    /**
     * Get team list
     * Retrieve a list of teams in your organization.
     * @return GetTeamListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetTeamListRequestBuilder getTeamList() throws IllegalArgumentException {
        return new GetTeamListRequestBuilder();
    }
    private okhttp3.Call getWorkingLocationsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/working-locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkingLocationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getWorkingLocationsCall(_callback);

    }


    private ApiResponse<WorkingLocationsContainer> getWorkingLocationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getWorkingLocationsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<WorkingLocationsContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWorkingLocationsAsync(final ApiCallback<WorkingLocationsContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkingLocationsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<WorkingLocationsContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWorkingLocationsRequestBuilder {

        private GetWorkingLocationsRequestBuilder() {
        }

        /**
         * Build call for getWorkingLocations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWorkingLocationsCall(_callback);
        }


        /**
         * Execute getWorkingLocations request
         * @return WorkingLocationsContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public WorkingLocationsContainer execute() throws ApiException {
            ApiResponse<WorkingLocationsContainer> localVarResp = getWorkingLocationsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWorkingLocations request with HTTP info returned
         * @return ApiResponse&lt;WorkingLocationsContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkingLocationsContainer> executeWithHttpInfo() throws ApiException {
            return getWorkingLocationsWithHttpInfo();
        }

        /**
         * Execute getWorkingLocations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkingLocationsContainer> _callback) throws ApiException {
            return getWorkingLocationsAsync(_callback);
        }
    }

    /**
     * Retrieve working locations
     * Get organization working locations.
     * @return GetWorkingLocationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetWorkingLocationsRequestBuilder getWorkingLocations() throws IllegalArgumentException {
        return new GetWorkingLocationsRequestBuilder();
    }
    private okhttp3.Call listAgreementsWithDeelCall(String contractId, String limit, String offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/agreements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contractId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contract_id", contractId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAgreementsWithDeelValidateBeforeCall(String contractId, String limit, String offset, final ApiCallback _callback) throws ApiException {
        return listAgreementsWithDeelCall(contractId, limit, offset, _callback);

    }


    private ApiResponse<AgreementListContainer> listAgreementsWithDeelWithHttpInfo(String contractId, String limit, String offset) throws ApiException {
        okhttp3.Call localVarCall = listAgreementsWithDeelValidateBeforeCall(contractId, limit, offset, null);
        Type localVarReturnType = new TypeToken<AgreementListContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAgreementsWithDeelAsync(String contractId, String limit, String offset, final ApiCallback<AgreementListContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAgreementsWithDeelValidateBeforeCall(contractId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<AgreementListContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAgreementsWithDeelRequestBuilder {
        private String contractId;
        private String limit;
        private String offset;

        private ListAgreementsWithDeelRequestBuilder() {
        }

        /**
         * Set contractId
         * @param contractId Deel contract id. (optional)
         * @return ListAgreementsWithDeelRequestBuilder
         */
        public ListAgreementsWithDeelRequestBuilder contractId(String contractId) {
            this.contractId = contractId;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Maximum number of records to return. (optional, default to 50)
         * @return ListAgreementsWithDeelRequestBuilder
         */
        public ListAgreementsWithDeelRequestBuilder limit(String limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset/index of record for the next page of records to return. (optional, default to 0)
         * @return ListAgreementsWithDeelRequestBuilder
         */
        public ListAgreementsWithDeelRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for listAgreementsWithDeel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAgreementsWithDeelCall(contractId, limit, offset, _callback);
        }


        /**
         * Execute listAgreementsWithDeel request
         * @return AgreementListContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public AgreementListContainer execute() throws ApiException {
            ApiResponse<AgreementListContainer> localVarResp = listAgreementsWithDeelWithHttpInfo(contractId, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAgreementsWithDeel request with HTTP info returned
         * @return ApiResponse&lt;AgreementListContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AgreementListContainer> executeWithHttpInfo() throws ApiException {
            return listAgreementsWithDeelWithHttpInfo(contractId, limit, offset);
        }

        /**
         * Execute listAgreementsWithDeel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AgreementListContainer> _callback) throws ApiException {
            return listAgreementsWithDeelAsync(contractId, limit, offset, _callback);
        }
    }

    /**
     * Get agreements with Deel.
     * This end-point returns a list of your agreements with Deel.
     * @return ListAgreementsWithDeelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public ListAgreementsWithDeelRequestBuilder listAgreementsWithDeel() throws IllegalArgumentException {
        return new ListAgreementsWithDeelRequestBuilder();
    }
}
